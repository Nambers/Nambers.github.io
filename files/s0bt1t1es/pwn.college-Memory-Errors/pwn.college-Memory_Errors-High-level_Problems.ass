[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
; video from https://youtu.be/4PJvcZZIyT8
Title: pwn.college - Memory Errors - High-level Problems
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1280
PlayResY: 720
Original Translation: Eritque arcus
Original Editing: Eritque arcus
Original Timing: Eritque arcus
Script Updated By: Eritque arcus

[Aegisub Project Garbage]
Last Style Storage: Default
Audio File: pwn.college-memory-errors-high-level-problem.mp4
Video File: pwn.college-memory-errors-high-level-problem.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.750000
Active Line: 5
Video Position: 993

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,微软雅黑,45,&H002AEF7A,&H00000000,&H00164F05,&H00000000,0,0,0,0,100,100,0,0,1,2,1,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.68,0:00:05.82,Default,,0,0,0,,Hello hackers, 欢迎来到pwn college关于内存错误的第二个视频\NHello hackers, welcome to video 2 of the memory error module PWN college.
Dialogue: 0,0:00:06.06,0:00:11.94,Default,,0,0,0,,我是Yan, 然后今天我们会讲一些宏观上会导致内存错误的问题\NI am Yan, and today we will be gonna talking about high-level problem that lead to memory error.
Dialogue: 0,0:00:12.92,0:00:17.48,Default,,0,0,0,,在之前的视频里, 我讲过\NAs a reminder, in the previous video, I talks about how ...uh.
Dialogue: 0,0:00:17.92,0:00:24.08,Default,,0,0,0,,位于右边图片的这个人(Dennis RitChie)创造了C\NDennis Ritchie. This man on the right of the slide here created the C programming language.
Dialogue: 0,0:00:24.20,0:00:30.88,Default,,0,0,0,,他为了在Unix操作系统上的实用程序创造了这个\NHe create this to create the utilities for the Unix operating system which he had co-created just several years earlier.
Dialogue: 0,0:00:33.10,0:00:44.18,Default,,0,0,0,,C 被设计为一种给开发者提供低层次操作能力的语言\NAnd C was designed to give low-level control and power to the developer to allow them to write fast code
Dialogue: 0,0:00:44.76,0:00:51.42,Default,,0,0,0,,但是一样使用源代码, 高级编程语言, 而不是直接写汇编\Nbut still use a source code, high-level language to write it rather than writing a directly assembly.
Dialogue: 0,0:00:53.80,0:01:01.58,Default,,0,0,0,,不幸的是, 在某种程度上C和冯诺依曼结构结合后\NUnfortunately in combination in a way with the von neumann architecture, brought to us with three Johns.
Dialogue: 0,0:01:01.74,0:01:03.78,Default,,0,0,0,,(左边这三个 Johns 带来了冯诺依曼结构)\NOn these figures on the left.
Dialogue: 0,0:01:06.38,0:01:14.42,Default,,0,0,0,,而且冯诺依曼结构不是很关心安全性\NAnd von neumann architecture (is) kind of seeming thoughtlessness about security.
Dialogue: 0,0:01:16.62,0:01:27.36,Default,,0,0,0,,所以 C 的崛起和快速扩散让我们直到今天都受到内存错误的困扰\NThe rise and amazing spread of C has let to a state where we are plagued with memory errors of software even now till these days.
Dialogue: 0,0:01:27.78,0:01:33.78,Default,,0,0,0,,所以让我们看看一些导致内存错误的问题\NSo let look at some high-level problems of these errors that lead to these errors.
Dialogue: 0,0:01:34.00,0:01:39.86,Default,,0,0,0,,总体来说, 最大的问题是C过于相信开发者\NThe biggest problem, kind of the overall general summary is that C trusts the developer.
Dialogue: 0,0:01:39.96,0:01:45.94,Default,,0,0,0,,在 Python 如果你创建一个3个元素的列表, 然后试图访问第七个元素\NIn Python if you create a list with three elements in it, and you try to access to the eleventh element.
Dialogue: 0,0:01:46.30,0:01:52.94,Default,,0,0,0,,Python 会阻止你访问, 由于这个列表只有三个元素\NPython will tell you: No, this list only has three elements, you are not accessing the eleventh, absolutely no ways!
Dialogue: 0,0:01:53.12,0:01:54.46,Default,,0,0,0,,它会抛出一个异常\NIt will throw an exception.
Dialogue: 0,0:01:55.10,0:02:01.76,Default,,0,0,0,,然后你会知道你访问了不能访问的东西, 然后去修改代码\NAnd then you will realize: oh, I am accessing an element that I shouldn't be accessing, and you can fix your code.
Dialogue: 0,0:02:02.06,0:02:05.12,Default,,0,0,0,,但是 C 不会也不能这么做\NC won't do that. In fact C cannot do that.
Dialogue: 0,0:02:05.48,0:02:11.14,Default,,0,0,0,,C 被设计的尽可能底层\NC is designed, again, to be as low-level as as directly translation as possible.
Dialogue: 0,0:02:11.36,0:02:17.02,Default,,0,0,0,,C 只是帮你承担寄存器管理的职责\NAll C really does, is take the burden of register management away from you.
Dialogue: 0,0:02:17.40,0:02:23.44,Default,,0,0,0,,和相较于汇编很好的调用方法等等\NAnd handle, you know, calling functions and so forth in a nicer way than a assemble may do.
Dialogue: 0,0:02:25.06,0:02:28.56,Default,,0,0,0,,此外你还可以创造结构体之类的, C 能做很多\NWho let you create structures and et cetera. Of course, C does a lot.
Dialogue: 0,0:02:28.56,0:02:34.57,Default,,0,0,0,,但是 C 不会隐式追踪有些东西, 比如数组里元素的数量\NBut what C doesn't do is implicitly track things like the number of elements in an array.
Dialogue: 0,0:02:34.60,0:02:41.87,Default,,0,0,0,,如果你想追踪元素数量和在访问元素前检查是否越界\NIf you want to track the number of elements in array, and be very careful to check if the array is big enough before you access it.
Dialogue: 0,0:02:41.93,0:02:43.21,Default,,0,0,0,,你当然可以在 C 里这么做\NOf course you can write that in C.
Dialogue: 0,0:02:43.76,0:02:47.77,Default,,0,0,0,,你可以创造一个同时有数组和数量的结构\NYou can create a structure, that has both an array and a size.
Dialogue: 0,0:02:47.84,0:02:56.06,Default,,0,0,0,,但是在现实里, 如果人们不那么做并执意继续访问, C 会允许访问\NBut realistically, if people do not do that, and they just access memory willy-nilly. C will let them do that.
Dialogue: 0,0:02:56.83,0:03:00.28,Default,,0,0,0,,然后就会引起问题\NAnd a problem will arise.
Dialogue: 0,0:03:01.88,0:03:08.60,Default,,0,0,0,,这个问题也与我们要讨论的其他宏观上的问题有关\NThe problem that will arise, have to do with some these other high-level problem caused that we will talk about.
Dialogue: 0,0:03:08.67,0:03:15.42,Default,,0,0,0,,让我们从 C 在同一个地方储存控制信息和普通信息开始\NTo begin with, C mixes control information, and data in the same place.
Dialogue: 0,0:03:15.72,0:03:18.70,Default,,0,0,0,,首先你应该回想一下"栈"\NYou should remember the "stack".
Dialogue: 0,0:03:18.97,0:03:26.04,Default,,0,0,0,,在之前的逆向工程的课程里, 你应该学到了栈和使用了他\NYou learned about it and hopefully had to do with a lot in the previous module in reverse engineering.
Dialogue: 0,0:03:26.28,0:03:28.03,Default,,0,0,0,,栈里面有很多用户数据\NThe stack holds a lot of user data.
Dialogue: 0,0:03:28.03,0:03:31.77,Default,,0,0,0,,我指虽然栈从一开始就存了很多用户数据\NI mean those user data actually, the stack start out holding a lot of user data.
Dialogue: 0,0:03:31.77,0:03:34.98,Default,,0,0,0,,但是用户数据在执行过程中散布在各个地方\NBut user data throughout the execution progress spreads all over the place.
Dialogue: 0,0:03:35.24,0:03:42.83,Default,,0,0,0,,不幸的是, 在同一个地方储存着大量的控制信息\NUnfortunately, in those same general memory region, programs, store a lot of control information.
Dialogue: 0,0:03:44.32,0:03:55.04,Default,,0,0,0,,这些控制信息和普通信息(包括用户信息)储存在一起\NAnd they store these {\b1}together{\b0} with the non-control data that including user data that they store.
Dialogue: 0,0:03:55.45,0:03:57.48,Default,,0,0,0,,以栈为例子:\NRecall the stack, for example.
Dialogue: 0,0:03:57.71,0:04:04.28,Default,,0,0,0,,栈上的所有东西都混杂在一起, 方法在栈上的栈帧中包含了返回地址\NEverything on the stack is jumbled together, functions have their function frames on the stack containing the return address.
Dialogue: 0,0:04:04.62,0:04:12.67,Default,,0,0,0,,我们先从左边开始, 首先是这些方法的局部变量. 其中有一部分是由用户控制的\NLet's start actually from the left here, the local variables of the active function. Some of which are users controlled.
Dialogue: 0,0:04:13.52,0:04:15.01,Default,,0,0,0,,可能被攻击者控制\Npotential attacker control :D
Dialogue: 0,0:04:15.42,0:04:24.88,Default,,0,0,0,,然后是储存的一些指向其他地方的指针, 比如栈的基指针指向栈上的某个位置\NSaved pointers to other place of memory, for example, the saved base pointer for the stack point elsewhere in the stack.
Dialogue: 0,0:04:25.13,0:04:32.08,Default,,0,0,0,,接下来是方法中储存的指针, 比如用来返回的指针\Nsave pointer to code, pointer that are later used to return from the function
Dialogue: 0,0:04:32.38,0:04:39.16,Default,,0,0,0,,更往右的是调用(这个方法的)方法的局部变量\NAnd further to the right in the stack, further up stack, local variables of the caller function
Dialogue: 0,0:04:39.40,0:04:45.32,Default,,0,0,0,,接下来这个方法的调用者的栈等等, 以此类推, 栈上就有很多数据\Nthe function that called that function, the function that called that function, and so on, there is a lot data on the stack.
Dialogue: 0,0:04:45.98,0:04:52.88,Default,,0,0,0,,这些都储存在一起, 被同等对待\NAnd these all store together and all treated exactly the same.
Dialogue: 0,0:04:53.68,0:05:00.91,Default,,0,0,0,,这些有很大的安全隐患, 还记得之前讨论的访问第数组七个元素吗\Nwhich is has serious security implications, earlier we talked about accessing the eleventh element of three elements array.
Dialogue: 0,0:05:01.23,0:05:07.95,Default,,0,0,0,,在 C 里如果 local buffer 是 a 这个数组, 然后如果你那么做\NWell, of course, what happened when you do that, in C, if you local buffer is this "a" array.
Dialogue: 0,0:05:08.62,0:05:12.46,Default,,0,0,0,,你会读写到一些东西在那\NYou end up accessing somewhere in here and writing data directly there.
Dialogue: 0,0:05:12.78,0:05:14.49,Default,,0,0,0,,这是一个坏消息\NThat, really bad news.
Dialogue: 0,0:05:15.34,0:05:17.44,Default,,0,0,0,,你可以用这个性质做很多事情\NWhat can you with that? You can do a lot with that.
Dialogue: 0,0:05:17.61,0:05:29.76,Default,,0,0,0,,比如你可以改返回地址, 从指向 .text 里某个位置(指硬编码 string)到其他任意位置\NYou can, for example, take a return address, that was pointing somewhere in the dot text section into the code of the program and change to point somewhere else.
Dialogue: 0,0:05:30.78,0:05:34.56,Default,,0,0,0,,或者你可以注入一些Shell code\NOr change to point to some shell code that you injected.
Dialogue: 0,0:05:35.13,0:05:36.81,Default,,0,0,0,,如果你还记得之前讲过的 Shell Code\NIf you are recall the shell code in module.
Dialogue: 0,0:05:38.54,0:05:39.64,Default,,0,0,0,,这是一个大问题\NThis is a big problem.
Dialogue: 0,0:05:39.95,0:05:44.91,Default,,0,0,0,,事实上, 这个问题在某一个晴天, 可能是晴天\NAnd in fact, this problem, on one sunny day, probably is the sunny somewhere.
Dialogue: 0,0:05:45.13,0:05:56.62,Default,,0,0,0,,在 1988, Robert Teppan Morris 用这个性质, 一个基于栈的缓冲区溢出\Nin 1988, Robert Teppan Morris used this exact situation, a stack base buffer overflow.
Dialogue: 0,0:05:56.92,0:06:03.71,Default,,0,0,0,,他通过溢出重写了方法的返回值\NHe overflowed from some buffer on the stack and overwrote those return address.
Dialogue: 0,0:06:04.11,0:06:10.72,Default,,0,0,0,,他用这个性质做了第一个被记录的利用内存错误的攻击据我所知\NHe used this to create a first documented memory corruption exploit as far as I know.
Dialogue: 0,0:06:11.42,0:06:15.84,Default,,0,0,0,,启动了第一个蠕虫并摧毁了当时整个互联网\NLaunched the first designed worm and brought down the entire internet.
Dialogue: 0,0:06:15.84,0:06:18.25,Default,,0,0,0,,我们在讨论 Shell Coding 的时候谈过这一点\NWe talked about this back when we talked about the shell coding.
Dialogue: 0,0:06:18.25,0:06:25.50,Default,,0,0,0,,但是他就是用了这个性质导致了那些意外的损失\NBut this is, these are the exact bug that he used to do all these damage, accidentally.
Dialogue: 0,0:06:26.70,0:06:33.37,Default,,0,0,0,,这个损失如此之大以至于当时的互联网宕机, 失去连接\NThe damage was so great that the internet had to basically shutdown, disconnected.
Dialogue: 0,0:06:33.98,0:06:38.52,Default,,0,0,0,,修复所有的机器后再重新接入\NFixed all the machine and then plugged back in.
Dialogue: 0,0:06:38.72,0:06:41.15,Default,,0,0,0,,想象一下如果现在发生这个事会十分疯狂\NImagine doing that now will be insane.
Dialogue: 0,0:06:42.00,0:06:47.23,Default,,0,0,0,,因为这件事, 由于 1986 年的计算机欺诈和滥用法, 他被定罪\NFor this, of course, I mentioned before he was convicted under the 1986 computer fraud and abuse act.
Dialogue: 0,0:06:47.29,0:06:58.01,Default,,0,0,0,,但是我没想到的是他后来当上了 MIT 的计算机教授并资助了包括 Y-Combinator 的很多公司\NBut I didn't mention that he is since become a computer science professor at MIT, and co-funded y combinator and a bunch of other ventures.
Dialogue: 0,0:06:58.08,0:07:07.07,Default,,0,0,0,,虽然他有个不光彩的历史, 但他做的很好\NSo he is doing quite well, despite he is shady past.
Dialogue: 0,0:07:07.37,0:07:10.04,Default,,0,0,0,,让我们继续看第三个问题\NAlright, let's move on to problem three.
Dialogue: 0,0:07:10.04,0:07:16.35,Default,,0,0,0,,C 混合了元数据(metadata)和数据就像它混合了控制信息和普通信息一样\N C mixes control data and non-control data. In the same way, C mixes data and metadata.
Dialogue: 0,0:07:16.70,0:07:22.92,Default,,0,0,0,,同样这个也是有问题的, 以 string 为例子\N And this is also problematic. very similar but also problematic, consider the simplest example is string.
Dialogue: 0,0:07:23.37,0:07:26.00,Default,,0,0,0,,你应该知道 C 的字符串以空字节(\0)结束\NYou should all know strings are null terminated in C.
Dialogue: 0,0:07:26.41,0:07:30.22,Default,,0,0,0,,比如当你有个一个内容为 "Yan" 的字符串\NWhen you have a string, you say, you know, the name is Yan.
Dialogue: 0,0:07:30.73,0:07:37.32,Default,,0,0,0,,在这个例子中, 这个字符串是一个10个字节的数组, 拥有一个"Yan"的初始值\NIn this case, this is a ten character array with initial value of "Yan", holds ten bytes.
Dialogue: 0,0:07:37.53,0:07:39.92,Default,,0,0,0,,"Yan" 加上7个空字节(\0)\N"Yan" and then seven NULL bytes.
Dialogue: 0,0:07:40.70,0:07:46.32,Default,,0,0,0,,其中三个字符是数据, 'Y', 'a', 和'n', 剩下的空字节可以当作元数据\NThree of these bytes are data, 'Y', 'a' and 'n' and the NULL byte, actually, is meta data.
Dialogue: 0,0:07:46.88,0:07:49.90,Default,,0,0,0,,这些元数据表示了这是这个字符串的结尾\NIt encodes, it says: hey, this is the end of string.
Dialogue: 0,0:07:49.92,0:07:53.80,Default,,0,0,0,,他用一个(空)字节隐式编码了字符串的长度\NThis implicitly encodes the size of the string, using just a single byte.
Dialogue: 0,0:07:55.50,0:08:01.26,Default,,0,0,0,,所以这个字符串的长度就是从开头到空字节的位置\NAnd the size of this string is basically the beginning of the string up to where the NULL byte is.
Dialogue: 0,0:08:02.67,0:08:04.01,Default,,0,0,0,,这个是有问题的\NThis is problematic.
Dialogue: 0,0:08:04.35,0:08:12.94,Default,,0,0,0,,比如当你用标准系统输入作为输入, 你会获得一些数据\NConsider if you are just inputting a name using the read system call, then just get a bunch of data.
Dialogue: 0,0:08:13.69,0:08:21.37,Default,,0,0,0,,然后你把输入中的数据输入到这个字符串, 然后用一个宏获得字符串的长度\NAnd you do somethings like read from standard input, into name, and then there are macro give you size of the variable.
Dialogue: 0,0:08:21.72,0:08:26.14,Default,,0,0,0,,这个第一眼看起来很合理\NSo the size of name, this looks reasonable at first glance.
Dialogue: 0,0:08:26.82,0:08:33.82,Default,,0,0,0,,但是他是有问题的, 首先它允许用户在任何地方输入空字节\NBut there some problems. First of all, it allows users to inject NULL bytes, anywhere they want.
Dialogue: 0,0:08:33.89,0:08:35.08,Default,,0,0,0,,然后我们会照盘全收下那些数据\NWe will happy take then.
Dialogue: 0,0:08:35.37,0:08:39.74,Default,,0,0,0,,比如我用空字节替换掉 "Yan" 里的 'a'\NSo I could a NULL byte instead of the 'a' in "Yan".
Dialogue: 0,0:08:39.78,0:08:49.45,Default,,0,0,0,,这就代表了我输入了一字节长的字符串和一堆其他数据而不是10字节长\NAnd suddenly, instead of ten length string, I have inputted one length string and much of other data.
Dialogue: 0,0:08:49.61,0:08:52.74,Default,,0,0,0,,这个状态不是可靠的\NThe status of which is questionable, right?
Dialogue: 0,0:08:53.16,0:08:56.78,Default,,0,0,0,,因为任何字符串操作都会在读到空字节结束\NBecause any string operation will terminate on that NULL byte.
Dialogue: 0,0:08:57.49,0:09:00.37,Default,,0,0,0,,类似的是, 情况会更糟如果字符串不包含任何空字节\NLikewise what is if there are no NULL bytes, this even worse.
Dialogue: 0,0:09:00.57,0:09:05.97,Default,,0,0,0,,如果我输入10字节长的有效数据\NIf I just fill all ten bytes with data.
Dialogue: 0,0:09:08.68,0:09:09.98,Default,,0,0,0,,这个字符串会是多长?\NHow long is that string?
Dialogue: 0,0:09:10.21,0:09:13.72,Default,,0,0,0,,看见了吗, 这个给我们了一个提示 C 不会存长度数据\NSee? It raise a reminder, stores no other length information.
Dialogue: 0,0:09:14.14,0:09:22.66,Default,,0,0,0,,在编译后, 它没有任何方法知道长度\NIt has no way to know that this is, after compiling the code.
Dialogue: 0,0:09:22.66,0:09:27.41,Default,,0,0,0,,它没有任何方法知道这个字符串曾经是 1 0 字 节 长\NThat no way to know that this used to be ten ~ bytes ~ long.
Dialogue: 0,0:09:28.29,0:09:40.26,Default,,0,0,0,,所以任何操作在这个缺少空字节的字符串上都会十分奇怪和疯狂\NRight, so further operation on this variable lacking that NULL bytes that encode is length at the string length might do wired and crazy things.
Dialogue: 0,0:09:41.86,0:09:48.25,Default,,0,0,0,,接下来是最后一个宏观上的问题, 初始化和清理\NAlright final high-level problem you covered, initialization and clean up, right.
Dialogue: 0,0:09:48.52,0:09:53.33,Default,,0,0,0,,再重复一遍, C 是非常底层的, 除非你让它初始化, 它就不会初始化\NAgain, C is very low-level, unless you tell it to, it will not do any initialization.
Dialogue: 0,0:09:53.74,0:09:58.01,Default,,0,0,0,,和任何清理, 全部的清理工作, 比如\NOr mostly any clean up, all there will do in term of clean up, for example.
Dialogue: 0,0:09:58.38,0:10:08.45,Default,,0,0,0,,添加栈指针去释放我上节课讨论过的栈帧\NIs add to your stack pointer to quote unquote deallocate the stack frame I am talked about in the previous module.
Dialogue: 0,0:10:08.48,0:10:11.97,Default,,0,0,0,,释放栈帧就是清除全部的数据\NHow deallocating the stack frame that naturally remove any data.
Dialogue: 0,0:10:11.97,0:10:18.54,Default,,0,0,0,,但是在 C 的清理阶段, C 只是移动栈指针然后保留全部的数据\NRight in the clean up stages, C just move stack pointer. That all data still there.
Dialogue: 0,0:10:18.74,0:10:27.54,Default,,0,0,0,,只是那些数据都在栈指针的左边了, 所以在概念上来说, 在正常的程序操作中他们不存在, 虽然实际上是存在的\NIt just now to the left of stack pointer so doesn't real conceptually exists in normal program operation. But it still there.
Dialogue: 0,0:10:27.70,0:10:30.36,Default,,0,0,0,,你有机会可以访问到那些数据\NYou may still be able to access it.
Dialogue: 0,0:10:30.86,0:10:33.28,Default,,0,0,0,,如果这个程序有内存错误\NIf there was a memory error in the program.
Dialogue: 0,0:10:33.66,0:10:40.57,Default,,0,0,0,,类似的, C 不会主动初始化任何东西, 除非你告诉它或者显式初始化\NLikewise, initialization, C won't initial anything, unless you tell it to, unless you explicitly initialize it.
Dialogue: 0,0:10:43.65,0:10:49.50,Default,,0,0,0,,比如对于这个叫 "my_variable" 的8字节长的数组来说\NIf you look at this example, there is a character array called "my_variable" and it is of size eight.
Dialogue: 0,0:10:49.97,0:10:58.56,Default,,0,0,0,,当这个方法被调用时, 它的值是什么?\NWhen the function was called, what will be the value of "my_variable".
Dialogue: 0,0:10:59.78,0:11:00.81,Default,,0,0,0,,它不会全是空字节\NIt won't be NULLs.
Dialogue: 0,0:11:01.72,0:11:07.72,Default,,0,0,0,,比如在上一个例子中, 我们有这个初始化值\NIn the previous example, I had this, initial value
Dialogue: 0,0:11:07.72,0:11:13.84,Default,,0,0,0,,这个初始化显式初始化了这个字符串在内存中\Nthis is an initialization that explicitly initialize my name to this value in memory.
Dialogue: 0,0:11:14.22,0:11:16.65,Default,,0,0,0,,但是对于现在这个例子来说没有初始值\NThis has no initial value.
Dialogue: 0,0:11:16.65,0:11:22.26,Default,,0,0,0,,然后我敢说你在 C 写的代码也没有初始化\NAnd I sure that you are created code in C that had no initialization either.
Dialogue: 0,0:11:22.78,0:11:31.57,Default,,0,0,0,,在没有初始化的情况下, 它会拥有之前的方法留下来的在栈的那个位置上的数据\NWithout initialization, it will simply have the value that happened to be there on the stack, left over by previous function.
Dialogue: 0,0:11:32.42,0:11:35.61,Default,,0,0,0,,你可以去试一下, 创建一个像这样的程序然后运行\NYou can try it. Create a program like this, run it
Dialogue: 0,0:11:35.74,0:11:40.26,Default,,0,0,0,,然后这个结果我也会在未来的视频里进一步解释\NAnd see what it tell you actually will also go through future video more in depth.
Dialogue: 0,0:11:40.50,0:11:44.81,Default,,0,0,0,,这个也是 C 程序面临的一个主要的问题\NBut it is a major issue, facing C program.
Dialogue: 0,0:11:45.17,0:11:52.30,Default,,0,0,0,,这些就是4个主要的问题了, 初始化, 元数据, 控制信息\NSo these are four major problems, initialization, meta data, control data
Dialogue: 0,0:11:53.06,0:11:57.89,Default,,0,0,0,,和让开发者有自己杀自己的能力\NAnd basically the ability of developer to shoot themselves in the foot.
Dialogue: 0,0:11:58.92,0:12:03.94,Default,,0,0,0,,可以写出来一个安全的 C 程序吗? 这是可以的, 因为 C 不是一个不安全的语言\NIs possible to write secure C code? Absolutely, it not that C is an insecure language.
Dialogue: 0,0:12:04.66,0:12:09.54,Default,,0,0,0,,只是 C 给你了一些工具, 你可以以不安全的方式用那些工具, 如果你想\NC give you the tools to use these in insecure way, if you so wanted it to.
Dialogue: 0,0:12:12.50,0:12:18.20,Default,,0,0,0,,这是一个点我希望你们能明白, 另外一个点是\NThat kind one take away I like you to take from this course. The other take away are from this module.
Dialogue: 0,0:12:18.20,0:12:28.54,Default,,0,0,0,,从很多例子里可以得出, C 这种底层的语言很{\b1}容易{\b0}被错误的使用\NThe other take away though is in many many cases is very very very very easy to misuse C and other low-level languages.
Dialogue: 0,0:12:29.16,0:12:36.04,Default,,0,0,0,,这会导致写出不安全的代码\NIn a way, that ends up in the creation of insecure code.
Dialogue: 0,0:12:36.92,0:12:43.77,Default,,0,0,0,,我将在未来的视频里讲更多不同的内存损坏的例子\NI will see you in future video so this module will go in depth into a couple of different examples of memory corruption.
Dialogue: 0,0:12:43.78,0:12:46.82,Default,,0,0,0,,然后我将讨论内存损坏的应对措施\NAnd then we will talk about mitigations of memory corruption.
Dialogue: 0,0:12:37.00,0:12:46.80,Default,,0,0,0,,{\pos(1058,217)}字幕: Eritque arcus\N来源: pwn.college\N在 {\b1}CC-BY-NC{\b0} 下发布\N2022.12
Dialogue: 0,0:12:49.25,0:12:51.25,Default,,0,0,0,,
